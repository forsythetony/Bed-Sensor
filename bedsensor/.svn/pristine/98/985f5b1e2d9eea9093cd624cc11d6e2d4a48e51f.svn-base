/**
 * \file
 *
 * \brief User board initialization template
 *
 */

#include <board.h>
#include <asf.h>
#include <conf_board.h>
#include <conf_sd_mmc_spi.h>
#include <conf_usart_serial.h>
#include <conf_clock.h>
#include <stdio.h>
#include <calendar.h>
#include <compiler.h>
#include <string.h>
#if defined (__GNUC__)
#  include "intc.h"
#endif
#include "system/buttons.h"
#include "system/led.h"
#include "system/rtc.h"
#include "main.h"

#include <calendar.h>

uint8_t curr_data = 0;
uint16_t data_idx = 0;
uint16_t data_rdy = 0;

unsigned long glb_time_msec = 0;
unsigned long glb_time_sec = 0;
volatile uint8_t time_valid = 0;
volatile rtc_t sys_time;
volatile uint16_t test_val = 0;
volatile uint32_t val_avg = 0;
volatile uint32_t val_avg_hold = 0;

volatile uint16_t val_avgs[100];
volatile uint8_t avg_idx = 0;
volatile uint16_t avg_valid = 0;

/**
 * \brief TC interrupt.
 *
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */

__attribute__((__interrupt__)) static void tc_irq(void)
{
	uint32_t val_temp;
	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
	if(sys.log.smpl_enable == 1)
	{
		data[curr_data][0][data_idx] = (adc_sample(ADC_CH0)>>1);
		data[curr_data][1][data_idx] = (adc_sample(ADC_CH1)>>1);
		data[curr_data][2][data_idx] = (adc_sample(ADC_CH2)>>1);
		data[curr_data][3][data_idx] = (adc_sample(ADC_CH3)>>1);
		data[curr_data][4][data_idx] = (adc_sample(ADC_CH4)>>1);
		data[curr_data][5][data_idx] = (adc_sample(ADC_CH5)>>1);
		data[curr_data][6][data_idx] = (adc_sample(ADC_CH6)>>1);
		data[curr_data][7][data_idx] = (adc_sample(ADC_CH7)>>1);
		
		
		uint32_t tmp = (_d(R1,data_idx) + _d(R2,data_idx) + _d(R3,data_idx) + _d(R4,data_idx))/4;
		val_avgs[avg_idx++] = tmp;
		val_avg += tmp;
		
		/*
		test_val++;
		
		data[curr_data][0][data_idx] = test_val % 4096;
		data[curr_data][1][data_idx] = test_val % 4096;
		data[curr_data][2][data_idx] = test_val % 4096;
		data[curr_data][3][data_idx] = test_val % 4096;
		data[curr_data][4][data_idx] = test_val % 4096;
		data[curr_data][5][data_idx] = test_val % 4096;
		data[curr_data][6][data_idx] = test_val % 4096;
		data[curr_data][7][data_idx] = test_val % 4096;
		*/
		
		data_idx++;
		if(data_idx == SMPL_BLK_SIZE)
		{
			if(sys.log.ob_enb)
			{
				if(avg_valid == 1)
				{
					if((val_avg) > sys.log.lvl_avg)
					{
						sys.log.on_bed = 1;
						sys.log.ob_state = ON_BED;
					
					}
					else
					{
						sys.log.on_bed = 0;
						sys.log.ob_state = OFF_BED;
					
					}
					val_avg_hold = val_avg;
					val_avg = 0;
				}					
			}		
			else
			{
				sys.log.on_bed = 0;
				sys.log.ob_state = BED_DISABLED;
				val_avg = 0;
				val_avg_hold = 0;
			}
			

			
			data_idx = 0;
			if(curr_data == 0) curr_data = 1;
			else			   curr_data = 0;
			data_rdy = 1;
		}
	}
	
	HandleButtons();
	HandleLeds();
} 

static void tc_init(volatile avr32_tc_t *tc);

static void tc_init(volatile avr32_tc_t *tc)
{
	// Options for waveform generation.
	static const tc_waveform_opt_t waveform_opt = {
		// Channel selection.
		.channel  = EXAMPLE_TC_CHANNEL,
		// Software trigger effect on TIOB.
		.bswtrg   = TC_EVT_EFFECT_NOOP,
		// External event effect on TIOB.
		.beevt    = TC_EVT_EFFECT_NOOP,
		// RC compare effect on TIOB.
		.bcpc     = TC_EVT_EFFECT_NOOP,
		// RB compare effect on TIOB.
		.bcpb     = TC_EVT_EFFECT_NOOP,
		// Software trigger effect on TIOA.
		.aswtrg   = TC_EVT_EFFECT_NOOP,
		// External event effect on TIOA.
		.aeevt    = TC_EVT_EFFECT_NOOP,
		// RC compare effect on TIOA.
		.acpc     = TC_EVT_EFFECT_NOOP,
		/*
		 * RA compare effect on TIOA.
		 * (other possibilities are none, set and clear).
		 */
		.acpa     = TC_EVT_EFFECT_NOOP,
		/*
		 * Waveform selection: Up mode with automatic trigger(reset)
		 * on RC compare.
		 */
		.wavsel   = TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER,
		// External event trigger enable.
		.enetrg   = false,
		// External event selection.
		.eevt     = 0,
		// External event edge selection.
		.eevtedg  = TC_SEL_NO_EDGE,
		// Counter disable when RC compare.
		.cpcdis   = false,
		// Counter clock stopped with RC compare.
		.cpcstop  = false,
		// Burst signal selection.
		.burst    = false,
		// Clock inversion.
		.clki     = false,
		// Internal source clock 3, connected to fPBA / 8.
		.tcclks   = TC_CLOCK_SOURCE_TC5
	};

	// Options for enabling TC interrupts
	static const tc_interrupt_t tc_interrupt = {
		.etrgs = 0,
		.ldrbs = 0,
		.ldras = 0,
		.cpcs  = 1, // Enable interrupt on RC compare alone
		.cpbs  = 0,
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	
	sysclk_enable_peripheral_clock(tc);
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);

	/*
	 * Set the compare triggers.
	 * We configure it to count every 1 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 1 ms, hence RC = (fPBA / 8) / 1000
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 1875);
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}

void board_init(void)
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	// Initialize Debug USART
	gpio_map_t DBG_USART_GPIO_MAP =
	{
	{DBG_USART_RX_PIN, DBG_USART_RX_FUNCTION},
	{DBG_USART_TX_PIN, DBG_USART_TX_FUNCTION}
	};

	usart_serial_options_t DBG_USART_OPTIONS =
	{
		.baudrate     = 115200,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};

	gpio_enable_module(DBG_USART_GPIO_MAP,
	sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));
	usart_serial_init(DBG_USART,&DBG_USART_OPTIONS);

	spi_options_t adc_spi_opts =
	{
		.reg = 0,
		.baudrate = ADC_SPI_BAUD,
		.bits = 16,
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 0,
		.spi_mode = 0,
		.modfdis = 0
	};
		
	spi_options_t fake_spi_opts =
	{
		.reg = 3,
		.baudrate = ADC_SPI_BAUD,
		.bits = 8,
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 0,
		.spi_mode = 0,
		.modfdis = 0
	};
	
	// Initialize ADC SPI Bus
	gpio_map_t ADC_SPI_GPIO_MAP ={
	{ADC_MOSI_PIN,ADC_MOSI_FUNCTION},
	{ADC_MISO_PIN,ADC_MISO_FUNCTION},
	{ADC_SCK_PIN,ADC_SCK_FUNCTION},
	{ADC_CS_PIN,ADC_CS_FUNCTION}};
			
	gpio_enable_module(ADC_SPI_GPIO_MAP,
	sizeof(ADC_SPI_GPIO_MAP) / sizeof(ADC_SPI_GPIO_MAP[0]));
		
	sysclk_enable_peripheral_clock(ADC_SPI);
	spi_selectionMode(ADC_SPI,0,0,0);
	spi_initMaster(ADC_SPI,&adc_spi_opts);
	spi_enable(ADC_SPI);
	spi_setupChipReg(ADC_SPI,&adc_spi_opts,sysclk_get_pba_hz());
	spi_setupChipReg(ADC_SPI,&fake_spi_opts,sysclk_get_pba_hz());
	
	spi_options_t sd_mmc_spiOpts =
	{
		.reg = 0,
		.baudrate = SD_MMC_SPI_MASTER_SPEED,
		.bits = SD_MMC_SPI_BITS,
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 1,
		.spi_mode = 0,
		.modfdis = 1
	};
	
	sysclk_enable_peripheral_clock(SD_MMC_SPI);
	
	gpio_map_t SD_MMC_SPI_GPIO_MAP ={
	{SD_MMC_MOSI_PIN,SD_MMC_MOSI_FUNCTION},
	{SD_MMC_MISO_PIN,SD_MMC_MISO_FUNCTION},
	{SD_MMC_SCK_PIN,SD_MMC_SCK_FUNCTION},
	{SD_MMC_CS_PIN,SD_MMC_CS_FUNCTION}};
		
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
	
	spi_initMaster(SD_MMC_SPI,&sd_mmc_spiOpts);
	spi_enable(SD_MMC_SPI);
	sd_mmc_spi_init(sd_mmc_spiOpts,sysclk_get_pba_hz());


	// Initialize the timer module
	volatile avr32_tc_t *tc = EXAMPLE_TC;
	tc_init(tc);
	
	// Timer

	// Initialize interrupt vectors.
	INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, AVR32_INTC_INT0);
	// Enable the interrupts
	
	/************************************************************************/
	/*                        TWI Initialization                            */
	/************************************************************************/
	
	gpio_map_t RTC_TWI_GPIO_MAP ={
		{RTC_TWI_SCL_PIN,RTC_TWI_SCL_FUNCTION},
		{RTC_TWI_SDA_PIN,RTC_TWI_SDA_FUNCTION}};
			
	gpio_enable_module(RTC_TWI_GPIO_MAP,
	sizeof(RTC_TWI_GPIO_MAP) / sizeof(RTC_TWI_GPIO_MAP[0]));	
	
	sysclk_enable_peripheral_clock(RTC_TWI);
	
	// Clear System Structure;
	memset((uint8_t*)(&sys),0,sizeof(sys));
	
	
}
