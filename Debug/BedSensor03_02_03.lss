
BedSensor03_02_03.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000077bc  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009800  80009800  00009c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000bb8  80009a00  80009a00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000050c  00000004  8000a5b8  0000ac04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00006b98  00000510  8000aac4  0000b110  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001028  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00002453  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a96c  00000000  00000000  0000e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006999  00000000  00000000  00038f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016215  00000000  00000000  0003f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002ce4  00000000  00000000  00055ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000058ee  00000000  00000000  000587bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000c100  00000000  00000000  0005e0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 00d1b0e5  00000000  00000000  0006a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 18 .debug_ranges 00001548  00000000  00000000  00d8528f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f1 38 	sub	pc,pc,-3784

Disassembly of section .text:

80002004 <wdt_get_us_timeout_period>:
	AVR32_WDT.ctrl = ctrl | (AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET);
	AVR32_WDT.ctrl = ctrl | ((uint32_t) (~AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET) & AVR32_WDT_CTRL_KEY_MASK);
}

int64_t wdt_get_us_timeout_period(wdt_opt_t *opt)
{
80002004:	d4 21       	pushm	r4-r7,lr
	// Read CTRL.PSEL and translate it into us.
	return (AVR32_WDT.ctrl & AVR32_WDT_CTRL_EN_MASK) ?
80002006:	fe 78 0d 30 	mov	r8,-62160
8000200a:	70 09       	ld.w	r9,r8[0x0]
8000200c:	ed b9 00 00 	bld	r9,0x0
80002010:	c0 40       	breq	80002018 <wdt_get_us_timeout_period+0x14>
80002012:	3f f8       	mov	r8,-1
80002014:	3f f9       	mov	r9,-1
80002016:	c1 78       	rjmp	80002044 <wdt_get_us_timeout_period+0x40>
			((1ULL << (((AVR32_WDT.ctrl & AVR32_WDT_CTRL_PSEL_MASK) >> AVR32_WDT_CTRL_PSEL_OFFSET) + 1)) *
80002018:	70 0c       	ld.w	r12,r8[0x0]
}

int64_t wdt_get_us_timeout_period(wdt_opt_t *opt)
{
	// Read CTRL.PSEL and translate it into us.
	return (AVR32_WDT.ctrl & AVR32_WDT_CTRL_EN_MASK) ?
8000201a:	ee 7a 42 40 	mov	r10,1000000
8000201e:	f9 dc c1 05 	bfextu	r12,r12,0x8,0x5
80002022:	30 0b       	mov	r11,0
80002024:	2f fc       	sub	r12,-1
80002026:	e0 a0 0e 2f 	rcall	80003c84 <__ashldi3>
8000202a:	e0 78 c2 00 	mov	r8,115200
8000202e:	30 09       	mov	r9,0
80002030:	30 07       	mov	r7,0
80002032:	e0 66 e1 00 	mov	r6,57600
80002036:	0c 0a       	add	r10,r6
80002038:	f6 07 00 4b 	adc	r11,r11,r7
8000203c:	e0 a0 0e 39 	rcall	80003cae <__avr32_udiv64>
80002040:	16 99       	mov	r9,r11
80002042:	14 98       	mov	r8,r10
			((1ULL << (((AVR32_WDT.ctrl & AVR32_WDT_CTRL_PSEL_MASK) >> AVR32_WDT_CTRL_PSEL_OFFSET) + 1)) *
			1000000 + AVR32_PM_RCOSC_FREQUENCY / 2) / AVR32_PM_RCOSC_FREQUENCY : -1ULL;
}
80002044:	10 9a       	mov	r10,r8
80002046:	12 9b       	mov	r11,r9
80002048:	d8 22       	popm	r4-r7,pc
8000204a:	d7 03       	nop

8000204c <wdt_disable>:
8000204c:	fe 79 0d 30 	mov	r9,-62160
80002050:	72 08       	ld.w	r8,r9[0x0]
80002052:	a1 c8       	cbr	r8,0x0
 *
 * \note The KEY bit-field of \a ctrl is assumed to be zero.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
	AVR32_WDT.ctrl = ctrl | (AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET);
80002054:	10 9a       	mov	r10,r8
80002056:	ea 1a 55 00 	orh	r10,0x5500
8000205a:	93 0a       	st.w	r9[0x0],r10
	AVR32_WDT.ctrl = ctrl | ((uint32_t) (~AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET) & AVR32_WDT_CTRL_KEY_MASK);
8000205c:	ea 18 aa 00 	orh	r8,0xaa00
80002060:	93 08       	st.w	r9[0x0],r8
}

void wdt_disable(void)
{
	wdt_set_ctrl(AVR32_WDT.ctrl & ~AVR32_WDT_CTRL_EN_MASK);
}
80002062:	5e fc       	retal	r12

80002064 <wdt_enable>:

uint64_t wdt_enable(wdt_opt_t *opt)
{
80002064:	d4 01       	pushm	lr
80002066:	20 1d       	sub	sp,4
	// Set the CTRL.EN bit and translate the us timeout to fit in CTRL.PSEL using
	// the formula Twdt = 2pow(PSEL+1) / fRCosc
	wdt_set_ctrl(AVR32_WDT_CTRL_EN_MASK |
			((32 - clz(((((Min(Max(opt->us_timeout_period, MIN_US_TIMEOUT_PERIOD), MAX_US_TIMEOUT_PERIOD) *
80002068:	e0 6a e3 8d 	mov	r10,58253
8000206c:	ea 1a ae 38 	orh	r10,0xae38
80002070:	f8 e8 00 00 	ld.d	r8,r12[0]
80002074:	30 8b       	mov	r11,8
80002076:	14 38       	cp.w	r8,r10
80002078:	f6 09 13 00 	cpc	r9,r11
8000207c:	e0 88 00 04 	brls	80002084 <wdt_enable+0x20>
80002080:	3f f9       	mov	r9,-1
80002082:	c2 78       	rjmp	800020d0 <wdt_enable+0x6c>
80002084:	59 18       	cp.w	r8,17
80002086:	5c 29       	cpc	r9
80002088:	f9 b8 03 11 	movlo	r8,17
8000208c:	f9 b9 03 00 	movlo	r9,0
80002090:	e0 7e c2 00 	mov	lr,115200
80002094:	f0 0e 06 4a 	mulu.d	r10,r8,lr
80002098:	e6 78 a1 20 	mov	r8,500000
8000209c:	fc 09 03 4b 	mac	r11,lr,r9
800020a0:	30 09       	mov	r9,0
800020a2:	50 0c       	stdsp	sp[0x0],r12
800020a4:	10 0a       	add	r10,r8
800020a6:	f6 09 00 4b 	adc	r11,r11,r9
800020aa:	ee 78 42 40 	mov	r8,1000000
800020ae:	30 09       	mov	r9,0
800020b0:	e0 a0 0d ff 	rcall	80003cae <__avr32_udiv64>
800020b4:	14 0a       	add	r10,r10
800020b6:	f6 0b 00 4b 	adc	r11,r11,r11
800020ba:	3f f8       	mov	r8,-1
800020bc:	3f f9       	mov	r9,-1
800020be:	40 0c       	lddsp	r12,sp[0x0]
800020c0:	f4 08 00 08 	add	r8,r10,r8
800020c4:	f6 09 00 49 	adc	r9,r11,r9
800020c8:	f0 0a 16 01 	lsr	r10,r8,0x1
800020cc:	f5 e9 11 f9 	or	r9,r10,r9<<0x1f
 *
 * \note The KEY bit-field of \a ctrl is assumed to be zero.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
	AVR32_WDT.ctrl = ctrl | (AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET);
800020d0:	fe 78 0d 30 	mov	r8,-62160
uint64_t wdt_enable(wdt_opt_t *opt)
{
	// Set the CTRL.EN bit and translate the us timeout to fit in CTRL.PSEL using
	// the formula Twdt = 2pow(PSEL+1) / fRCosc
	wdt_set_ctrl(AVR32_WDT_CTRL_EN_MASK |
			((32 - clz(((((Min(Max(opt->us_timeout_period, MIN_US_TIMEOUT_PERIOD), MAX_US_TIMEOUT_PERIOD) *
800020d4:	f2 09 12 00 	clz	r9,r9

uint64_t wdt_enable(wdt_opt_t *opt)
{
	// Set the CTRL.EN bit and translate the us timeout to fit in CTRL.PSEL using
	// the formula Twdt = 2pow(PSEL+1) / fRCosc
	wdt_set_ctrl(AVR32_WDT_CTRL_EN_MASK |
800020d8:	f2 09 11 1f 	rsub	r9,r9,31
800020dc:	a9 69       	lsl	r9,0x8
 *
 * \note The KEY bit-field of \a ctrl is assumed to be zero.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
	AVR32_WDT.ctrl = ctrl | (AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET);
800020de:	12 9a       	mov	r10,r9
	AVR32_WDT.ctrl = ctrl | ((uint32_t) (~AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET) & AVR32_WDT_CTRL_KEY_MASK);
800020e0:	ea 19 aa 00 	orh	r9,0xaa00
800020e4:	e8 19 00 01 	orl	r9,0x1
 *
 * \note The KEY bit-field of \a ctrl is assumed to be zero.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
	AVR32_WDT.ctrl = ctrl | (AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET);
800020e8:	ea 1a 55 00 	orh	r10,0x5500
800020ec:	e8 1a 00 01 	orl	r10,0x1
800020f0:	91 0a       	st.w	r8[0x0],r10
	AVR32_WDT.ctrl = ctrl | ((uint32_t) (~AVR32_WDT_KEY_VALUE << AVR32_WDT_CTRL_KEY_OFFSET) & AVR32_WDT_CTRL_KEY_MASK);
800020f2:	91 09       	st.w	r8[0x0],r9
	// the formula Twdt = 2pow(PSEL+1) / fRCosc
	wdt_set_ctrl(AVR32_WDT_CTRL_EN_MASK |
			((32 - clz(((((Min(Max(opt->us_timeout_period, MIN_US_TIMEOUT_PERIOD), MAX_US_TIMEOUT_PERIOD) *
			AVR32_PM_RCOSC_FREQUENCY + 500000) / 1000000) << 1) - 1) >> 1) - 1) << AVR32_WDT_CTRL_PSEL_OFFSET));
	// Return the actual wdt period in us.
	return wdt_get_us_timeout_period(opt);
800020f4:	c8 8f       	rcall	80002004 <wdt_get_us_timeout_period>
800020f6:	2f fd       	sub	sp,-4
}
800020f8:	d8 02       	popm	pc
800020fa:	d7 03       	nop

800020fc <InitButton>:
		}
	}
}

uint8_t InitButton(uint8_t idx,uint8_t pin)
{
800020fc:	d4 21       	pushm	r4-r7,lr
	if(idx>=NUM_BTNS)
800020fe:	30 16       	mov	r6,1
		}
	}
}

uint8_t InitButton(uint8_t idx,uint8_t pin)
{
80002100:	18 97       	mov	r7,r12
80002102:	16 95       	mov	r5,r11
	if(idx>=NUM_BTNS)
80002104:	ec 0c 18 00 	cp.b	r12,r6
80002108:	e0 88 00 03 	brls	8000210e <InitButton+0x12>
8000210c:	d8 2a       	popm	r4-r7,pc,r12=0
	{
		return 0;
	}
	
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
8000210e:	0a 9c       	mov	r12,r5
80002110:	30 4b       	mov	r11,4
80002112:	e0 a0 03 45 	rcall	8000279c <gpio_configure_pin>
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
	btn[idx].pshd = 0;
80002116:	30 09       	mov	r9,0
	}
	
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
80002118:	48 b8       	lddpc	r8,80002144 <InitButton+0x48>
	btn[idx].pshd = 0;
	btn[idx].rlsd = 0;
	btn[idx].state = BTN_CLEARED;
	btn[idx].time = 0;
8000211a:	ee 0b 15 01 	lsl	r11,r7,0x1
	}
	
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
8000211e:	ee 0a 15 04 	lsl	r10,r7,0x4
	btn[idx].pshd = 0;
	btn[idx].rlsd = 0;
	btn[idx].state = BTN_CLEARED;
	btn[idx].time = 0;
80002122:	2f fb       	sub	r11,-1
	}
	
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
80002124:	f0 0a 00 0a 	add	r10,r8,r10
	btn[idx].pshd = 0;
80002128:	a3 67       	lsl	r7,0x2
	}
	
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
8000212a:	95 05       	st.w	r10[0x0],r5
	btn[idx].pshd = 0;
8000212c:	2f f7       	sub	r7,-1
	btn[idx].rlsd = 0;
8000212e:	2f 4a       	sub	r10,-12
	
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
	btn[idx].pshd = 0;
80002130:	f0 07 0b 29 	st.b	r8[r7<<0x2],r9
	btn[idx].rlsd = 0;
	btn[idx].state = BTN_CLEARED;
80002134:	b4 99       	st.b	r10[0x1],r9
	gpio_configure_pin(pin,GPIO_DIR_INPUT|GPIO_PULL_UP);
	
	btn[idx].enable = 0;
	btn[idx].pin = pin;
	btn[idx].pshd = 0;
	btn[idx].rlsd = 0;
80002136:	b4 89       	st.b	r10[0x0],r9
	btn[idx].state = BTN_CLEARED;
	btn[idx].time = 0;
	btn[idx].enable = 1;
80002138:	b4 a6       	st.b	r10[0x2],r6
	btn[idx].enable = 0;
	btn[idx].pin = pin;
	btn[idx].pshd = 0;
	btn[idx].rlsd = 0;
	btn[idx].state = BTN_CLEARED;
	btn[idx].time = 0;
8000213a:	30 09       	mov	r9,0
	btn[idx].enable = 1;
8000213c:	30 1c       	mov	r12,1
	btn[idx].enable = 0;
	btn[idx].pin = pin;
	btn[idx].pshd = 0;
	btn[idx].rlsd = 0;
	btn[idx].state = BTN_CLEARED;
	btn[idx].time = 0;
8000213e:	f0 0b 09 39 	st.w	r8[r11<<0x3],r9
	btn[idx].enable = 1;
	
	return 1;
}
80002142:	d8 22       	popm	r4-r7,pc
80002144:	00 00       	add	r0,r0
80002146:	26 c8       	sub	r8,108

80002148 <HandleButtons>:
80002148:	d4 31       	pushm	r0-r7,lr
8000214a:	20 1d       	sub	sp,4
#include "buttons.h"

BUTTON_t btn[NUM_BTNS];

void HandleButtons(void)
{
8000214c:	4a 57       	lddpc	r7,800021e0 <HandleButtons+0x98>
	int i;
	for(i = 0;i<NUM_BTNS;i++)
	{
		if(btn[i].enable)
8000214e:	30 00       	mov	r0,0
#include "buttons.h"

BUTTON_t btn[NUM_BTNS];

void HandleButtons(void)
{
80002150:	0e 96       	mov	r6,r7
	int i;
	for(i = 0;i<NUM_BTNS;i++)
	{
		if(btn[i].enable)
		{
			switch(btn[i].state)
80002152:	30 14       	mov	r4,1

#include "buttons.h"

BUTTON_t btn[NUM_BTNS];

void HandleButtons(void)
80002154:	ec c8 ff d2 	sub	r8,r6,-46
{
80002158:	2f 27       	sub	r7,-14
8000215a:	ec c5 ff f8 	sub	r5,r6,-8

#include "buttons.h"

BUTTON_t btn[NUM_BTNS];

void HandleButtons(void)
8000215e:	50 08       	stdsp	sp[0x0],r8
					}
					break;
				case BTN_READY:
					if(!gpio_get_pin_value(btn[i].pin))
					{
						btn[i].state = BTN_PUSHED;
80002160:	30 23       	mov	r3,2
					}
					break;
				case BTN_PUSHED:
					if(gpio_get_pin_value(btn[i].pin))
					{
						btn[i].state = BTN_RELEASED;
80002162:	30 32       	mov	r2,3
void HandleButtons(void)
{
	int i;
	for(i = 0;i<NUM_BTNS;i++)
	{
		if(btn[i].enable)
80002164:	0f 88       	ld.ub	r8,r7[0x0]
80002166:	e0 08 18 00 	cp.b	r8,r0
8000216a:	c3 20       	breq	800021ce <HandleButtons+0x86>
		{
			switch(btn[i].state)
8000216c:	ef 31 ff ff 	ld.ub	r1,r7[-1]
80002170:	e8 01 18 00 	cp.b	r1,r4
80002174:	c1 00       	breq	80002194 <HandleButtons+0x4c>
80002176:	c0 83       	brcs	80002186 <HandleButtons+0x3e>
80002178:	e6 01 18 00 	cp.b	r1,r3
8000217c:	c1 30       	breq	800021a2 <HandleButtons+0x5a>
8000217e:	e4 01 18 00 	cp.b	r1,r2
80002182:	c2 61       	brne	800021ce <HandleButtons+0x86>
80002184:	c1 c8       	rjmp	800021bc <HandleButtons+0x74>
			{
				case BTN_CLEARED:
					if(gpio_get_pin_value(btn[i].pin))
80002186:	6c 0c       	ld.w	r12,r6[0x0]
80002188:	e0 a0 03 69 	rcall	8000285a <gpio_get_pin_value>
8000218c:	c2 10       	breq	800021ce <HandleButtons+0x86>
					{
						btn[i].state = BTN_READY;
8000218e:	ef 64 ff ff 	st.b	r7[-1],r4
80002192:	c1 e8       	rjmp	800021ce <HandleButtons+0x86>
					}
					break;
				case BTN_READY:
					if(!gpio_get_pin_value(btn[i].pin))
80002194:	6c 0c       	ld.w	r12,r6[0x0]
80002196:	e0 a0 03 62 	rcall	8000285a <gpio_get_pin_value>
8000219a:	c1 a1       	brne	800021ce <HandleButtons+0x86>
					{
						btn[i].state = BTN_PUSHED;
						btn[i].pshd = 1;
8000219c:	ef 61 ff f6 	st.b	r7[-10],r1
800021a0:	c1 58       	rjmp	800021ca <HandleButtons+0x82>
					}
					break;
				case BTN_PUSHED:
					if(gpio_get_pin_value(btn[i].pin))
800021a2:	6c 0c       	ld.w	r12,r6[0x0]
800021a4:	e0 a0 03 5b 	rcall	8000285a <gpio_get_pin_value>
800021a8:	c0 60       	breq	800021b4 <HandleButtons+0x6c>
					{
						btn[i].state = BTN_RELEASED;
800021aa:	ef 62 ff ff 	st.b	r7[-1],r2
						btn[i].rlsd = 1;
800021ae:	ef 64 ff fe 	st.b	r7[-2],r4
800021b2:	c0 e8       	rjmp	800021ce <HandleButtons+0x86>
					}
					else
					{
						btn[i].time+=10;
800021b4:	6a 08       	ld.w	r8,r5[0x0]
800021b6:	2f 68       	sub	r8,-10
800021b8:	8b 08       	st.w	r5[0x0],r8
800021ba:	c0 a8       	rjmp	800021ce <HandleButtons+0x86>
					}
					break;
				case BTN_RELEASED:
					if(!gpio_get_pin_value(btn[i].pin))
800021bc:	6c 0c       	ld.w	r12,r6[0x0]
800021be:	e0 a0 03 4e 	rcall	8000285a <gpio_get_pin_value>
800021c2:	c0 61       	brne	800021ce <HandleButtons+0x86>
					{
						btn[i].rlsd = 0;
						btn[i].time = 0;
800021c4:	8b 0c       	st.w	r5[0x0],r12
					}
					break;
				case BTN_RELEASED:
					if(!gpio_get_pin_value(btn[i].pin))
					{
						btn[i].rlsd = 0;
800021c6:	ef 6c ff fe 	st.b	r7[-2],r12
						btn[i].time = 0;
						btn[i].state = BTN_PUSHED;
800021ca:	ef 63 ff ff 	st.b	r7[-1],r3
800021ce:	2f 07       	sub	r7,-16
800021d0:	2f 06       	sub	r6,-16
800021d2:	2f 05       	sub	r5,-16
BUTTON_t btn[NUM_BTNS];

void HandleButtons(void)
{
	int i;
	for(i = 0;i<NUM_BTNS;i++)
800021d4:	40 08       	lddsp	r8,sp[0x0]
800021d6:	10 37       	cp.w	r7,r8
800021d8:	cc 61       	brne	80002164 <HandleButtons+0x1c>
					}
					break;
			}
		}
	}
}
800021da:	2f fd       	sub	sp,-4
800021dc:	d8 32       	popm	r0-r7,pc
800021de:	d7 03       	nop
800021e0:	00 00       	add	r0,r0
800021e2:	26 c8       	sub	r8,108

800021e4 <ChangeBlink>:
	t_cpu_time blink_tmr;
}led[NUM_LEDS];

void ChangeBlink(uint8_t idx,uint16_t per)
{
	led[idx].blink_period = per;
800021e4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800021e8:	48 38       	lddpc	r8,800021f4 <ChangeBlink+0x10>
800021ea:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800021ee:	2e cc       	sub	r12,-20
800021f0:	b8 1b       	st.h	r12[0x2],r11
}
800021f2:	5e fc       	retal	r12
800021f4:	00 00       	add	r0,r0
800021f6:	26 e8       	sub	r8,110

800021f8 <HandleLeds>:
		}		
	}	
}

void HandleLeds(void)
{
800021f8:	d4 31       	pushm	r0-r7,lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800021fa:	30 07       	mov	r7,0
	uint8_t i;
	
	for(i = 0;i < NUM_LEDS;i++)
	{
		
		if(led[i].tmr_mode == LED_TIMED)
800021fc:	4c f6       	lddpc	r6,80002338 <HandleLeds+0x140>
800021fe:	30 15       	mov	r5,1
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002200:	30 23       	mov	r3,2
		{
			if(cpu_is_timeout(&(led[i].on_tmr)))
			{
				led[i].blink_mode = LED_OFF;
80002202:	0e 92       	mov	r2,r7
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002204:	0e 90       	mov	r0,r7
80002206:	0e 94       	mov	r4,r7
	uint8_t i;
	
	for(i = 0;i < NUM_LEDS;i++)
	{
		
		if(led[i].tmr_mode == LED_TIMED)
80002208:	e8 04 00 3a 	add	r10,r4,r4<<0x3
8000220c:	f4 c8 ff ff 	sub	r8,r10,-1
80002210:	ec 08 07 2c 	ld.ub	r12,r6[r8<<0x2]
80002214:	ea 0c 18 00 	cp.b	r12,r5
80002218:	c2 e1       	brne	80002274 <HandleLeds+0x7c>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000221a:	e1 b8 00 42 	mfsr	r8,0x108

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000221e:	ec 0a 00 2a 	add	r10,r6,r10<<0x2
80002222:	f4 cb ff f0 	sub	r11,r10,-16
80002226:	17 89       	ld.ub	r9,r11[0x0]
80002228:	e6 09 18 00 	cp.b	r9,r3
8000222c:	c2 40       	breq	80002274 <HandleLeds+0x7c>
    return false;

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000222e:	17 89       	ld.ub	r9,r11[0x0]
80002230:	ea 09 18 00 	cp.b	r9,r5
80002234:	c7 70       	breq	80002322 <HandleLeds+0x12a>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002236:	f4 c9 ff f4 	sub	r9,r10,-12
8000223a:	2f 8a       	sub	r10,-8
8000223c:	74 01       	ld.w	r1,r10[0x0]
8000223e:	72 07       	ld.w	r7,r9[0x0]
80002240:	0e 31       	cp.w	r1,r7
80002242:	e0 88 00 0b 	brls	80002258 <HandleLeds+0x60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002246:	74 0a       	ld.w	r10,r10[0x0]
80002248:	14 38       	cp.w	r8,r10
8000224a:	c1 52       	brcc	80002274 <HandleLeds+0x7c>
8000224c:	72 09       	ld.w	r9,r9[0x0]
8000224e:	12 38       	cp.w	r8,r9
80002250:	e0 88 00 12 	brls	80002274 <HandleLeds+0x7c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002254:	b6 8c       	st.b	r11[0x0],r12
80002256:	c6 68       	rjmp	80002322 <HandleLeds+0x12a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002258:	74 0a       	ld.w	r10,r10[0x0]
8000225a:	14 38       	cp.w	r8,r10
8000225c:	c0 53       	brcs	80002266 <HandleLeds+0x6e>
8000225e:	72 09       	ld.w	r9,r9[0x0]
80002260:	12 38       	cp.w	r8,r9
80002262:	e0 88 00 09 	brls	80002274 <HandleLeds+0x7c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002266:	e8 04 00 38 	add	r8,r4,r4<<0x3
8000226a:	ec 08 00 28 	add	r8,r6,r8<<0x2
8000226e:	2f 08       	sub	r8,-16
80002270:	b0 85       	st.b	r8[0x0],r5
80002272:	c5 88       	rjmp	80002322 <HandleLeds+0x12a>
				led[i].tmr_mode = LED_STAY_ON;
			}
		}
		
		
		if(led[i].tmr_mode == LED_PULSE)
80002274:	e8 04 00 38 	add	r8,r4,r4<<0x3
80002278:	f0 c9 ff ff 	sub	r9,r8,-1
8000227c:	a3 68       	lsl	r8,0x2
8000227e:	ec 09 07 2a 	ld.ub	r10,r6[r9<<0x2]
80002282:	e6 0a 18 00 	cp.b	r10,r3
80002286:	c0 81       	brne	80002296 <HandleLeds+0x9e>
		{
			led[i].blink_mode = LED_OFF;
80002288:	ec 08 00 08 	add	r8,r6,r8
8000228c:	2e c8       	sub	r8,-20
8000228e:	b0 82       	st.b	r8[0x0],r2
			led[i].tmr_mode = LED_STAY_ON;
80002290:	ec 09 0b 22 	st.b	r6[r9<<0x2],r2
			continue;
80002294:	c4 28       	rjmp	80002318 <HandleLeds+0x120>
		}
		
		if(led[i].blink_mode == LED_BLINK)
80002296:	ec 08 00 08 	add	r8,r6,r8
8000229a:	f0 c9 ff ec 	sub	r9,r8,-20
8000229e:	13 8a       	ld.ub	r10,r9[0x0]
800022a0:	e6 0a 18 00 	cp.b	r10,r3
800022a4:	c2 c1       	brne	800022fc <HandleLeds+0x104>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022a6:	e1 b9 00 42 	mfsr	r9,0x108

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022aa:	f0 cb ff e0 	sub	r11,r8,-32
800022ae:	17 8a       	ld.ub	r10,r11[0x0]
800022b0:	e6 0a 18 00 	cp.b	r10,r3
800022b4:	c3 20       	breq	80002318 <HandleLeds+0x120>
    return false;

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022b6:	17 8a       	ld.ub	r10,r11[0x0]
800022b8:	ea 0a 18 00 	cp.b	r10,r5
800022bc:	c4 00       	breq	8000233c <HandleLeds+0x144>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022be:	f0 ca ff e4 	sub	r10,r8,-28
800022c2:	2e 88       	sub	r8,-24
800022c4:	70 07       	ld.w	r7,r8[0x0]
800022c6:	74 0c       	ld.w	r12,r10[0x0]
800022c8:	18 37       	cp.w	r7,r12
800022ca:	e0 88 00 0b 	brls	800022e0 <HandleLeds+0xe8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022ce:	70 08       	ld.w	r8,r8[0x0]
800022d0:	10 39       	cp.w	r9,r8
800022d2:	c2 32       	brcc	80002318 <HandleLeds+0x120>
800022d4:	74 08       	ld.w	r8,r10[0x0]
800022d6:	10 39       	cp.w	r9,r8
800022d8:	e0 88 00 20 	brls	80002318 <HandleLeds+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800022dc:	b6 85       	st.b	r11[0x0],r5
800022de:	c2 f8       	rjmp	8000233c <HandleLeds+0x144>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022e0:	70 08       	ld.w	r8,r8[0x0]
800022e2:	10 39       	cp.w	r9,r8
800022e4:	c0 53       	brcs	800022ee <HandleLeds+0xf6>
800022e6:	74 08       	ld.w	r8,r10[0x0]
800022e8:	10 39       	cp.w	r9,r8
800022ea:	e0 88 00 17 	brls	80002318 <HandleLeds+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800022ee:	e8 04 00 38 	add	r8,r4,r4<<0x3
800022f2:	ec 08 00 28 	add	r8,r6,r8<<0x2
800022f6:	2e 08       	sub	r8,-32
800022f8:	b0 85       	st.b	r8[0x0],r5
800022fa:	c2 18       	rjmp	8000233c <HandleLeds+0x144>
				cpu_set_timeout(cpu_ms_2_cy(led[i].blink_period,F_CPU),&(led[i].blink_tmr));
			}
			continue;
		}
		
		if(led[i].blink_mode == LED_ON)
800022fc:	13 8a       	ld.ub	r10,r9[0x0]
800022fe:	ea 0a 18 00 	cp.b	r10,r5
80002302:	c0 51       	brne	8000230c <HandleLeds+0x114>
		{
			gpio_set_pin_high(led[i].pin);
80002304:	70 0c       	ld.w	r12,r8[0x0]
80002306:	e0 a0 02 b5 	rcall	80002870 <gpio_set_pin_high>
			continue;
8000230a:	c0 78       	rjmp	80002318 <HandleLeds+0x120>
		}
		
		if(led[i].blink_mode == LED_OFF)
8000230c:	13 89       	ld.ub	r9,r9[0x0]
8000230e:	58 09       	cp.w	r9,0
80002310:	c0 41       	brne	80002318 <HandleLeds+0x120>
		{
			gpio_set_pin_low(led[i].pin);
80002312:	70 0c       	ld.w	r12,r8[0x0]
80002314:	e0 a0 02 b8 	rcall	80002884 <gpio_set_pin_low>
80002318:	2f f4       	sub	r4,-1

void HandleLeds(void)
{
	uint8_t i;
	
	for(i = 0;i < NUM_LEDS;i++)
8000231a:	58 34       	cp.w	r4,3
8000231c:	fe 91 ff 76 	brne	80002208 <HandleLeds+0x10>
80002320:	d8 32       	popm	r0-r7,pc
		
		if(led[i].tmr_mode == LED_TIMED)
		{
			if(cpu_is_timeout(&(led[i].on_tmr)))
			{
				led[i].blink_mode = LED_OFF;
80002322:	e8 04 00 38 	add	r8,r4,r4<<0x3
80002326:	ec 08 00 29 	add	r9,r6,r8<<0x2
8000232a:	2e c9       	sub	r9,-20
8000232c:	b2 82       	st.b	r9[0x0],r2
				led[i].tmr_mode = LED_STAY_ON;
8000232e:	2f f8       	sub	r8,-1
80002330:	ec 08 0b 22 	st.b	r6[r8<<0x2],r2
80002334:	ca 0b       	rjmp	80002274 <HandleLeds+0x7c>
80002336:	d7 03       	nop
80002338:	00 00       	add	r0,r0
8000233a:	26 e8       	sub	r8,110
8000233c:	e8 04 00 31 	add	r1,r4,r4<<0x3
80002340:	ec 01 00 21 	add	r1,r6,r1<<0x2
		
		if(led[i].blink_mode == LED_BLINK)
		{
			if(cpu_is_timeout(&(led[i].blink_tmr)))
			{
				gpio_tgl_gpio_pin(led[i].pin);
80002344:	62 0c       	ld.w	r12,r1[0x0]
80002346:	e0 a0 02 a9 	rcall	80002898 <gpio_tgl_gpio_pin>
8000234a:	e2 c8 ff ec 	sub	r8,r1,-20
8000234e:	90 1b       	ld.sh	r11,r8[0x2]
80002350:	e1 bc 00 42 	mfsr	r12,0x108
				
				cpu_set_timeout(cpu_ms_2_cy(led[i].blink_period,F_CPU),&(led[i].blink_tmr));
80002354:	e0 69 6c 00 	mov	r9,27648
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002358:	ea 19 02 dc 	orh	r9,0x2dc
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000235c:	e0 68 03 e7 	mov	r8,999
80002360:	5c 7b       	castu.h	r11
80002362:	f2 0b 06 4a 	mulu.d	r10,r9,r11
80002366:	30 09       	mov	r9,0
80002368:	10 0a       	add	r10,r8
8000236a:	f6 09 00 4b 	adc	r11,r11,r9
8000236e:	e2 c8 ff e8 	sub	r8,r1,-24
80002372:	83 6c       	st.w	r1[0x18],r12
80002374:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002376:	70 07       	ld.w	r7,r8[0x0]
80002378:	e0 68 03 e8 	mov	r8,1000
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000237c:	e0 a0 0c 99 	rcall	80003cae <__avr32_udiv64>
80002380:	ee 0a 00 0a 	add	r10,r7,r10
80002384:	83 7a       	st.w	r1[0x1c],r10
80002386:	2e 01       	sub	r1,-32
80002388:	a2 80       	st.b	r1[0x0],r0
8000238a:	cc 7b       	rjmp	80002318 <HandleLeds+0x120>

8000238c <LedCtrl>:
8000238c:	d4 21       	pushm	r4-r7,lr
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000238e:	10 94       	mov	r4,r8
80002390:	18 97       	mov	r7,r12
80002392:	12 96       	mov	r6,r9
80002394:	30 28       	mov	r8,2
80002396:	f0 0c 18 00 	cp.b	r12,r8
8000239a:	e0 8b 00 7f 	brhi	80002498 <LedCtrl+0x10c>

void LedCtrl(uint8_t idx,uint8_t tmr_mode, uint16_t tmr_msec,uint8_t blink_mode,uint16_t blink_msec)
{
	if(idx < NUM_LEDS)
	{
		if((led[idx].blink_mode != blink_mode) || (led[idx].tmr_mode != tmr_mode) || (led[idx].blink_period != blink_msec))
8000239e:	4c 09       	lddpc	r9,8000249c <LedCtrl+0x110>
800023a0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800023a4:	f2 0c 00 28 	add	r8,r9,r12<<0x2
800023a8:	2e c8       	sub	r8,-20
800023aa:	11 85       	ld.ub	r5,r8[0x0]
800023ac:	ec 05 18 00 	cp.b	r5,r6
800023b0:	c0 b1       	brne	800023c6 <LedCtrl+0x3a>
800023b2:	2f fc       	sub	r12,-1
800023b4:	f2 0c 07 29 	ld.ub	r9,r9[r12<<0x2]
800023b8:	f6 09 18 00 	cp.b	r9,r11
800023bc:	c0 51       	brne	800023c6 <LedCtrl+0x3a>
800023be:	90 18       	ld.sh	r8,r8[0x2]
800023c0:	e8 08 19 00 	cp.h	r8,r4
800023c4:	c6 a0       	breq	80002498 <LedCtrl+0x10c>
		{
		
			cpu_irq_disable();
800023c6:	d3 03       	ssrf	0x10
			
			led[idx].blink_mode = blink_mode;
800023c8:	4b 59       	lddpc	r9,8000249c <LedCtrl+0x110>
800023ca:	ee 07 00 3c 	add	r12,r7,r7<<0x3
800023ce:	f2 0c 00 25 	add	r5,r9,r12<<0x2
800023d2:	ea c8 ff ec 	sub	r8,r5,-20
800023d6:	b0 86       	st.b	r8[0x0],r6
			led[idx].tmr_mode = tmr_mode;
800023d8:	2f fc       	sub	r12,-1
800023da:	f2 0c 0b 2b 	st.b	r9[r12<<0x2],r11
			led[idx].blink_period = blink_msec;
800023de:	b0 14       	st.h	r8[0x2],r4
			
			
			if(tmr_mode == LED_TIMED)
800023e0:	30 18       	mov	r8,1
800023e2:	f0 0b 18 00 	cp.b	r11,r8
800023e6:	c1 f1       	brne	80002424 <LedCtrl+0x98>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800023e8:	e0 68 6c 00 	mov	r8,27648
800023ec:	ea 18 02 dc 	orh	r8,0x2dc
800023f0:	30 09       	mov	r9,0
800023f2:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
800023f6:	f6 08 06 4a 	mulu.d	r10,r11,r8
800023fa:	e0 68 03 e7 	mov	r8,999
800023fe:	10 0a       	add	r10,r8
80002400:	f6 09 00 4b 	adc	r11,r11,r9
80002404:	30 09       	mov	r9,0
80002406:	e0 68 03 e8 	mov	r8,1000
8000240a:	e0 a0 0c 52 	rcall	80003cae <__avr32_udiv64>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000240e:	e1 b9 00 42 	mfsr	r9,0x108
80002412:	ea c8 ff f8 	sub	r8,r5,-8
80002416:	8b 29       	st.w	r5[0x8],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002418:	70 08       	ld.w	r8,r8[0x0]
8000241a:	10 0a       	add	r10,r8
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000241c:	30 08       	mov	r8,0
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000241e:	8b 3a       	st.w	r5[0xc],r10
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002420:	2f 05       	sub	r5,-16
80002422:	aa 88       	st.b	r5[0x0],r8
			{
				cpu_set_timeout(cpu_ms_2_cy(tmr_msec,F_CPU),&(led[idx].on_tmr));
			}
			
			if(blink_mode == LED_BLINK)
80002424:	30 28       	mov	r8,2
80002426:	f0 06 18 00 	cp.b	r6,r8
8000242a:	c2 51       	brne	80002474 <LedCtrl+0xe8>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000242c:	e0 68 6c 00 	mov	r8,27648
80002430:	ea 18 02 dc 	orh	r8,0x2dc
80002434:	08 9b       	mov	r11,r4
80002436:	30 09       	mov	r9,0
80002438:	5c 7b       	castu.h	r11
8000243a:	f6 08 06 4a 	mulu.d	r10,r11,r8
8000243e:	e0 68 03 e7 	mov	r8,999
80002442:	10 0a       	add	r10,r8
80002444:	f6 09 00 4b 	adc	r11,r11,r9
80002448:	e0 68 03 e8 	mov	r8,1000
8000244c:	30 09       	mov	r9,0
8000244e:	e0 a0 0c 30 	rcall	80003cae <__avr32_udiv64>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002452:	e1 bb 00 42 	mfsr	r11,0x108
80002456:	ee 07 00 39 	add	r9,r7,r7<<0x3
8000245a:	49 18       	lddpc	r8,8000249c <LedCtrl+0x110>
8000245c:	f0 09 00 28 	add	r8,r8,r9<<0x2
80002460:	f0 c9 ff e8 	sub	r9,r8,-24
80002464:	91 6b       	st.w	r8[0x18],r11
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002466:	72 09       	ld.w	r9,r9[0x0]
80002468:	12 0a       	add	r10,r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000246a:	30 09       	mov	r9,0
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000246c:	91 7a       	st.w	r8[0x1c],r10
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000246e:	2e 08       	sub	r8,-32
80002470:	b0 89       	st.b	r8[0x0],r9
80002472:	c0 38       	rjmp	80002478 <LedCtrl+0xec>
			{
				cpu_set_timeout(cpu_ms_2_cy(blink_msec,F_CPU),&(led[idx].blink_tmr));
			}
			
			if(blink_mode != LED_OFF)	gpio_set_pin_high(led[idx].pin);
80002474:	58 06       	cp.w	r6,0
80002476:	c0 90       	breq	80002488 <LedCtrl+0xfc>
80002478:	48 98       	lddpc	r8,8000249c <LedCtrl+0x110>
8000247a:	ee 07 00 37 	add	r7,r7,r7<<0x3
8000247e:	f0 07 00 27 	add	r7,r8,r7<<0x2
80002482:	6e 0c       	ld.w	r12,r7[0x0]
80002484:	cf 6d       	rcall	80002870 <gpio_set_pin_high>
80002486:	c0 88       	rjmp	80002496 <LedCtrl+0x10a>
80002488:	48 58       	lddpc	r8,8000249c <LedCtrl+0x110>
			else
			{
				gpio_set_pin_low(led[idx].pin);
8000248a:	ee 07 00 37 	add	r7,r7,r7<<0x3
8000248e:	f0 07 00 27 	add	r7,r8,r7<<0x2
80002492:	6e 0c       	ld.w	r12,r7[0x0]
80002494:	cf 8d       	rcall	80002884 <gpio_set_pin_low>
80002496:	d5 03       	csrf	0x10
80002498:	d8 22       	popm	r4-r7,pc
			}
			cpu_irq_enable();
8000249a:	d7 03       	nop
8000249c:	00 00       	add	r0,r0
8000249e:	26 e8       	sub	r8,110

800024a0 <InitLed>:
800024a0:	d4 01       	pushm	lr
800024a2:	30 28       	mov	r8,2
800024a4:	f0 0c 18 00 	cp.b	r12,r8
800024a8:	e0 8b 00 12 	brhi	800024cc <InitLed+0x2c>
800024ac:	f8 0c 00 3c 	add	r12,r12,r12<<0x3

void InitLed(uint8_t idx,uint32_t pin)
{
	if(idx < NUM_LEDS)
	{
		led[idx].pin = pin;
800024b0:	48 88       	lddpc	r8,800024d0 <InitLed+0x30>
800024b2:	f0 0c 00 29 	add	r9,r8,r12<<0x2
800024b6:	93 0b       	st.w	r9[0x0],r11
		led[idx].blink_mode = LED_OFF;
800024b8:	f2 ca ff ec 	sub	r10,r9,-20
		led[idx].tmr_mode = 0;
800024bc:	2f fc       	sub	r12,-1
void InitLed(uint8_t idx,uint32_t pin)
{
	if(idx < NUM_LEDS)
	{
		led[idx].pin = pin;
		led[idx].blink_mode = LED_OFF;
800024be:	30 09       	mov	r9,0
800024c0:	b4 89       	st.b	r10[0x0],r9
		led[idx].tmr_mode = 0;
800024c2:	f0 0c 0b 29 	st.b	r8[r12<<0x2],r9
		gpio_configure_pin(pin,GPIO_DIR_OUTPUT|GPIO_INIT_LOW);
800024c6:	16 9c       	mov	r12,r11
800024c8:	30 1b       	mov	r11,1
800024ca:	c6 9d       	rcall	8000279c <gpio_configure_pin>
800024cc:	d8 02       	popm	pc
800024ce:	d7 03       	nop
800024d0:	00 00       	add	r0,r0
800024d2:	26 e8       	sub	r8,110

800024d4 <wifi_empty>:
	return 0;
}

uint8_t wifi_empty(void)
{
	if(wifi.head == wifi.tail) 
800024d4:	48 58       	lddpc	r8,800024e8 <wifi_empty+0x14>
800024d6:	f1 39 04 00 	ld.ub	r9,r8[1024]
800024da:	f1 38 04 01 	ld.ub	r8,r8[1025]
800024de:	f0 09 18 00 	cp.b	r9,r8
	else
	{
		return 0;
	}
	
}
800024e2:	5f 0c       	sreq	r12
800024e4:	5e fc       	retal	r12
800024e6:	d7 03       	nop
800024e8:	00 00       	add	r0,r0
800024ea:	2a f8       	sub	r8,-81

800024ec <wifi_read>:

}

uint8_t wifi_read(int *r)
{
	if(wifi.head==wifi.tail)
800024ec:	48 c8       	lddpc	r8,8000251c <wifi_read+0x30>
800024ee:	f1 3a 04 00 	ld.ub	r10,r8[1024]
800024f2:	f1 39 04 01 	ld.ub	r9,r8[1025]
800024f6:	f2 0a 18 00 	cp.b	r10,r9
800024fa:	c0 21       	brne	800024fe <wifi_read+0x12>
800024fc:	5e fd       	retal	0
	{
		return 0;
	}
	else
	{
		cpu_irq_disable();
800024fe:	d3 03       	ssrf	0x10
		//LedPulse(2);
		wifi.tail++;
80002500:	f1 39 04 01 	ld.ub	r9,r8[1025]
80002504:	2f f9       	sub	r9,-1
80002506:	f1 69 04 01 	st.b	r8[1025],r9
		*r = wifi.bfr[wifi.head-1];
8000250a:	f1 39 04 00 	ld.ub	r9,r8[1024]
8000250e:	20 19       	sub	r9,1
80002510:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002514:	99 08       	st.w	r12[0x0],r8
		cpu_irq_enable();
80002516:	d5 03       	csrf	0x10
80002518:	5e ff       	retal	1
8000251a:	d7 03       	nop
8000251c:	00 00       	add	r0,r0
8000251e:	2a f8       	sub	r8,-81

80002520 <xb_usart_init>:
	}
	
}

void xb_usart_init(void)
{
80002520:	d4 21       	pushm	r4-r7,lr
80002522:	20 4d       	sub	sp,16
	int c;
	//gpio_configure_pin(XB_RTS,GPIO_DIR_OUTPUT|GPIO_INIT_HIGH);
	gpio_configure_pin(XB_CTS,GPIO_DIR_INPUT|GPIO_PULL_UP);
80002524:	30 4b       	mov	r11,4
80002526:	16 9c       	mov	r12,r11
80002528:	c3 ad       	rcall	8000279c <gpio_configure_pin>
8000252a:	30 0b       	mov	r11,0
	gpio_configure_pin(AVR32_PIN_PA05,GPIO_DIR_INPUT);
8000252c:	30 5c       	mov	r12,5
8000252e:	c3 7d       	rcall	8000279c <gpio_configure_pin>
80002530:	4c e8       	lddpc	r8,80002668 <xb_usart_init+0x148>
80002532:	30 07       	mov	r7,0
		.baudrate     = XB_BAUDRATE,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
80002534:	fb 67 00 0c 	st.b	sp[12],r7
	
	gpio_map_t XB_USART_GPIO_MAP =
	{
	{XB_USART_RX_PIN, XB_USART_RX_FUNCTION},
	{XB_USART_TX_PIN, XB_USART_TX_FUNCTION},
	};
80002538:	fb 67 00 0d 	st.b	sp[13],r7
8000253c:	fb 67 00 0f 	st.b	sp[15],r7
80002540:	70 29       	ld.w	r9,r8[0x8]
80002542:	50 29       	stdsp	sp[0x8],r9
		.baudrate     = XB_BAUDRATE,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
80002544:	f0 e8 00 00 	ld.d	r8,r8[0]
80002548:	fa e9 00 00 	st.d	sp[0],r8
8000254c:	30 18       	mov	r8,1
8000254e:	30 2b       	mov	r11,2
	
	gpio_map_t XB_USART_GPIO_MAP =
	{
	{XB_USART_RX_PIN, XB_USART_RX_FUNCTION},
	{XB_USART_TX_PIN, XB_USART_TX_FUNCTION},
	};
80002550:	fb 68 00 0e 	st.b	sp[14],r8
80002554:	fa cc ff f4 	sub	r12,sp,-12
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};

	gpio_enable_module(XB_USART_GPIO_MAP, sizeof(XB_USART_GPIO_MAP) / sizeof(XB_USART_GPIO_MAP[0]));
80002558:	c1 2d       	rcall	8000277c <gpio_enable_module>
8000255a:	30 8b       	mov	r11,8
8000255c:	30 2c       	mov	r12,2
8000255e:	fb 67 00 08 	st.b	sp[8],r7
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002562:	e0 a0 07 a9 	rcall	800034b4 <sysclk_priv_enable_module>
 */
static inline bool usart_serial_init(volatile avr32_usart_t *usart,
		usart_serial_options_t *opt)
{
	// USART options.
	opt->channelmode = CONFIG_USART_SERIAL_MODE;
80002566:	1a 9b       	mov	r11,sp
80002568:	e0 6a 36 00 	mov	r10,13824
	if ((uint32_t)usart == AVR32_USART3_ADDRESS)
	{
		sysclk_enable_pba_module(SYSCLK_USART3);
	}
#endif
	if (usart_init_rs232(usart, opt, sysclk_get_pba_hz())) {
8000256c:	ea 1a 01 6e 	orh	r10,0x16e
80002570:	fe 7c 14 00 	mov	r12,-60416
80002574:	e0 a0 04 4a 	rcall	80002e08 <usart_init_rs232>
80002578:	30 09       	mov	r9,0
8000257a:	4b d8       	lddpc	r8,8000266c <xb_usart_init+0x14c>
8000257c:	f1 59 03 9a 	st.h	r8[922],r9
	usart_serial_init(&XB_USART,&XB_USART_OPTIONS);
	
	// Init RX Buffer
	rx.idx = 0;
80002580:	f1 69 03 9d 	st.b	r8[925],r9
80002584:	f1 69 03 9e 	st.b	r8[926],r9
	rx.head = 0;
80002588:	f1 69 03 9c 	st.b	r8[924],r9
	rx.tail = 0;
8000258c:	1a 96       	mov	r6,sp
	rx.full = 0;
8000258e:	30 09       	mov	r9,0
80002590:	3f fb       	mov	r11,-1
		.baudrate     = XB_BAUDRATE,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
80002592:	f2 0a 10 5c 	mul	r10,r9,92
	rx.head = 0;
	rx.tail = 0;
	rx.full = 0;
	for(c = 0;c<BFR_SIZE;c++)
	{
		rx.frm[c].valid = FRAME_INVALID;
80002596:	f0 0a 00 0a 	add	r10,r8,r10
8000259a:	b4 8b       	st.b	r10[0x0],r11
8000259c:	2f f9       	sub	r9,-1
8000259e:	4b 4a       	lddpc	r10,8000266c <xb_usart_init+0x14c>
800025a0:	58 a9       	cp.w	r9,10
	// Init RX Buffer
	rx.idx = 0;
	rx.head = 0;
	rx.tail = 0;
	rx.full = 0;
	for(c = 0;c<BFR_SIZE;c++)
800025a2:	cf 81       	brne	80002592 <xb_usart_init+0x72>
	{
		rx.frm[c].valid = FRAME_INVALID;
800025a4:	30 07       	mov	r7,0
	// Init RX Buffer
	rx.idx = 0;
	rx.head = 0;
	rx.tail = 0;
	rx.full = 0;
	for(c = 0;c<BFR_SIZE;c++)
800025a6:	f5 67 03 98 	st.b	r10[920],r7
	{
		rx.frm[c].valid = FRAME_INVALID;
	}
	rx.state = WAIT_FOR_DELIM;
800025aa:	f5 67 03 9f 	st.b	r10[927],r7
800025ae:	4b 1e       	lddpc	lr,80002670 <xb_usart_init+0x150>
	rx.over = 0;
800025b0:	30 18       	mov	r8,1
800025b2:	f5 68 03 a0 	st.b	r10[928],r8
	rx.empty = 1;
800025b6:	30 19       	mov	r9,1
800025b8:	30 08       	mov	r8,0
800025ba:	bc 87       	st.b	lr[0x0],r7
	tx_lock = 0;
	
	//Clear out usart
	//usart_read_char(&XB_USART,&c);
	
	LedOn(0);
800025bc:	10 9b       	mov	r11,r8
800025be:	10 9c       	mov	r12,r8
		rx.frm[c].valid = FRAME_INVALID;
	}
	rx.state = WAIT_FOR_DELIM;
	rx.over = 0;
	rx.empty = 1;
	tx_lock = 0;
800025c0:	10 9a       	mov	r10,r8
	
	//Clear out usart
	//usart_read_char(&XB_USART,&c);
	
	LedOn(0);
800025c2:	ce 5e       	rcall	8000238c <LedCtrl>
800025c4:	30 1b       	mov	r11,1
800025c6:	30 5c       	mov	r12,5
800025c8:	ce ac       	rcall	8000279c <gpio_configure_pin>
800025ca:	e1 b7 00 42 	mfsr	r7,0x108
	gpio_configure_pin(AVR32_PIN_PA05,GPIO_DIR_OUTPUT|GPIO_INIT_LOW);
800025ce:	e0 68 03 e8 	mov	r8,1000
800025d2:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025d4:	e0 6a f3 e7 	mov	r10,62439
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025d8:	ea 1a 96 82 	orh	r10,0x9682
800025dc:	30 5b       	mov	r11,5
800025de:	e0 a0 0b 68 	rcall	80003cae <__avr32_udiv64>
800025e2:	ee 0a 00 0a 	add	r10,r7,r10
800025e6:	e1 b8 00 42 	mfsr	r8,0x108
800025ea:	14 37       	cp.w	r7,r10
800025ec:	e0 88 00 05 	brls	800025f6 <xb_usart_init+0xd6>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025f0:	0e 38       	cp.w	r8,r7
800025f2:	cf a2       	brcc	800025e6 <xb_usart_init+0xc6>
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	c0 38       	rjmp	800025fa <xb_usart_init+0xda>
800025f6:	0e 38       	cp.w	r8,r7
800025f8:	c1 33       	brcs	8000261e <xb_usart_init+0xfe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025fa:	14 38       	cp.w	r8,r10
800025fc:	e0 8b 00 11 	brhi	8000261e <xb_usart_init+0xfe>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002600:	cf 3b       	rjmp	800025e6 <xb_usart_init+0xc6>
80002602:	e1 b8 00 42 	mfsr	r8,0x108
80002606:	14 37       	cp.w	r7,r10
80002608:	e0 88 00 05 	brls	80002612 <xb_usart_init+0xf2>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000260c:	0e 38       	cp.w	r8,r7
8000260e:	cf a2       	brcc	80002602 <xb_usart_init+0xe2>
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002610:	c0 38       	rjmp	80002616 <xb_usart_init+0xf6>
80002612:	0e 38       	cp.w	r8,r7
80002614:	c1 73       	brcs	80002642 <xb_usart_init+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002616:	14 38       	cp.w	r8,r10
80002618:	e0 8b 00 15 	brhi	80002642 <xb_usart_init+0x122>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000261c:	cf 3b       	rjmp	80002602 <xb_usart_init+0xe2>
8000261e:	30 0b       	mov	r11,0
80002620:	30 5c       	mov	r12,5
80002622:	cb dc       	rcall	8000279c <gpio_configure_pin>
80002624:	e1 b7 00 42 	mfsr	r7,0x108
	delay_ms(500);
	gpio_configure_pin(AVR32_PIN_PA05,GPIO_DIR_INPUT);
80002628:	e0 68 03 e8 	mov	r8,1000
8000262c:	30 09       	mov	r9,0
8000262e:	e0 6a c3 e7 	mov	r10,50151
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002632:	ea 1a 5a 0b 	orh	r10,0x5a0b
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002636:	31 6b       	mov	r11,22
80002638:	e0 a0 0b 3b 	rcall	80003cae <__avr32_udiv64>
8000263c:	ee 0a 00 0a 	add	r10,r7,r10
80002640:	ce 1b       	rjmp	80002602 <xb_usart_init+0xe2>
80002642:	30 08       	mov	r8,0
80002644:	10 9a       	mov	r10,r8
80002646:	10 9b       	mov	r11,r8
80002648:	10 9c       	mov	r12,r8
8000264a:	10 99       	mov	r9,r8
8000264c:	ca 0e       	rcall	8000238c <LedCtrl>
	delay_ms(2000);
	LedOff(0);
8000264e:	30 1a       	mov	r10,1
80002650:	e0 6b 00 a0 	mov	r11,160
80002654:	fe cc ff e0 	sub	r12,pc,-32
80002658:	c2 ed       	rcall	800028b4 <INTC_register_interrupt>
8000265a:	30 19       	mov	r9,1
	INTC_register_interrupt(&xb_rx_irq, XB_USART_IRQ,AVR32_INTC_INT1);
8000265c:	fe 78 14 00 	mov	r8,-60416
80002660:	91 29       	st.w	r8[0x8],r9
80002662:	2f cd       	sub	sp,-16
80002664:	d8 22       	popm	r4-r7,pc
80002666:	d7 03       	nop

	// Enable USART Rx interrupt.
	XB_USART.ier = AVR32_USART_IER_RXRDY_MASK;
80002668:	80 00       	ld.sh	r0,r0[0x0]
8000266a:	9a 00       	ld.sh	r0,sp[0x0]
8000266c:	00 00       	add	r0,r0
8000266e:	27 54       	sub	r4,117

}
80002670:	00 00       	add	r0,r0
80002672:	05 10       	ld.sh	r0,r2++

80002674 <xb_rx_irq>:
80002674:	d4 01       	pushm	lr
80002676:	fe 7c 14 00 	mov	r12,-60416
8000267a:	e0 a0 03 91 	rcall	80002d9c <usart_getchar>
8000267e:	5b fc       	cp.w	r12,-1
80002680:	c0 b0       	breq	80002696 <xb_rx_irq+0x22>
80002682:	48 78       	lddpc	r8,8000269c <xb_rx_irq+0x28>
80002684:	f1 39 04 00 	ld.ub	r9,r8[1024]
80002688:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
8000268c:	f1 39 04 00 	ld.ub	r9,r8[1024]
80002690:	2f f9       	sub	r9,-1
80002692:	f1 69 04 00 	st.b	r8[1024],r9
80002696:	d4 02       	popm	lr
80002698:	d6 03       	rete
8000269a:	d7 03       	nop
8000269c:	00 00       	add	r0,r0
8000269e:	2a f8       	sub	r8,-81

800026a0 <adc_sample>:
#include "spi_adc.h"
#include <conf_board.h>
#include <asf.h>

uint16_t adc_sample(uint16_t chan)
{
800026a0:	d4 21       	pushm	r4-r7,lr
800026a2:	20 1d       	sub	sp,4
	uint16_t spi_resp;
	uint16_t fake_data = 0,data1 = 0;
800026a4:	30 08       	mov	r8,0
#include "spi_adc.h"
#include <conf_board.h>
#include <asf.h>

uint16_t adc_sample(uint16_t chan)
{
800026a6:	18 97       	mov	r7,r12
	uint16_t spi_resp;
	uint16_t fake_data = 0,data1 = 0;
800026a8:	ba 08       	st.h	sp[0x0],r8
800026aa:	ba 18       	st.h	sp[0x2],r8
	spi_selectChip(ADC_SPI,3);
800026ac:	30 3b       	mov	r11,3
800026ae:	fe 7c 24 00 	mov	r12,-56320
800026b2:	cb 9d       	rcall	80002a24 <spi_selectChip>
800026b4:	0e 9b       	mov	r11,r7
	spi_resp = spi_write(ADC_SPI,chan);
800026b6:	fe 7c 24 00 	mov	r12,-56320
800026ba:	5c 7b       	castu.h	r11
800026bc:	e0 a0 02 43 	rcall	80002b42 <spi_write>
800026c0:	fa cb ff fe 	sub	r11,sp,-2
	spi_resp = spi_read(ADC_SPI,&fake_data);
800026c4:	fe 7c 24 00 	mov	r12,-56320
800026c8:	e0 a0 02 4b 	rcall	80002b5e <spi_read>
800026cc:	30 3b       	mov	r11,3
	spi_unselectChip(ADC_SPI,3);
800026ce:	fe 7c 24 00 	mov	r12,-56320
800026d2:	cd 1d       	rcall	80002a74 <spi_unselectChip>
800026d4:	30 0b       	mov	r11,0
800026d6:	fe 7c 24 00 	mov	r12,-56320
	
	spi_resp = spi_selectChip(ADC_SPI,ADC_CS);
800026da:	ca 5d       	rcall	80002a24 <spi_selectChip>
800026dc:	e0 6b ff ff 	mov	r11,65535
800026e0:	fe 7c 24 00 	mov	r12,-56320
	spi_resp = spi_write(ADC_SPI,0xFFFF);
800026e4:	e0 a0 02 2f 	rcall	80002b42 <spi_write>
800026e8:	1a 9b       	mov	r11,sp
800026ea:	fe 7c 24 00 	mov	r12,-56320
	spi_resp = spi_read(ADC_SPI,&data1);
800026ee:	e0 a0 02 38 	rcall	80002b5e <spi_read>
800026f2:	30 0b       	mov	r11,0
800026f4:	fe 7c 24 00 	mov	r12,-56320
	spi_unselectChip(ADC_SPI,ADC_CS);
800026f8:	cb ed       	rcall	80002a74 <spi_unselectChip>
800026fa:	9a 0c       	ld.sh	r12,sp[0x0]
800026fc:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80002700:	2f fd       	sub	sp,-4
80002702:	d8 22       	popm	r4-r7,pc

80002704 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002704:	e0 68 8a 3f 	mov	r8,35391
80002708:	ea 18 01 f7 	orh	r8,0x1f7
8000270c:	10 3c       	cp.w	r12,r8
8000270e:	e0 88 00 07 	brls	8000271c <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002712:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002716:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002718:	70 09       	ld.w	r9,r8[0x0]
8000271a:	c0 58       	rjmp	80002724 <flashc_set_bus_freq+0x20>
8000271c:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002720:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002722:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002724:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002728:	91 09       	st.w	r8[0x0],r9
8000272a:	5e fc       	retal	r12

8000272c <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000272c:	f8 08 16 05 	lsr	r8,r12,0x5
80002730:	a9 68       	lsl	r8,0x8
80002732:	e0 28 f0 00 	sub	r8,61440

  // Enable the correct function.
  switch (function)
80002736:	58 1b       	cp.w	r11,1
80002738:	c0 d0       	breq	80002752 <gpio_enable_module_pin+0x26>
8000273a:	c0 63       	brcs	80002746 <gpio_enable_module_pin+0x1a>
8000273c:	58 2b       	cp.w	r11,2
8000273e:	c0 f0       	breq	8000275c <gpio_enable_module_pin+0x30>
80002740:	58 3b       	cp.w	r11,3
80002742:	c1 20       	breq	80002766 <gpio_enable_module_pin+0x3a>
80002744:	5e ff       	retal	1
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002746:	30 19       	mov	r9,1
80002748:	f2 0c 09 49 	lsl	r9,r9,r12
8000274c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000274e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002750:	c1 08       	rjmp	80002770 <gpio_enable_module_pin+0x44>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002752:	f6 0c 09 4b 	lsl	r11,r11,r12
80002756:	91 5b       	st.w	r8[0x14],r11
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002758:	91 ab       	st.w	r8[0x28],r11
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
8000275a:	c0 b8       	rjmp	80002770 <gpio_enable_module_pin+0x44>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000275c:	30 19       	mov	r9,1
8000275e:	f2 0c 09 49 	lsl	r9,r9,r12
80002762:	91 69       	st.w	r8[0x18],r9
80002764:	c0 58       	rjmp	8000276e <gpio_enable_module_pin+0x42>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002766:	30 19       	mov	r9,1
80002768:	f2 0c 09 49 	lsl	r9,r9,r12
8000276c:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000276e:	91 99       	st.w	r8[0x24],r9
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002770:	30 19       	mov	r9,1
80002772:	f2 0c 09 4c 	lsl	r12,r9,r12
80002776:	91 2c       	st.w	r8[0x8],r12
80002778:	5e fd       	retal	0
8000277a:	d7 03       	nop

8000277c <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000277c:	d4 21       	pushm	r4-r7,lr
8000277e:	30 07       	mov	r7,0
80002780:	18 96       	mov	r6,r12
80002782:	16 94       	mov	r4,r11
80002784:	0e 95       	mov	r5,r7
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002786:	c0 78       	rjmp	80002794 <gpio_enable_module+0x18>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002788:	0d 9b       	ld.ub	r11,r6[0x1]
8000278a:	0d 8c       	ld.ub	r12,r6[0x0]
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000278c:	2f f7       	sub	r7,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000278e:	2f e6       	sub	r6,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002790:	cc ef       	rcall	8000272c <gpio_enable_module_pin>
80002792:	18 45       	or	r5,r12
80002794:	08 37       	cp.w	r7,r4
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002796:	cf 93       	brcs	80002788 <gpio_enable_module+0xc>
80002798:	0a 9c       	mov	r12,r5
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
8000279a:	d8 22       	popm	r4-r7,pc

8000279c <gpio_configure_pin>:
8000279c:	f8 08 16 05 	lsr	r8,r12,0x5
800027a0:	16 9a       	mov	r10,r11
800027a2:	a9 68       	lsl	r8,0x8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800027a4:	e2 1a 00 04 	andl	r10,0x4,COH

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800027a8:	e0 28 f0 00 	sub	r8,61440
800027ac:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800027b0:	58 0a       	cp.w	r10,0
800027b2:	c0 70       	breq	800027c0 <gpio_configure_pin+0x24>
            gpio_port->puers = 1 << (pin & 0x1F);
800027b4:	30 1a       	mov	r10,1
800027b6:	f4 09 09 49 	lsl	r9,r10,r9
800027ba:	f1 49 00 74 	st.w	r8[116],r9
800027be:	c0 68       	rjmp	800027ca <gpio_configure_pin+0x2e>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
800027c0:	30 1a       	mov	r10,1
800027c2:	f4 09 09 49 	lsl	r9,r10,r9
800027c6:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800027ca:	ed bb 00 07 	bld	r11,0x7
800027ce:	c2 21       	brne	80002812 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
800027d0:	16 99       	mov	r9,r11
800027d2:	e2 19 01 80 	andl	r9,0x180,COH
800027d6:	c0 70       	breq	800027e4 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800027d8:	30 19       	mov	r9,1
800027da:	f2 0c 09 49 	lsl	r9,r9,r12
800027de:	f1 49 00 a8 	st.w	r8[168],r9
800027e2:	c0 a8       	rjmp	800027f6 <gpio_configure_pin+0x5a>
                   gpio_port->imr1c = 1 << (pin & 0x1F);
            }
            else if (flags & GPIO_RISING)
800027e4:	16 99       	mov	r9,r11
800027e6:	e2 19 02 80 	andl	r9,0x280,COH
800027ea:	c0 90       	breq	800027fc <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800027ec:	30 19       	mov	r9,1
800027ee:	f2 0c 09 49 	lsl	r9,r9,r12
800027f2:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800027f6:	f1 49 00 b8 	st.w	r8[184],r9
800027fa:	c0 c8       	rjmp	80002812 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
800027fc:	16 99       	mov	r9,r11
800027fe:	e2 19 03 80 	andl	r9,0x380,COH
80002802:	c0 80       	breq	80002812 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002804:	30 19       	mov	r9,1
80002806:	f2 0c 09 49 	lsl	r9,r9,r12
8000280a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000280e:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002812:	ed bb 00 00 	bld	r11,0x0
80002816:	c1 81       	brne	80002846 <gpio_configure_pin+0xaa>
            if (flags & GPIO_INIT_HIGH)
80002818:	e2 1b 00 02 	andl	r11,0x2,COH
8000281c:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
80002820:	58 0b       	cp.w	r11,0
80002822:	c0 70       	breq	80002830 <gpio_configure_pin+0x94>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80002824:	30 1a       	mov	r10,1
80002826:	f4 09 09 49 	lsl	r9,r10,r9
8000282a:	f1 49 00 54 	st.w	r8[84],r9
8000282e:	c0 68       	rjmp	8000283a <gpio_configure_pin+0x9e>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80002830:	30 1a       	mov	r10,1
80002832:	f4 09 09 49 	lsl	r9,r10,r9
80002836:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
8000283a:	30 19       	mov	r9,1
8000283c:	f2 0c 09 49 	lsl	r9,r9,r12
80002840:	f1 49 00 44 	st.w	r8[68],r9
80002844:	c0 68       	rjmp	80002850 <gpio_configure_pin+0xb4>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80002846:	30 19       	mov	r9,1
80002848:	f2 0c 09 49 	lsl	r9,r9,r12
8000284c:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002850:	30 19       	mov	r9,1
80002852:	f2 0c 09 4c 	lsl	r12,r9,r12
80002856:	91 1c       	st.w	r8[0x4],r12
}
80002858:	5e fc       	retal	r12

8000285a <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000285a:	f8 08 16 05 	lsr	r8,r12,0x5
8000285e:	a9 68       	lsl	r8,0x8
80002860:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002864:	71 88       	ld.w	r8,r8[0x60]
80002866:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000286a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000286e:	5e fc       	retal	r12

80002870 <gpio_set_pin_high>:
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002870:	30 18       	mov	r8,1
80002872:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002876:	a5 9c       	lsr	r12,0x5
80002878:	a9 6c       	lsl	r12,0x8
8000287a:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000287e:	f9 48 00 54 	st.w	r12[84],r8
}
80002882:	5e fc       	retal	r12

80002884 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002884:	30 18       	mov	r8,1
80002886:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000288a:	a5 9c       	lsr	r12,0x5
8000288c:	a9 6c       	lsl	r12,0x8
8000288e:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002892:	f9 48 00 58 	st.w	r12[88],r8
}
80002896:	5e fc       	retal	r12

80002898 <gpio_tgl_gpio_pin>:
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80002898:	30 18       	mov	r8,1
8000289a:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000289e:	a5 9c       	lsr	r12,0x5
800028a0:	a9 6c       	lsl	r12,0x8
800028a2:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800028a6:	f9 48 00 5c 	st.w	r12[92],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800028aa:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800028ae:	99 18       	st.w	r12[0x4],r8
}
800028b0:	5e fc       	retal	r12

800028b2 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800028b2:	c0 08       	rjmp	800028b2 <_unhandled_interrupt>

800028b4 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800028b4:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
800028b8:	49 a8       	lddpc	r8,80002920 <INTC_register_interrupt+0x6c>
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800028ba:	a5 9b       	lsr	r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800028bc:	f0 0b 00 38 	add	r8,r8,r11<<0x3
800028c0:	70 18       	ld.w	r8,r8[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800028c2:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800028c6:	58 0a       	cp.w	r10,0
800028c8:	c0 c1       	brne	800028e0 <INTC_register_interrupt+0x2c>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800028ca:	fe 78 08 00 	mov	r8,-63488
800028ce:	fe c9 90 ce 	sub	r9,pc,-28466
800028d2:	fe ca 8f ce 	sub	r10,pc,-28722
800028d6:	f4 09 01 09 	sub	r9,r10,r9
800028da:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
	} else if (int_level == AVR32_INTC_INT1) {
800028de:	5e fc       	retal	r12
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800028e0:	58 1a       	cp.w	r10,1
800028e2:	c0 91       	brne	800028f4 <INTC_register_interrupt+0x40>
800028e4:	fe c8 90 e4 	sub	r8,pc,-28444
800028e8:	fe c9 8f d6 	sub	r9,pc,-28714
800028ec:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
800028f0:	bf a8       	sbr	r8,0x1e
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800028f2:	c1 18       	rjmp	80002914 <INTC_register_interrupt+0x60>
800028f4:	fe c8 90 f4 	sub	r8,pc,-28428
800028f8:	58 2a       	cp.w	r10,2
800028fa:	c0 71       	brne	80002908 <INTC_register_interrupt+0x54>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800028fc:	fe c9 8f dc 	sub	r9,pc,-28708
80002900:	f2 08 01 08 	sub	r8,r9,r8
80002904:	bf b8       	sbr	r8,0x1f
80002906:	c0 78       	rjmp	80002914 <INTC_register_interrupt+0x60>
80002908:	fe c9 8f da 	sub	r9,pc,-28710
8000290c:	f2 08 01 08 	sub	r8,r9,r8
80002910:	ea 18 c0 00 	orh	r8,0xc000
80002914:	fe 79 08 00 	mov	r9,-63488
80002918:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
8000291c:	5e fc       	retal	r12
8000291e:	d7 03       	nop
80002920:	80 00       	ld.sh	r0,r0[0x0]
80002922:	9a 0c       	ld.sh	r12,sp[0x0]

80002924 <INTC_init_interrupts>:
80002924:	d4 21       	pushm	r4-r7,lr
80002926:	fe c8 91 26 	sub	r8,pc,-28378
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000292a:	e3 b8 00 01 	mtsr	0x4,r8
8000292e:	fe ce 90 2a 	sub	lr,pc,-28630
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002932:	48 d9       	lddpc	r9,80002964 <INTC_init_interrupts+0x40>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002934:	10 1e       	sub	lr,r8

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002936:	fe cc 00 84 	sub	r12,pc,132
8000293a:	30 08       	mov	r8,0
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000293c:	fe 7b 08 00 	mov	r11,-63488
80002940:	c0 e8       	rjmp	8000295c <INTC_init_interrupts+0x38>
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002942:	72 16       	ld.w	r6,r9[0x4]
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002944:	ec 0a 00 26 	add	r6,r6,r10<<0x2

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002948:	2f fa       	sub	r10,-1

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000294a:	8d 0c       	st.w	r6[0x0],r12
8000294c:	0e 3a       	cp.w	r10,r7
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000294e:	cf a3       	brcs	80002942 <INTC_init_interrupts+0x1e>
80002950:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
80002954:	2f 89       	sub	r9,-8
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80002956:	2f f8       	sub	r8,-1
80002958:	59 48       	cp.w	r8,20
8000295a:	c0 40       	breq	80002962 <INTC_init_interrupts+0x3e>
8000295c:	72 07       	ld.w	r7,r9[0x0]
8000295e:	30 0a       	mov	r10,0
80002960:	cf 6b       	rjmp	8000294c <INTC_init_interrupts+0x28>
80002962:	d8 22       	popm	r4-r7,pc
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	9a 0c       	ld.sh	r12,sp[0x0]

80002968 <_get_interrupt_handler>:
80002968:	e0 68 00 83 	mov	r8,131
8000296c:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002970:	f0 0c 01 0c 	sub	r12,r8,r12
80002974:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002978:	f0 ca ff c0 	sub	r10,r8,-64
8000297c:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002980:	58 0c       	cp.w	r12,0
80002982:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002984:	48 69       	lddpc	r9,8000299c <_get_interrupt_handler+0x34>
80002986:	f8 0c 12 00 	clz	r12,r12
8000298a:	f2 08 00 38 	add	r8,r9,r8<<0x3
8000298e:	f8 0c 11 1f 	rsub	r12,r12,31
80002992:	70 18       	ld.w	r8,r8[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002994:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002998:	5e fc       	retal	r12
8000299a:	d7 03       	nop
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	9a 0c       	ld.sh	r12,sp[0x0]

800029a0 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil(pb_hz, baudrate);
800029a0:	f8 c8 00 01 	sub	r8,r12,1
800029a4:	f0 0b 00 0b 	add	r11,r8,r11
800029a8:	f6 0c 0d 0a 	divu	r10,r11,r12
800029ac:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
800029ae:	f4 c8 00 01 	sub	r8,r10,1
800029b2:	e0 48 00 fe 	cp.w	r8,254
800029b6:	e0 88 00 03 	brls	800029bc <getBaudDiv+0x1c>
800029ba:	5e fe       	retal	-1
    return -1;
  }

  return baudDiv;
800029bc:	5c 8c       	casts.h	r12
}
800029be:	5e fc       	retal	r12

800029c0 <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
800029c0:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
800029c2:	30 19       	mov	r9,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
800029c4:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
800029c6:	f7 3b 00 0d 	ld.ub	r11,r11[13]
800029ca:	f2 0b 18 00 	cp.b	r11,r9
800029ce:	e0 88 00 04 	brls	800029d6 <spi_initMaster+0x16>
800029d2:	30 2c       	mov	r12,2
800029d4:	d8 02       	popm	pc

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800029d6:	30 0a       	mov	r10,0
  if (options->modfdis > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800029d8:	e0 69 00 80 	mov	r9,128
800029dc:	99 09       	st.w	r12[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
800029de:	30 1e       	mov	lr,1

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800029e0:	70 19       	ld.w	r9,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
800029e2:	14 9c       	mov	r12,r10
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
800029e4:	f3 de d0 01 	bfins	r9,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800029e8:	f3 db d0 81 	bfins	r9,r11,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
800029ec:	f3 da d0 e1 	bfins	r9,r10,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800029f0:	30 fa       	mov	r10,15
800029f2:	f3 da d2 04 	bfins	r9,r10,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
800029f6:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
}
800029f8:	d8 02       	popm	pc

800029fa <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800029fa:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800029fc:	30 18       	mov	r8,1
800029fe:	f0 0b 18 00 	cp.b	r11,r8
80002a02:	5f be       	srhi	lr
80002a04:	f0 0a 18 00 	cp.b	r10,r8
80002a08:	5f b8       	srhi	r8
80002a0a:	1c 48       	or	r8,lr
80002a0c:	c0 30       	breq	80002a12 <spi_selectionMode+0x18>
80002a0e:	30 2c       	mov	r12,2
80002a10:	d8 02       	popm	pc
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
80002a12:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
80002a14:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002a18:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
80002a1c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
80002a20:	99 18       	st.w	r12[0x4],r8
80002a22:	d8 0a       	popm	pc,r12=0

80002a24 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002a24:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002a26:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002a28:	ea 19 00 0f 	orh	r9,0xf
80002a2c:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002a2e:	78 1c       	ld.w	r12,r12[0x4]
80002a30:	e2 1c 00 04 	andl	r12,0x4,COH
80002a34:	c1 00       	breq	80002a54 <spi_selectChip+0x30>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80002a36:	30 e9       	mov	r9,14
80002a38:	f2 0b 18 00 	cp.b	r11,r9
80002a3c:	e0 8b 00 1a 	brhi	80002a70 <spi_selectChip+0x4c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80002a40:	70 19       	ld.w	r9,r8[0x4]
80002a42:	b1 6b       	lsl	r11,0x10
80002a44:	30 0c       	mov	r12,0
80002a46:	ea 1b ff f0 	orh	r11,0xfff0
80002a4a:	e8 1b ff ff 	orl	r11,0xffff
80002a4e:	12 6b       	and	r11,r9
80002a50:	91 1b       	st.w	r8[0x4],r11
80002a52:	5e fc       	retal	r12
  } else {
    if (chip > 3) {
80002a54:	30 39       	mov	r9,3
80002a56:	f2 0b 18 00 	cp.b	r11,r9
80002a5a:	e0 8b 00 0b 	brhi	80002a70 <spi_selectChip+0x4c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002a5e:	70 19       	ld.w	r9,r8[0x4]
80002a60:	2f 0b       	sub	r11,-16
80002a62:	30 1a       	mov	r10,1
80002a64:	f4 0b 09 4b 	lsl	r11,r10,r11
80002a68:	5c db       	com	r11
80002a6a:	12 6b       	and	r11,r9
80002a6c:	91 1b       	st.w	r8[0x4],r11
80002a6e:	5e fc       	retal	r12
80002a70:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
80002a72:	5e fc       	retal	r12

80002a74 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002a74:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002a78:	c0 58       	rjmp	80002a82 <spi_unselectChip+0xe>
    if (!timeout--) {
80002a7a:	58 08       	cp.w	r8,0
80002a7c:	c0 21       	brne	80002a80 <spi_unselectChip+0xc>
80002a7e:	5e ff       	retal	1
80002a80:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002a82:	78 49       	ld.w	r9,r12[0x10]
80002a84:	ed b9 00 09 	bld	r9,0x9
80002a88:	cf 91       	brne	80002a7a <spi_unselectChip+0x6>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002a8a:	78 18       	ld.w	r8,r12[0x4]
80002a8c:	ea 18 00 0f 	orh	r8,0xf
80002a90:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002a92:	fc 18 01 00 	movh	r8,0x100
80002a96:	99 08       	st.w	r12[0x0],r8
80002a98:	5e fd       	retal	0
80002a9a:	d7 03       	nop

80002a9c <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002a9c:	d4 31       	pushm	r0-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002a9e:	30 32       	mov	r2,3


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002aa0:	16 97       	mov	r7,r11
80002aa2:	18 96       	mov	r6,r12
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002aa4:	f7 34 00 0c 	ld.ub	r4,r11[12]
80002aa8:	e4 04 18 00 	cp.b	r4,r2
80002aac:	e0 8b 00 46 	brhi	80002b38 <spi_setupChipReg+0x9c>
      options->stay_act > 1 ||
80002ab0:	f7 31 00 0b 	ld.ub	r1,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002ab4:	30 15       	mov	r5,1
80002ab6:	ea 01 18 00 	cp.b	r1,r5
80002aba:	e0 8b 00 3f 	brhi	80002b38 <spi_setupChipReg+0x9c>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80002abe:	f7 33 00 08 	ld.ub	r3,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002ac2:	30 78       	mov	r8,7
80002ac4:	f0 03 18 00 	cp.b	r3,r8
80002ac8:	e0 88 00 38 	brls	80002b38 <spi_setupChipReg+0x9c>
80002acc:	31 08       	mov	r8,16
80002ace:	f0 03 18 00 	cp.b	r3,r8
80002ad2:	e0 8b 00 33 	brhi	80002b38 <spi_setupChipReg+0x9c>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002ad6:	14 9b       	mov	r11,r10
80002ad8:	6e 1c       	ld.w	r12,r7[0x4]
80002ada:	c6 3f       	rcall	800029a0 <getBaudDiv>
80002adc:	c2 e5       	brlt	80002b38 <spi_setupChipReg+0x9c>

  if (baudDiv < 0) {
80002ade:	08 9a       	mov	r10,r4
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002ae0:	ec 1a 00 01 	eorl	r10,0x1
80002ae4:	30 08       	mov	r8,0
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
80002ae6:	a1 94       	lsr	r4,0x1
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80002ae8:	f1 d4 d0 01 	bfins	r8,r4,0x0,0x1
80002aec:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002af0:	ef 3a 00 09 	ld.ub	r10,r7[9]
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002af4:	20 83       	sub	r3,8
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002af6:	f1 d1 d0 61 	bfins	r8,r1,0x3,0x1

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002afa:	0f 89       	ld.ub	r9,r7[0x0]
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
80002afc:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002b00:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002b04:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002b08:	ef 3a 00 0a 	ld.ub	r10,r7[10]
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002b0c:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80002b10:	ea 09 18 00 	cp.b	r9,r5

  switch(options->reg) {
80002b14:	c0 c0       	breq	80002b2c <spi_setupChipReg+0x90>
80002b16:	c0 93       	brcs	80002b28 <spi_setupChipReg+0x8c>
80002b18:	30 2a       	mov	r10,2
80002b1a:	f4 09 18 00 	cp.b	r9,r10
80002b1e:	c0 90       	breq	80002b30 <spi_setupChipReg+0x94>
80002b20:	e4 09 18 00 	cp.b	r9,r2
80002b24:	c0 a1       	brne	80002b38 <spi_setupChipReg+0x9c>
80002b26:	c0 78       	rjmp	80002b34 <spi_setupChipReg+0x98>
80002b28:	8d c8       	st.w	r6[0x30],r8
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80002b2a:	c0 68       	rjmp	80002b36 <spi_setupChipReg+0x9a>
80002b2c:	8d d8       	st.w	r6[0x34],r8
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80002b2e:	c0 48       	rjmp	80002b36 <spi_setupChipReg+0x9a>
80002b30:	8d e8       	st.w	r6[0x38],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002b32:	c0 28       	rjmp	80002b36 <spi_setupChipReg+0x9a>
80002b34:	8d f8       	st.w	r6[0x3c],r8
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80002b36:	d8 3a       	popm	r0-r7,pc,r12=0
80002b38:	30 2c       	mov	r12,2
      break;
80002b3a:	d8 32       	popm	r0-r7,pc

80002b3c <spi_enable>:
    }
  }
#endif

  return SPI_OK;
}
80002b3c:	30 18       	mov	r8,1
80002b3e:	99 08       	st.w	r12[0x0],r8
80002b40:	5e fc       	retal	r12

80002b42 <spi_write>:
80002b42:	e0 68 3a 98 	mov	r8,15000

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002b46:	c0 58       	rjmp	80002b50 <spi_write+0xe>
    if (!timeout--) {
80002b48:	58 08       	cp.w	r8,0
80002b4a:	c0 21       	brne	80002b4e <spi_write+0xc>
80002b4c:	5e ff       	retal	1
80002b4e:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002b50:	78 49       	ld.w	r9,r12[0x10]
80002b52:	ed b9 00 01 	bld	r9,0x1
80002b56:	cf 91       	brne	80002b48 <spi_write+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002b58:	5c 7b       	castu.h	r11
80002b5a:	99 3b       	st.w	r12[0xc],r11
80002b5c:	5e fd       	retal	0

80002b5e <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80002b5e:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80002b62:	c0 58       	rjmp	80002b6c <spi_read+0xe>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002b64:	58 08       	cp.w	r8,0
80002b66:	c0 21       	brne	80002b6a <spi_read+0xc>
80002b68:	5e ff       	retal	1
80002b6a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80002b6c:	78 49       	ld.w	r9,r12[0x10]
80002b6e:	e2 19 02 01 	andl	r9,0x201,COH
80002b72:	e0 49 02 01 	cp.w	r9,513
80002b76:	cf 71       	brne	80002b64 <spi_read+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002b78:	78 28       	ld.w	r8,r12[0x8]
80002b7a:	30 0c       	mov	r12,0
80002b7c:	b6 08       	st.h	r11[0x0],r8

  return SPI_OK;
}
80002b7e:	5e fc       	retal	r12

80002b80 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80002b80:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002b82:	76 09       	ld.w	r9,r11[0x0]
80002b84:	58 29       	cp.w	r9,2
80002b86:	e0 88 00 03 	brls	80002b8c <tc_init_waveform+0xc>
80002b8a:	dc 0a       	popm	pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002b8c:	76 18       	ld.w	r8,r11[0x4]
80002b8e:	a5 69       	lsl	r9,0x4
80002b90:	10 9e       	mov	lr,r8
80002b92:	e6 1e c0 00 	andh	lr,0xc000,COH
80002b96:	f2 ca ff ff 	sub	r10,r9,-1
80002b9a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80002b9e:	af b9       	sbr	r9,0xf
80002ba0:	1c 49       	or	r9,lr
80002ba2:	10 9e       	mov	lr,r8
80002ba4:	e6 1e 30 00 	andh	lr,0x3000,COH
80002ba8:	1c 49       	or	r9,lr
80002baa:	10 9e       	mov	lr,r8
80002bac:	e6 1e 0c 00 	andh	lr,0xc00,COH
80002bb0:	1c 49       	or	r9,lr
80002bb2:	10 9e       	mov	lr,r8
80002bb4:	e6 1e 03 00 	andh	lr,0x300,COH
80002bb8:	1c 49       	or	r9,lr
80002bba:	10 9e       	mov	lr,r8
80002bbc:	e6 1e 00 c0 	andh	lr,0xc0,COH
80002bc0:	1c 49       	or	r9,lr
80002bc2:	10 9e       	mov	lr,r8
80002bc4:	e6 1e 00 30 	andh	lr,0x30,COH
80002bc8:	1c 49       	or	r9,lr
80002bca:	10 9e       	mov	lr,r8
80002bcc:	e6 1e 00 0c 	andh	lr,0xc,COH
80002bd0:	1c 49       	or	r9,lr
80002bd2:	10 9e       	mov	lr,r8
80002bd4:	e6 1e 00 03 	andh	lr,0x3,COH
80002bd8:	1c 49       	or	r9,lr
80002bda:	10 9e       	mov	lr,r8
80002bdc:	e2 1e 60 00 	andl	lr,0x6000,COH
80002be0:	1c 49       	or	r9,lr
80002be2:	10 9e       	mov	lr,r8
80002be4:	e2 1e 10 00 	andl	lr,0x1000,COH
80002be8:	1c 49       	or	r9,lr
80002bea:	10 9e       	mov	lr,r8
80002bec:	e2 1e 0c 00 	andl	lr,0xc00,COH
80002bf0:	1c 49       	or	r9,lr
80002bf2:	10 9e       	mov	lr,r8
80002bf4:	e2 1e 03 00 	andl	lr,0x300,COH
80002bf8:	1c 49       	or	r9,lr
80002bfa:	10 9e       	mov	lr,r8
80002bfc:	e2 1e 00 80 	andl	lr,0x80,COH
80002c00:	10 9b       	mov	r11,r8
80002c02:	1c 49       	or	r9,lr
80002c04:	e2 1b 00 08 	andl	r11,0x8,COH
80002c08:	10 9e       	mov	lr,r8
80002c0a:	e2 18 00 30 	andl	r8,0x30,COH
80002c0e:	e2 1e 00 40 	andl	lr,0x40,COH
80002c12:	1c 49       	or	r9,lr
80002c14:	f3 e8 10 08 	or	r8,r9,r8
80002c18:	16 48       	or	r8,r11
80002c1a:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
80002c1e:	d8 0a       	popm	pc,r12=0

80002c20 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002c20:	58 2b       	cp.w	r11,2
80002c22:	e0 88 00 03 	brls	80002c28 <tc_start+0x8>
80002c26:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002c28:	a7 6b       	lsl	r11,0x6
80002c2a:	16 0c       	add	r12,r11
80002c2c:	30 58       	mov	r8,5
80002c2e:	99 08       	st.w	r12[0x0],r8
80002c30:	5e fd       	retal	0

80002c32 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002c32:	58 2b       	cp.w	r11,2
80002c34:	e0 88 00 03 	brls	80002c3a <tc_read_sr+0x8>
80002c38:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002c3a:	a7 6b       	lsl	r11,0x6
80002c3c:	2e 0b       	sub	r11,-32
80002c3e:	16 0c       	add	r12,r11
80002c40:	78 0c       	ld.w	r12,r12[0x0]
}
80002c42:	5e fc       	retal	r12

80002c44 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002c44:	58 2b       	cp.w	r11,2
80002c46:	e0 88 00 03 	brls	80002c4c <tc_write_rc+0x8>
80002c4a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002c4c:	f6 08 15 04 	lsl	r8,r11,0x4
80002c50:	2f f8       	sub	r8,-1
80002c52:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002c56:	ed b8 00 0f 	bld	r8,0xf
80002c5a:	c0 c1       	brne	80002c72 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002c5c:	a7 6b       	lsl	r11,0x6
80002c5e:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002c62:	16 0c       	add	r12,r11
80002c64:	2e 4c       	sub	r12,-28
80002c66:	78 08       	ld.w	r8,r12[0x0]
80002c68:	e0 18 00 00 	andl	r8,0x0
80002c6c:	f3 e8 10 08 	or	r8,r9,r8
80002c70:	99 08       	st.w	r12[0x0],r8

  return value;
80002c72:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002c76:	5e fc       	retal	r12

80002c78 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002c78:	d4 21       	pushm	r4-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002c7a:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002c7e:	58 2b       	cp.w	r11,2
80002c80:	e0 88 00 03 	brls	80002c86 <tc_configure_interrupts+0xe>
80002c84:	dc 2a       	popm	r4-r7,pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002c86:	74 08       	ld.w	r8,r10[0x0]
80002c88:	10 9e       	mov	lr,r8
80002c8a:	e2 1e 00 02 	andl	lr,0x2,COH
80002c8e:	e2 18 00 fd 	andl	r8,0xfd,COH
80002c92:	1c 48       	or	r8,lr
80002c94:	f6 0e 15 06 	lsl	lr,r11,0x6
80002c98:	f8 0e 00 0e 	add	lr,r12,lr
80002c9c:	2d ce       	sub	lr,-36
80002c9e:	9d 08       	st.w	lr[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002ca0:	ee 19 00 01 	eorh	r9,0x1
80002ca4:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002ca8:	c0 20       	breq	80002cac <tc_configure_interrupts+0x34>
80002caa:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002cac:	74 08       	ld.w	r8,r10[0x0]
80002cae:	e0 67 00 80 	mov	r7,128
80002cb2:	ed d8 c0 e1 	bfextu	r6,r8,0x7,0x1
80002cb6:	f9 b7 01 00 	movne	r7,0
80002cba:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
80002cbe:	ec 1a 00 01 	eorl	r10,0x1
80002cc2:	ef ea 10 0a 	or	r10,r7,r10
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002cc6:	ef d8 c0 c1 	bfextu	r7,r8,0x6,0x1
80002cca:	f9 b7 00 40 	moveq	r7,64
80002cce:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002cd2:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002cd4:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002cd8:	f9 b7 00 20 	moveq	r7,32
80002cdc:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002ce0:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002ce2:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002ce6:	f9 b7 00 10 	moveq	r7,16
80002cea:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002cee:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002cf0:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002cf4:	f9 b7 00 08 	moveq	r7,8
80002cf8:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002cfc:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002cfe:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002d02:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002d06:	58 07       	cp.w	r7,0
80002d08:	f9 b7 00 04 	moveq	r7,4
80002d0c:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002d10:	58 08       	cp.w	r8,0
80002d12:	f9 b8 00 02 	moveq	r8,2
80002d16:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002d1a:	0e 4a       	or	r10,r7
80002d1c:	f5 e8 10 08 	or	r8,r10,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002d20:	f6 0e 15 06 	lsl	lr,r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002d24:	a7 6b       	lsl	r11,0x6
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002d26:	2e 0e       	sub	lr,-32
80002d28:	f8 0e 00 0e 	add	lr,r12,lr
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002d2c:	16 0c       	add	r12,r11
80002d2e:	2d 8c       	sub	r12,-40
80002d30:	99 08       	st.w	r12[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002d32:	7c 08       	ld.w	r8,lr[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002d34:	58 09       	cp.w	r9,0
80002d36:	c0 31       	brne	80002d3c <tc_configure_interrupts+0xc4>
80002d38:	12 9c       	mov	r12,r9
80002d3a:	d8 22       	popm	r4-r7,pc
80002d3c:	d5 03       	csrf	0x10
80002d3e:	d8 2a       	popm	r4-r7,pc,r12=0

80002d40 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002d40:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002d42:	f6 0e 15 04 	lsl	lr,r11,0x4
80002d46:	1c 3a       	cp.w	r10,lr
80002d48:	f9 be 02 10 	movhs	lr,16
80002d4c:	f9 be 03 08 	movlo	lr,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002d50:	fc 0b 02 4b 	mul	r11,lr,r11
80002d54:	f6 08 16 01 	lsr	r8,r11,0x1
80002d58:	f0 0a 00 3a 	add	r10,r8,r10<<0x3
80002d5c:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002d60:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002d64:	f2 c8 00 01 	sub	r8,r9,1
80002d68:	e0 48 ff fe 	cp.w	r8,65534
80002d6c:	e0 88 00 03 	brls	80002d72 <usart_set_async_baudrate+0x32>
80002d70:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002d72:	78 18       	ld.w	r8,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002d74:	e8 6b 00 00 	mov	r11,524288
80002d78:	e4 18 ff f7 	andh	r8,0xfff7
80002d7c:	e0 18 fe cf 	andl	r8,0xfecf
80002d80:	59 0e       	cp.w	lr,16
80002d82:	f6 0e 17 10 	movne	lr,r11
80002d86:	f9 be 00 00 	moveq	lr,0
80002d8a:	fd e8 10 08 	or	r8,lr,r8
80002d8e:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002d90:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80002d94:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002d98:	99 89       	st.w	r12[0x20],r9
80002d9a:	d8 0a       	popm	pc,r12=0

80002d9c <usart_getchar>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002d9c:	78 58       	ld.w	r8,r12[0x14]
80002d9e:	e2 18 00 e0 	andl	r8,0xe0,COH
80002da2:	c0 20       	breq	80002da6 <usart_getchar+0xa>
80002da4:	5e fe       	retal	-1
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002da6:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002da8:	ed b8 00 00 	bld	r8,0x0
80002dac:	cf 81       	brne	80002d9c <usart_getchar>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002dae:	78 6c       	ld.w	r12,r12[0x18]
80002db0:	f9 dc c0 09 	bfextu	r12,r12,0x0,0x9

  if (ret == USART_RX_ERROR)
    return USART_FAILURE;

  return c;
}
80002db4:	5e fc       	retal	r12

80002db6 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0') {
80002db6:	c0 e8       	rjmp	80002dd2 <usart_write_line+0x1c>
80002db8:	e0 68 27 10 	mov	r8,10000
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002dbc:	20 18       	sub	r8,1
80002dbe:	5b f8       	cp.w	r8,-1
80002dc0:	c0 80       	breq	80002dd0 <usart_write_line+0x1a>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002dc2:	78 59       	ld.w	r9,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002dc4:	ed b9 00 01 	bld	r9,0x1
80002dc8:	cf a1       	brne	80002dbc <usart_write_line+0x6>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002dca:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
80002dce:	99 7a       	st.w	r12[0x1c],r10


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0') {
    usart_putchar(usart, *string++);
80002dd0:	2f fb       	sub	r11,-1
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0') {
80002dd2:	17 8a       	ld.ub	r10,r11[0x0]
80002dd4:	58 0a       	cp.w	r10,0
80002dd6:	cf 11       	brne	80002db8 <usart_write_line+0x2>
    usart_putchar(usart, *string++);
  }
}
80002dd8:	5e fc       	retal	r12

80002dda <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002dda:	e1 b8 00 00 	mfsr	r8,0x0
80002dde:	ee 18 00 01 	eorh	r8,0x1
80002de2:	f1 d8 c2 01 	bfextu	r8,r8,0x10,0x1

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002de6:	c0 20       	breq	80002dea <usart_reset+0x10>
80002de8:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002dea:	3f f9       	mov	r9,-1
80002dec:	99 39       	st.w	r12[0xc],r9
  usart->csr;
80002dee:	78 59       	ld.w	r9,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002df0:	58 08       	cp.w	r8,0
80002df2:	c0 20       	breq	80002df6 <usart_reset+0x1c>
80002df4:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002df6:	30 08       	mov	r8,0
80002df8:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002dfa:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002dfc:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002dfe:	ea 68 61 0c 	mov	r8,680204
80002e02:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002e04:	5e fc       	retal	r12
80002e06:	d7 03       	nop

80002e08 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002e08:	d4 21       	pushm	r4-r7,lr
80002e0a:	20 1d       	sub	sp,4
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002e0c:	50 0a       	stdsp	sp[0x0],r10
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002e0e:	16 96       	mov	r6,r11
80002e10:	18 97       	mov	r7,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002e12:	ce 4f       	rcall	80002dda <usart_reset>
80002e14:	40 0a       	lddsp	r10,sp[0x0]

  // Check input values.
  if (!opt || // Null pointer.
80002e16:	58 06       	cp.w	r6,0
80002e18:	c5 40       	breq	80002ec0 <usart_init_rs232+0xb8>
80002e1a:	0d c8       	ld.ub	r8,r6[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
80002e1c:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002e1e:	f2 08 18 00 	cp.b	r8,r9
80002e22:	e0 88 00 4f 	brls	80002ec0 <usart_init_rs232+0xb8>
80002e26:	30 95       	mov	r5,9
80002e28:	ea 08 18 00 	cp.b	r8,r5
80002e2c:	e0 8b 00 4a 	brhi	80002ec0 <usart_init_rs232+0xb8>
80002e30:	0d d9       	ld.ub	r9,r6[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002e32:	30 78       	mov	r8,7
80002e34:	f0 09 18 00 	cp.b	r9,r8
80002e38:	e0 8b 00 44 	brhi	80002ec0 <usart_init_rs232+0xb8>
80002e3c:	8c 39       	ld.sh	r9,r6[0x6]
      opt->stopbits > 2 + 255 ||
80002e3e:	e0 68 01 01 	mov	r8,257
80002e42:	f0 09 19 00 	cp.h	r9,r8
80002e46:	e0 8b 00 3d 	brhi	80002ec0 <usart_init_rs232+0xb8>
80002e4a:	ed 39 00 08 	ld.ub	r9,r6[8]
      opt->channelmode > 3 ||
80002e4e:	30 38       	mov	r8,3
80002e50:	f0 09 18 00 	cp.b	r9,r8
80002e54:	e0 8b 00 36 	brhi	80002ec0 <usart_init_rs232+0xb8>
80002e58:	6c 0b       	ld.w	r11,r6[0x0]
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002e5a:	0e 9c       	mov	r12,r7
80002e5c:	c7 2f       	rcall	80002d40 <usart_set_async_baudrate>
80002e5e:	58 1c       	cp.w	r12,1
80002e60:	c3 00       	breq	80002ec0 <usart_init_rs232+0xb8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002e62:	0d c8       	ld.ub	r8,r6[0x4]
80002e64:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002e68:	c0 41       	brne	80002e70 <usart_init_rs232+0x68>
80002e6a:	6e 18       	ld.w	r8,r7[0x4]
80002e6c:	b1 b8       	sbr	r8,0x11
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002e6e:	c0 58       	rjmp	80002e78 <usart_init_rs232+0x70>
80002e70:	20 58       	sub	r8,5
80002e72:	6e 19       	ld.w	r9,r7[0x4]
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002e74:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002e78:	8f 18       	st.w	r7[0x4],r8
80002e7a:	6e 19       	ld.w	r9,r7[0x4]
80002e7c:	ed 3a 00 08 	ld.ub	r10,r6[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002e80:	0d d8       	ld.ub	r8,r6[0x5]
80002e82:	a9 78       	lsl	r8,0x9
80002e84:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002e88:	12 48       	or	r8,r9
80002e8a:	8f 18       	st.w	r7[0x4],r8
80002e8c:	30 2a       	mov	r10,2
80002e8e:	8c 38       	ld.sh	r8,r6[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002e90:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80002e94:	f4 08 19 00 	cp.h	r8,r10
80002e98:	e0 88 00 08 	brls	80002ea8 <usart_init_rs232+0xa0>
80002e9c:	6e 18       	ld.w	r8,r7[0x4]
80002e9e:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002ea0:	8f 18       	st.w	r7[0x4],r8
80002ea2:	20 29       	sub	r9,2
80002ea4:	8f a9       	st.w	r7[0x28],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002ea6:	c0 58       	rjmp	80002eb0 <usart_init_rs232+0xa8>
80002ea8:	6e 18       	ld.w	r8,r7[0x4]
80002eaa:	f1 e9 10 c9 	or	r9,r8,r9<<0xc
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002eae:	8f 19       	st.w	r7[0x4],r9
80002eb0:	6e 18       	ld.w	r8,r7[0x4]
80002eb2:	e0 18 ff f0 	andl	r8,0xfff0

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002eb6:	8f 18       	st.w	r7[0x4],r8
80002eb8:	30 0c       	mov	r12,0
80002eba:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002ebc:	8f 08       	st.w	r7[0x0],r8
80002ebe:	c0 28       	rjmp	80002ec2 <usart_init_rs232+0xba>
80002ec0:	30 1c       	mov	r12,1
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002ec2:	2f fd       	sub	sp,-4
80002ec4:	d8 22       	popm	r4-r7,pc
}
80002ec6:	d7 03       	nop

80002ec8 <_stext>:
80002ec8:	48 dd       	lddpc	sp,80002efc <udata_clear_loop_end+0x4>
80002eca:	fe c0 96 ca 	sub	r0,pc,-26934
80002ece:	e3 b0 00 01 	mtsr	0x4,r0
80002ed2:	d5 53       	csrf	0x15
80002ed4:	48 b0       	lddpc	r0,80002f00 <udata_clear_loop_end+0x8>
80002ed6:	48 c1       	lddpc	r1,80002f04 <udata_clear_loop_end+0xc>
80002ed8:	02 30       	cp.w	r0,r1
80002eda:	c0 62       	brcc	80002ee6 <idata_load_loop_end>
80002edc:	48 b2       	lddpc	r2,80002f08 <udata_clear_loop_end+0x10>

80002ede <idata_load_loop>:
80002ede:	a5 05       	ld.d	r4,r2++
80002ee0:	a1 24       	st.d	r0++,r4
80002ee2:	02 30       	cp.w	r0,r1
80002ee4:	cf d3       	brcs	80002ede <idata_load_loop>

80002ee6 <idata_load_loop_end>:
80002ee6:	48 a0       	lddpc	r0,80002f0c <udata_clear_loop_end+0x14>
80002ee8:	48 a1       	lddpc	r1,80002f10 <udata_clear_loop_end+0x18>
80002eea:	02 30       	cp.w	r0,r1
80002eec:	c0 62       	brcc	80002ef8 <udata_clear_loop_end>
80002eee:	30 02       	mov	r2,0
80002ef0:	30 03       	mov	r3,0

80002ef2 <udata_clear_loop>:
80002ef2:	a1 22       	st.d	r0++,r2
80002ef4:	02 30       	cp.w	r0,r1
80002ef6:	cf e3       	brcs	80002ef2 <udata_clear_loop>

80002ef8 <udata_clear_loop_end>:
80002ef8:	fe cf f7 e8 	sub	pc,pc,-2072
80002efc:	00 01       	add	r1,r0
80002efe:	00 00       	add	r0,r0
80002f00:	00 00       	add	r0,r0
80002f02:	00 04       	add	r4,r0
80002f04:	00 00       	add	r0,r0
80002f06:	05 10       	ld.sh	r0,r2++
80002f08:	80 00       	ld.sh	r0,r0[0x0]
80002f0a:	a5 b8       	sbr	r8,0x5
80002f0c:	00 00       	add	r0,r0
80002f0e:	05 10       	ld.sh	r0,r2++
80002f10:	00 00       	add	r0,r0
80002f12:	70 a8       	ld.w	r8,r8[0x28]

80002f14 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80002f14:	d4 01       	pushm	lr
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002f16:	18 9b       	mov	r11,r12
80002f18:	30 2c       	mov	r12,2
80002f1a:	e0 a0 02 cd 	rcall	800034b4 <sysclk_priv_enable_module>
}
80002f1e:	d8 02       	popm	pc

80002f20 <sysclk_enable_peripheral_clock>:
80002f20:	d4 01       	pushm	lr
80002f22:	fe 5c 18 00 	cp.w	r12,-59392
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80002f26:	c6 60       	breq	80002ff2 <sysclk_enable_peripheral_clock+0xd2>
80002f28:	e0 8b 00 27 	brhi	80002f76 <sysclk_enable_peripheral_clock+0x56>
80002f2c:	fe 5c 00 00 	cp.w	r12,-65536
80002f30:	c4 f0       	breq	80002fce <sysclk_enable_peripheral_clock+0xae>
80002f32:	e0 8b 00 12 	brhi	80002f56 <sysclk_enable_peripheral_clock+0x36>
80002f36:	fe 4c 10 00 	cp.w	r12,-126976
80002f3a:	c6 b0       	breq	80003010 <sysclk_enable_peripheral_clock+0xf0>
80002f3c:	e0 8b 00 06 	brhi	80002f48 <sysclk_enable_peripheral_clock+0x28>
80002f40:	fe 4c 00 00 	cp.w	r12,-131072
80002f44:	c7 d1       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002f46:	c6 78       	rjmp	80003014 <sysclk_enable_peripheral_clock+0xf4>
80002f48:	fe 4c 14 00 	cp.w	r12,-125952
80002f4c:	c6 a0       	breq	80003020 <sysclk_enable_peripheral_clock+0x100>
80002f4e:	fe 4c 18 00 	cp.w	r12,-124928
80002f52:	c7 61       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002f54:	c6 e8       	rjmp	80003030 <sysclk_enable_peripheral_clock+0x110>
80002f56:	fe 5c 0c 00 	cp.w	r12,-62464
80002f5a:	c4 00       	breq	80002fda <sysclk_enable_peripheral_clock+0xba>
80002f5c:	e0 8b 00 06 	brhi	80002f68 <sysclk_enable_peripheral_clock+0x48>
80002f60:	fe 5c 08 00 	cp.w	r12,-63488
80002f64:	c6 d1       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002f66:	c3 08       	rjmp	80002fc6 <sysclk_enable_peripheral_clock+0xa6>
80002f68:	fe 5c 10 00 	cp.w	r12,-61440
80002f6c:	c2 f0       	breq	80002fca <sysclk_enable_peripheral_clock+0xaa>
80002f6e:	fe 5c 14 00 	cp.w	r12,-60416
80002f72:	c6 61       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002f74:	c3 d8       	rjmp	80002fee <sysclk_enable_peripheral_clock+0xce>
80002f76:	fe 5c 2c 00 	cp.w	r12,-54272
80002f7a:	c3 80       	breq	80002fea <sysclk_enable_peripheral_clock+0xca>
80002f7c:	e0 8b 00 12 	brhi	80002fa0 <sysclk_enable_peripheral_clock+0x80>
80002f80:	fe 5c 20 00 	cp.w	r12,-57344
80002f84:	c3 b0       	breq	80002ffa <sysclk_enable_peripheral_clock+0xda>
80002f86:	e0 8b 00 06 	brhi	80002f92 <sysclk_enable_peripheral_clock+0x72>
80002f8a:	fe 5c 1c 00 	cp.w	r12,-58368
80002f8e:	c5 81       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002f90:	c3 38       	rjmp	80002ff6 <sysclk_enable_peripheral_clock+0xd6>
80002f92:	fe 5c 24 00 	cp.w	r12,-56320
80002f96:	c2 60       	breq	80002fe2 <sysclk_enable_peripheral_clock+0xc2>
80002f98:	fe 5c 28 00 	cp.w	r12,-55296
80002f9c:	c5 11       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002f9e:	c2 48       	rjmp	80002fe6 <sysclk_enable_peripheral_clock+0xc6>
80002fa0:	fe 5c 38 00 	cp.w	r12,-51200
80002fa4:	c3 10       	breq	80003006 <sysclk_enable_peripheral_clock+0xe6>
80002fa6:	e0 8b 00 09 	brhi	80002fb8 <sysclk_enable_peripheral_clock+0x98>
80002faa:	fe 5c 30 00 	cp.w	r12,-53248
80002fae:	c2 80       	breq	80002ffe <sysclk_enable_peripheral_clock+0xde>
80002fb0:	fe 5c 34 00 	cp.w	r12,-52224
80002fb4:	c4 51       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002fb6:	c2 68       	rjmp	80003002 <sysclk_enable_peripheral_clock+0xe2>
80002fb8:	fe 5c 3c 00 	cp.w	r12,-50176
80002fbc:	c1 10       	breq	80002fde <sysclk_enable_peripheral_clock+0xbe>
80002fbe:	fe 5c 40 00 	cp.w	r12,-49152
80002fc2:	c3 e1       	brne	8000303e <sysclk_enable_peripheral_clock+0x11e>
80002fc4:	c2 38       	rjmp	8000300a <sysclk_enable_peripheral_clock+0xea>
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
80002fc6:	30 0c       	mov	r12,0
80002fc8:	c2 28       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
80002fca:	30 1c       	mov	r12,1
80002fcc:	c2 08       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80002fce:	30 1c       	mov	r12,1
80002fd0:	30 5b       	mov	r11,5
80002fd2:	e0 a0 02 71 	rcall	800034b4 <sysclk_priv_enable_module>
		sysclk_enable_pba_module(SYSCLK_GPIO);
		break;

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
80002fd6:	30 2c       	mov	r12,2
80002fd8:	c1 a8       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
80002fda:	30 3c       	mov	r12,3
80002fdc:	c1 88       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
80002fde:	30 4c       	mov	r12,4
80002fe0:	c1 68       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
80002fe2:	30 5c       	mov	r12,5
80002fe4:	c1 48       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
80002fe6:	30 6c       	mov	r12,6
80002fe8:	c1 28       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_TWI_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWI);
80002fea:	30 7c       	mov	r12,7
80002fec:	c1 08       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80002fee:	30 8c       	mov	r12,8
80002ff0:	c0 e8       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
80002ff2:	30 9c       	mov	r12,9
80002ff4:	c0 c8       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80002ff6:	30 ac       	mov	r12,10
80002ff8:	c0 a8       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
80002ffa:	30 bc       	mov	r12,11
80002ffc:	c0 88       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_PWM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PWM);
80002ffe:	30 cc       	mov	r12,12
80003000:	c0 68       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80003002:	30 dc       	mov	r12,13
80003004:	c0 48       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_TC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC);
80003006:	30 ec       	mov	r12,14
80003008:	c0 28       	rjmp	8000300c <sysclk_enable_peripheral_clock+0xec>
		break;

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000300a:	30 fc       	mov	r12,15
8000300c:	c8 4f       	rcall	80002f14 <sysclk_enable_pba_module>
8000300e:	d8 02       	popm	pc
		break;
80003010:	30 0c       	mov	r12,0

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80003012:	c0 c8       	rjmp	8000302a <sysclk_enable_peripheral_clock+0x10a>
80003014:	30 1c       	mov	r12,1
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003016:	30 3b       	mov	r11,3
80003018:	e0 a0 02 4e 	rcall	800034b4 <sysclk_priv_enable_module>
8000301c:	30 1c       	mov	r12,1
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
		break;

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000301e:	c0 68       	rjmp	8000302a <sysclk_enable_peripheral_clock+0x10a>
80003020:	30 1c       	mov	r12,1
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003022:	30 0b       	mov	r11,0
80003024:	e0 a0 02 48 	rcall	800034b4 <sysclk_priv_enable_module>
80003028:	30 2c       	mov	r12,2
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
		break;

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
8000302a:	e0 a0 02 5b 	rcall	800034e0 <sysclk_enable_pbb_module>
8000302e:	d8 02       	popm	pc
		break;
80003030:	30 1c       	mov	r12,1
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003032:	30 4b       	mov	r11,4
80003034:	e0 a0 02 40 	rcall	800034b4 <sysclk_priv_enable_module>
80003038:	30 3c       	mov	r12,3
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
		break;

	case AVR32_MACB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_MACB_DATA);
		sysclk_enable_pbb_module(SYSCLK_MACB_REGS);
8000303a:	e0 a0 02 53 	rcall	800034e0 <sysclk_enable_pbb_module>
8000303e:	d8 02       	popm	pc

80003040 <board_init>:
80003040:	d4 31       	pushm	r0-r7,lr
80003042:	20 ed       	sub	sp,56
80003044:	30 43       	mov	r3,4
80003046:	fa c7 ff cc 	sub	r7,sp,-52
8000304a:	06 9a       	mov	r10,r3
8000304c:	4c 9b       	lddpc	r11,80003170 <board_init+0x130>
8000304e:	0e 9c       	mov	r12,r7
	// Initialize Debug USART
	gpio_map_t DBG_USART_GPIO_MAP =
	{
	{DBG_USART_RX_PIN, DBG_USART_RX_FUNCTION},
	{DBG_USART_TX_PIN, DBG_USART_TX_FUNCTION}
	};
80003050:	e0 a0 07 68 	rcall	80003f20 <memcpy>
		.baudrate     = 115200,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
80003054:	4c 88       	lddpc	r8,80003174 <board_init+0x134>
80003056:	70 29       	ld.w	r9,r8[0x8]

	gpio_enable_module(DBG_USART_GPIO_MAP,
80003058:	0e 9c       	mov	r12,r7
		.baudrate     = 115200,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
8000305a:	fa c7 ff e0 	sub	r7,sp,-32
8000305e:	8f 29       	st.w	r7[0x8],r9
80003060:	f0 e8 00 00 	ld.d	r8,r8[0]

	gpio_enable_module(DBG_USART_GPIO_MAP,
80003064:	30 2b       	mov	r11,2
		.baudrate     = 115200,
		.charlength   = 8,
		.paritytype   = USART_NO_PARITY,
		.stopbits     = USART_1_STOPBIT,
		.channelmode  = USART_NORMAL_CHMODE
	};
80003066:	ee e9 00 00 	st.d	r7[0],r8

	gpio_enable_module(DBG_USART_GPIO_MAP,
8000306a:	fe b0 fb 89 	rcall	8000277c <gpio_enable_module>
 */
static inline bool usart_serial_init(volatile avr32_usart_t *usart,
		usart_serial_options_t *opt)
{
	// USART options.
	opt->channelmode = CONFIG_USART_SERIAL_MODE;
8000306e:	30 08       	mov	r8,0
	if ((uint32_t)usart == AVR32_USART1_ADDRESS)
	{
#if UC3C
		sysclk_enable_pbc_module(SYSCLK_USART1);
#else
		sysclk_enable_pba_module(SYSCLK_USART1);
80003070:	30 9c       	mov	r12,9
 */
static inline bool usart_serial_init(volatile avr32_usart_t *usart,
		usart_serial_options_t *opt)
{
	// USART options.
	opt->channelmode = CONFIG_USART_SERIAL_MODE;
80003072:	fb 68 00 28 	st.b	sp[40],r8
	if ((uint32_t)usart == AVR32_USART1_ADDRESS)
	{
#if UC3C
		sysclk_enable_pbc_module(SYSCLK_USART1);
#else
		sysclk_enable_pba_module(SYSCLK_USART1);
80003076:	c4 ff       	rcall	80002f14 <sysclk_enable_pba_module>
80003078:	e0 65 36 00 	mov	r5,13824
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8000307c:	ea 15 01 6e 	orh	r5,0x16e
80003080:	0e 9b       	mov	r11,r7
	if ((uint32_t)usart == AVR32_USART3_ADDRESS)
	{
		sysclk_enable_pba_module(SYSCLK_USART3);
	}
#endif
	if (usart_init_rs232(usart, opt, sysclk_get_pba_hz())) {
80003082:	0a 9a       	mov	r10,r5
80003084:	fe 7c 18 00 	mov	r12,-59392
80003088:	cc 0e       	rcall	80002e08 <usart_init_rs232>
8000308a:	4b c8       	lddpc	r8,80003178 <board_init+0x138>
8000308c:	fa c7 ff f0 	sub	r7,sp,-16
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 0,
		.spi_mode = 0,
		.modfdis = 0
	};
80003090:	f0 e0 00 08 	ld.d	r0,r8[8]
80003094:	ee e1 00 08 	st.d	r7[8],r0
80003098:	f0 e8 00 00 	ld.d	r8,r8[0]
8000309c:	ee e9 00 00 	st.d	r7[0],r8
800030a0:	4b 78       	lddpc	r8,8000317c <board_init+0x13c>
800030a2:	f0 e0 00 08 	ld.d	r0,r8[8]
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 0,
		.spi_mode = 0,
		.modfdis = 0
	};
800030a6:	fa e1 00 08 	st.d	sp[8],r0
800030aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800030ae:	30 8a       	mov	r10,8
800030b0:	fa e9 00 00 	st.d	sp[0],r8
800030b4:	fa c4 ff d4 	sub	r4,sp,-44
	// Initialize ADC SPI Bus
	gpio_map_t ADC_SPI_GPIO_MAP ={
	{ADC_MOSI_PIN,ADC_MOSI_FUNCTION},
	{ADC_MISO_PIN,ADC_MISO_FUNCTION},
	{ADC_SCK_PIN,ADC_SCK_FUNCTION},
	{ADC_CS_PIN,ADC_CS_FUNCTION}};
800030b8:	4b 2b       	lddpc	r11,80003180 <board_init+0x140>
800030ba:	08 9c       	mov	r12,r4
800030bc:	e0 a0 07 32 	rcall	80003f20 <memcpy>
800030c0:	06 9b       	mov	r11,r3
800030c2:	08 9c       	mov	r12,r4
			
	gpio_enable_module(ADC_SPI_GPIO_MAP,
800030c4:	fe b0 fb 5c 	rcall	8000277c <gpio_enable_module>
800030c8:	fe 7c 24 00 	mov	r12,-56320
	sizeof(ADC_SPI_GPIO_MAP) / sizeof(ADC_SPI_GPIO_MAP[0]));
		
	sysclk_enable_peripheral_clock(ADC_SPI);
800030cc:	c2 af       	rcall	80002f20 <sysclk_enable_peripheral_clock>
800030ce:	30 09       	mov	r9,0
800030d0:	fe 7c 24 00 	mov	r12,-56320
	spi_selectionMode(ADC_SPI,0,0,0);
800030d4:	12 9a       	mov	r10,r9
800030d6:	12 9b       	mov	r11,r9
800030d8:	fe b0 fc 91 	rcall	800029fa <spi_selectionMode>
800030dc:	0e 9b       	mov	r11,r7
800030de:	fe 7c 24 00 	mov	r12,-56320
	spi_initMaster(ADC_SPI,&adc_spi_opts);
800030e2:	fe b0 fc 6f 	rcall	800029c0 <spi_initMaster>
800030e6:	fe 7c 24 00 	mov	r12,-56320
800030ea:	fe b0 fd 29 	rcall	80002b3c <spi_enable>
	spi_enable(ADC_SPI);
800030ee:	0a 9a       	mov	r10,r5
800030f0:	0e 9b       	mov	r11,r7
800030f2:	fe 7c 24 00 	mov	r12,-56320
	spi_setupChipReg(ADC_SPI,&adc_spi_opts,sysclk_get_pba_hz());
800030f6:	fe b0 fc d3 	rcall	80002a9c <spi_setupChipReg>
800030fa:	0a 9a       	mov	r10,r5
800030fc:	1a 9b       	mov	r11,sp
800030fe:	fe 7c 24 00 	mov	r12,-56320
	spi_setupChipReg(ADC_SPI,&fake_spi_opts,sysclk_get_pba_hz());
80003102:	fe b0 fc cd 	rcall	80002a9c <spi_setupChipReg>
80003106:	fe 7c 28 00 	mov	r12,-55296
8000310a:	c0 bf       	rcall	80002f20 <sysclk_enable_peripheral_clock>
		.stay_act = 1,
		.spi_mode = 0,
		.modfdis = 1
	};
	
	sysclk_enable_peripheral_clock(SD_MMC_SPI);
8000310c:	fe 7c 38 00 	mov	r12,-51200
80003110:	c0 8f       	rcall	80002f20 <sysclk_enable_peripheral_clock>
80003112:	49 db       	lddpc	r11,80003184 <board_init+0x144>
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	
	sysclk_enable_peripheral_clock(tc);
80003114:	fe 7c 38 00 	mov	r12,-51200
80003118:	fe b0 fd 34 	rcall	80002b80 <tc_init_waveform>
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000311c:	e0 6a 07 53 	mov	r10,1875
80003120:	30 0b       	mov	r11,0
80003122:	fe 7c 38 00 	mov	r12,-51200
	 * Set the compare triggers.
	 * We configure it to count every 1 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 1 ms, hence RC = (fPBA / 8) / 1000
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 1875);
80003126:	fe b0 fd 8f 	rcall	80002c44 <tc_write_rc>
8000312a:	49 8a       	lddpc	r10,80003188 <board_init+0x148>
8000312c:	30 0b       	mov	r11,0
8000312e:	fe 7c 38 00 	mov	r12,-51200
80003132:	fe b0 fd a3 	rcall	80002c78 <tc_configure_interrupts>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003136:	30 0b       	mov	r11,0
80003138:	fe 7c 38 00 	mov	r12,-51200
8000313c:	fe b0 fd 72 	rcall	80002c20 <tc_start>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003140:	fe b0 fb f2 	rcall	80002924 <INTC_init_interrupts>
80003144:	30 0a       	mov	r10,0
80003146:	e0 6b 01 c0 	mov	r11,448
	tc_init(tc);
	
	// Timer

	// Initialize interrupt vectors.
	INTC_init_interrupts();
8000314a:	fe cc ff b6 	sub	r12,pc,-74
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, AVR32_INTC_INT0);
8000314e:	fe b0 fb b3 	rcall	800028b4 <INTC_register_interrupt>
80003152:	e0 6a 13 f4 	mov	r10,5108
80003156:	30 0b       	mov	r11,0
80003158:	48 dc       	lddpc	r12,8000318c <board_init+0x14c>
	//sizeof(RTC_TWI_GPIO_MAP) / sizeof(RTC_TWI_GPIO_MAP[0]));	
	
	//sysclk_enable_peripheral_clock(RTC_TWI);
	
	// Clear System Structure;
	memset((uint8_t*)(&sys),0,sizeof(sys));
8000315a:	e0 a0 07 87 	rcall	80004068 <memset>
8000315e:	1a 96       	mov	r6,sp
80003160:	e0 6a 3a 9a 	mov	r10,15002
80003164:	30 0b       	mov	r11,0
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 0,
		.spi_mode = 0,
		.modfdis = 0
	};
80003166:	48 bc       	lddpc	r12,80003190 <board_init+0x150>
	//sysclk_enable_peripheral_clock(RTC_TWI);
	
	// Clear System Structure;
	memset((uint8_t*)(&sys),0,sizeof(sys));
	
	memset(&dataToSend, 0, sizeof(dataToSend));
80003168:	e0 a0 07 80 	rcall	80004068 <memset>
8000316c:	2f 2d       	sub	sp,-56
8000316e:	d8 32       	popm	r0-r7,pc
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	9a ac       	ld.uh	r12,sp[0x4]
}
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	9b 20       	st.w	sp[0x8],r0
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	9b 10       	st.w	sp[0x4],r0
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	9a b0       	ld.uh	r0,sp[0x6]
80003180:	80 00       	ld.sh	r0,r0[0x0]
80003182:	9a c0       	ld.uh	r0,sp[0x8]
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	9b 2c       	st.w	sp[0x8],r12
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	9b 34       	st.w	sp[0xc],r4
8000318c:	00 00       	add	r0,r0
8000318e:	06 3c       	cp.w	r12,r3
80003190:	00 00       	add	r0,r0
80003192:	2f 61       	sub	r1,-10

80003194 <tc_irq>:
80003194:	d4 31       	pushm	r0-r7,lr
80003196:	20 8d       	sub	sp,32
80003198:	48 98       	lddpc	r8,800031bc <tc_irq+0x28>
8000319a:	70 0a       	ld.w	r10,r8[0x0]
8000319c:	2f fa       	sub	r10,-1
8000319e:	48 99       	lddpc	r9,800031c0 <tc_irq+0x2c>
800031a0:	91 0a       	st.w	r8[0x0],r10
800031a2:	72 0a       	ld.w	r10,r9[0x0]
800031a4:	2f fa       	sub	r10,-1
800031a6:	93 0a       	st.w	r9[0x0],r10
800031a8:	70 09       	ld.w	r9,r8[0x0]
800031aa:	e0 49 3a 97 	cp.w	r9,14999
800031ae:	e0 88 00 0b 	brls	800031c4 <tc_irq+0x30>
800031b2:	d3 03       	ssrf	0x10
800031b4:	e0 a0 02 92 	rcall	800036d8 <SoftwareReset>
800031b8:	c1 08       	rjmp	800031d8 <tc_irq+0x44>
800031ba:	d7 03       	nop
800031bc:	00 00       	add	r0,r0
800031be:	05 f4       	ld.ub	r4,r2[0x7]
800031c0:	00 00       	add	r0,r0
800031c2:	05 ec       	ld.ub	r12,r2[0x6]
800031c4:	70 08       	ld.w	r8,r8[0x0]
800031c6:	31 49       	mov	r9,20
800031c8:	f0 09 0d 08 	divu	r8,r8,r9
800031cc:	30 0c       	mov	r12,0
800031ce:	f0 cb ff ec 	sub	r11,r8,-20
800031d2:	5c 7b       	castu.h	r11
800031d4:	fe b0 f8 08 	rcall	800021e4 <ChangeBlink>
800031d8:	4c 98       	lddpc	r8,800032fc <tc_irq+0x168>
800031da:	11 87       	ld.ub	r7,r8[0x0]
800031dc:	58 07       	cp.w	r7,0
800031de:	c1 70       	breq	8000320c <tc_irq+0x78>
	else
	{
		ChangeBlink(0,ping_timeout/20+20);
	}
	
	if(timestamp_valid)
800031e0:	4c 86       	lddpc	r6,80003300 <tc_irq+0x16c>
800031e2:	8c 08       	ld.sh	r8,r6[0x0]
	{
		b_msec+=10;
800031e4:	2f 68       	sub	r8,-10
800031e6:	ac 08       	st.h	r6[0x0],r8
800031e8:	31 48       	mov	r8,20
800031ea:	8c 0b       	ld.sh	r11,r6[0x0]
}XB_DATA_BFR_t;

volatile XB_DATA_BFR_t dataToSend;


__attribute__((__interrupt__)) static void tc_irq(void)
800031ec:	5c 7b       	castu.h	r11
	
	if(timestamp_valid)
	{
		b_msec+=10;
		
		if (b_msec % SEND_INTERVAL_IN_MS == 0) {
800031ee:	f6 08 0d 0a 	divu	r10,r11,r8
}XB_DATA_BFR_t;

volatile XB_DATA_BFR_t dataToSend;


__attribute__((__interrupt__)) static void tc_irq(void)
800031f2:	16 98       	mov	r8,r11
800031f4:	30 05       	mov	r5,0
800031f6:	8c 09       	ld.sh	r9,r6[0x0]
800031f8:	ea 08 19 00 	cp.h	r8,r5
800031fc:	5f 07       	sreq	r7
800031fe:	e0 68 03 e8 	mov	r8,1000
		b_msec+=10;
		
		if (b_msec % SEND_INTERVAL_IN_MS == 0) {
			sendSample = true;
		}
		if(b_msec==1000)
80003202:	f0 09 19 00 	cp.h	r9,r8
80003206:	c0 31       	brne	8000320c <tc_irq+0x78>
80003208:	cd 8d       	rcall	800035b8 <add_second_to_date>
8000320a:	ac 05       	st.h	r6[0x0],r5
		{
			add_second_to_date();
8000320c:	30 0b       	mov	r11,0
8000320e:	fe 7c 38 00 	mov	r12,-51200
			b_msec = 0;
		}	
	}		
	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80003212:	fe b0 fd 10 	rcall	80002c32 <tc_read_sr>
80003216:	fe b0 f7 99 	rcall	80002148 <HandleButtons>
8000321a:	fe b0 f7 ef 	rcall	800021f8 <HandleLeds>
	
	HandleButtons();
8000321e:	fe b0 f9 5b 	rcall	800024d4 <wifi_empty>
	HandleLeds();
80003222:	e0 80 00 e5 	breq	800033ec <tc_irq+0x258>
	
	if(!wifi_empty()) return;
80003226:	4b 88       	lddpc	r8,80003304 <tc_irq+0x170>
80003228:	30 19       	mov	r9,1
8000322a:	f1 38 00 84 	ld.ub	r8,r8[132]
	
	if(sys.log.smpl_enable == 1 && temp_block != 1) {
8000322e:	f2 08 18 00 	cp.b	r8,r9
80003232:	e0 81 00 b2 	brne	80003396 <tc_irq+0x202>
80003236:	4b 59       	lddpc	r9,80003308 <tc_irq+0x174>
80003238:	13 89       	ld.ub	r9,r9[0x0]
8000323a:	f0 09 18 00 	cp.b	r9,r8
8000323e:	e0 80 00 ac 	breq	80003396 <tc_irq+0x202>
80003242:	4b 38       	lddpc	r8,8000330c <tc_irq+0x178>
80003244:	11 88       	ld.ub	r8,r8[0x0]
80003246:	58 08       	cp.w	r8,0
		if (startSample == true) {
80003248:	c0 70       	breq	80003256 <tc_irq+0xc2>
8000324a:	e0 6a 05 dc 	mov	r10,1500
8000324e:	30 0b       	mov	r11,0
			memset(out_str, 0, sizeof(out_str));	
80003250:	4b 0c       	lddpc	r12,80003310 <tc_irq+0x17c>
80003252:	e0 a0 07 0b 	rcall	80004068 <memset>
80003256:	30 09       	mov	r9,0
80003258:	4a d8       	lddpc	r8,8000330c <tc_irq+0x178>
8000325a:	e0 6c ff f8 	mov	r12,65528
		}
		startSample = false;
8000325e:	b0 89       	st.b	r8[0x0],r9

		data_sample[0]= (adc_sample(ADC_CH0)>>1);
80003260:	fe b0 fa 20 	rcall	800026a0 <adc_sample>
	
	if(sys.log.smpl_enable == 1 && temp_block != 1) {
		if (startSample == true) {
			memset(out_str, 0, sizeof(out_str));	
		}
		startSample = false;
80003264:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf

		data_sample[0]= (adc_sample(ADC_CH0)>>1);
80003268:	4a b5       	lddpc	r5,80003314 <tc_irq+0x180>
8000326a:	aa 0c       	st.h	r5[0x0],r12
8000326c:	e0 6c ff f9 	mov	r12,65529
80003270:	fe b0 fa 18 	rcall	800026a0 <adc_sample>
		data_sample[1]= (adc_sample(ADC_CH1)>>1);
80003274:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf
80003278:	aa 1c       	st.h	r5[0x2],r12
8000327a:	e0 6c ff fa 	mov	r12,65530
8000327e:	fe b0 fa 11 	rcall	800026a0 <adc_sample>
		data_sample[2]= (adc_sample(ADC_CH2)>>1);
80003282:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf
80003286:	aa 2c       	st.h	r5[0x4],r12
80003288:	e0 6c ff fb 	mov	r12,65531
8000328c:	fe b0 fa 0a 	rcall	800026a0 <adc_sample>
		data_sample[3]= (adc_sample(ADC_CH3)>>1);
80003290:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf
80003294:	aa 3c       	st.h	r5[0x6],r12
80003296:	e0 6c ff fc 	mov	r12,65532
8000329a:	fe b0 fa 03 	rcall	800026a0 <adc_sample>
		data_sample[4]= (adc_sample(ADC_CH4)>>1);
8000329e:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf
800032a2:	aa 4c       	st.h	r5[0x8],r12
800032a4:	e0 6c ff fd 	mov	r12,65533
800032a8:	fe b0 f9 fc 	rcall	800026a0 <adc_sample>
		data_sample[5]= (adc_sample(ADC_CH5)>>1);
800032ac:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf
800032b0:	aa 5c       	st.h	r5[0xa],r12
800032b2:	e0 6c ff fe 	mov	r12,65534
800032b6:	fe b0 f9 f5 	rcall	800026a0 <adc_sample>
		data_sample[6]= (adc_sample(ADC_CH6)>>1);
800032ba:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf
800032be:	aa 6c       	st.h	r5[0xc],r12
800032c0:	e0 6c ff ff 	mov	r12,65535
800032c4:	fe b0 f9 ee 	rcall	800026a0 <adc_sample>
		data_sample[7]= (adc_sample(ADC_CH7)>>1);
800032c8:	49 48       	lddpc	r8,80003318 <tc_irq+0x184>
800032ca:	f9 dc c0 2f 	bfextu	r12,r12,0x1,0xf

//		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#\n\r",
	
		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#",
800032ce:	48 da       	lddpc	r10,80003300 <tc_irq+0x16c>
		data_sample[2]= (adc_sample(ADC_CH2)>>1);
		data_sample[3]= (adc_sample(ADC_CH3)>>1);
		data_sample[4]= (adc_sample(ADC_CH4)>>1);
		data_sample[5]= (adc_sample(ADC_CH5)>>1);
		data_sample[6]= (adc_sample(ADC_CH6)>>1);
		data_sample[7]= (adc_sample(ADC_CH7)>>1);
800032d0:	aa 7c       	st.h	r5[0xe],r12
800032d2:	49 3b       	lddpc	r11,8000331c <tc_irq+0x188>

//		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#\n\r",
	
		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#",
800032d4:	70 09       	ld.w	r9,r8[0x0]
		data_sample[2]= (adc_sample(ADC_CH2)>>1);
		data_sample[3]= (adc_sample(ADC_CH3)>>1);
		data_sample[4]= (adc_sample(ADC_CH4)>>1);
		data_sample[5]= (adc_sample(ADC_CH5)>>1);
		data_sample[6]= (adc_sample(ADC_CH6)>>1);
		data_sample[7]= (adc_sample(ADC_CH7)>>1);
800032d6:	49 3c       	lddpc	r12,80003320 <tc_irq+0x18c>

//		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#\n\r",
	
		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#",
800032d8:	8a 28       	ld.sh	r8,r5[0x4]
800032da:	8a 00       	ld.sh	r0,r5[0x0]
800032dc:	8a 71       	ld.sh	r1,r5[0xe]
								b_month,b_day,b_year,b_hour,b_min,b_sec,b_msec,
								data_sample[R1],data_sample[R2],data_sample[R3],data_sample[R4],
								data_sample[F1],data_sample[F2],PING_TIMEOUT,ping_timeout);		
800032de:	8a 52       	ld.sh	r2,r5[0xa]
800032e0:	8a 33       	ld.sh	r3,r5[0x6]

//		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#\n\r",
	
		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#",
								b_month,b_day,b_year,b_hour,b_min,b_sec,b_msec,
								data_sample[R1],data_sample[R2],data_sample[R3],data_sample[R4],
800032e2:	8a 14       	ld.sh	r4,r5[0x2]
800032e4:	94 05       	ld.sh	r5,r10[0x0]
800032e6:	49 0a       	lddpc	r10,80003324 <tc_irq+0x190>
800032e8:	15 8a       	ld.ub	r10,r10[0x0]
		data_sample[6]= (adc_sample(ADC_CH6)>>1);
		data_sample[7]= (adc_sample(ADC_CH7)>>1);

//		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#\n\r",
	
		sprintf(&out_str[strlen(out_str)],"<S:%02u-%02u-%02u_%02u:%02u:%02u.%03u,%u,%u,%u,%u,%u,%u,%u,%u#",
800032ea:	17 8b       	ld.ub	r11,r11[0x0]
800032ec:	19 8c       	ld.ub	r12,r12[0x0]
800032ee:	50 7c       	stdsp	sp[0x1c],r12
800032f0:	48 ec       	lddpc	r12,80003328 <tc_irq+0x194>
800032f2:	19 8c       	ld.ub	r12,r12[0x0]
800032f4:	50 6c       	stdsp	sp[0x18],r12
800032f6:	48 ec       	lddpc	r12,8000332c <tc_irq+0x198>
800032f8:	c1 c8       	rjmp	80003330 <tc_irq+0x19c>
800032fa:	d7 03       	nop
800032fc:	00 00       	add	r0,r0
800032fe:	06 00       	add	r0,r3
80003300:	00 00       	add	r0,r0
80003302:	05 fa       	ld.ub	r10,r2[0x7]
80003304:	00 00       	add	r0,r0
80003306:	06 3c       	cp.w	r12,r3
80003308:	00 00       	add	r0,r0
8000330a:	05 f0       	ld.ub	r0,r2[0x7]
8000330c:	00 00       	add	r0,r0
8000330e:	00 04       	add	r4,r0
80003310:	00 00       	add	r0,r0
80003312:	6a c4       	ld.w	r4,r5[0x30]
80003314:	00 00       	add	r0,r0
80003316:	26 b8       	sub	r8,107
80003318:	00 00       	add	r0,r0
8000331a:	05 f4       	ld.ub	r4,r2[0x7]
8000331c:	00 00       	add	r0,r0
8000331e:	05 fd       	ld.ub	sp,r2[0x7]
80003320:	00 00       	add	r0,r0
80003322:	05 f1       	ld.ub	r1,r2[0x7]
80003324:	00 00       	add	r0,r0
80003326:	05 fc       	ld.ub	r12,r2[0x7]
80003328:	00 00       	add	r0,r0
8000332a:	05 fe       	ld.ub	lr,r2[0x7]
8000332c:	00 00       	add	r0,r0
8000332e:	05 f8       	ld.ub	r8,r2[0x7]
80003330:	19 8c       	ld.ub	r12,r12[0x0]
80003332:	50 5c       	stdsp	sp[0x14],r12
80003334:	4b 0c       	lddpc	r12,800033f4 <tc_irq+0x260>
80003336:	19 8c       	ld.ub	r12,r12[0x0]
80003338:	4b 06       	lddpc	r6,800033f8 <tc_irq+0x264>
8000333a:	50 4c       	stdsp	sp[0x10],r12
8000333c:	50 3b       	stdsp	sp[0xc],r11
8000333e:	50 2a       	stdsp	sp[0x8],r10
80003340:	50 09       	stdsp	sp[0x0],r9
80003342:	50 18       	stdsp	sp[0x4],r8
80003344:	0c 9c       	mov	r12,r6
80003346:	e0 a0 06 f4 	rcall	8000412e <strlen>
8000334a:	40 09       	lddsp	r9,sp[0x0]
8000334c:	1a d9       	st.w	--sp,r9
8000334e:	40 28       	lddsp	r8,sp[0x8]
80003350:	5c 78       	castu.h	r8
80003352:	e0 69 3a 98 	mov	r9,15000
80003356:	5c 70       	castu.h	r0
80003358:	1a d9       	st.w	--sp,r9
8000335a:	5c 71       	castu.h	r1
8000335c:	1a d8       	st.w	--sp,r8
8000335e:	5c 72       	castu.h	r2
80003360:	1a d0       	st.w	--sp,r0
80003362:	5c 73       	castu.h	r3
80003364:	1a d1       	st.w	--sp,r1
80003366:	5c 74       	castu.h	r4
80003368:	1a d2       	st.w	--sp,r2
8000336a:	5c 75       	castu.h	r5
8000336c:	1a d3       	st.w	--sp,r3
8000336e:	1a d4       	st.w	--sp,r4
80003370:	1a d5       	st.w	--sp,r5
80003372:	40 ba       	lddsp	r10,sp[0x2c]
80003374:	1a da       	st.w	--sp,r10
80003376:	40 db       	lddsp	r11,sp[0x34]
80003378:	1a db       	st.w	--sp,r11
8000337a:	41 28       	lddsp	r8,sp[0x48]
8000337c:	1a d8       	st.w	--sp,r8
8000337e:	41 28       	lddsp	r8,sp[0x48]
80003380:	1a d8       	st.w	--sp,r8
80003382:	41 28       	lddsp	r8,sp[0x48]
80003384:	1a d8       	st.w	--sp,r8
80003386:	41 28       	lddsp	r8,sp[0x48]
80003388:	ec 0c 00 0c 	add	r12,r6,r12
8000338c:	1a d8       	st.w	--sp,r8
8000338e:	49 cb       	lddpc	r11,800033fc <tc_irq+0x268>
80003390:	e0 a0 06 74 	rcall	80004078 <sprintf>
80003394:	2f 1d       	sub	sp,-60
80003396:	49 b8       	lddpc	r8,80003400 <tc_irq+0x26c>
80003398:	30 19       	mov	r9,1
8000339a:	f1 38 00 84 	ld.ub	r8,r8[132]
8000339e:	f2 08 18 00 	cp.b	r8,r9
800033a2:	c2 51       	brne	800033ec <tc_irq+0x258>
800033a4:	49 89       	lddpc	r9,80003404 <tc_irq+0x270>
800033a6:	13 89       	ld.ub	r9,r9[0x0]
800033a8:	f0 09 18 00 	cp.b	r9,r8
800033ac:	c2 00       	breq	800033ec <tc_irq+0x258>
800033ae:	58 07       	cp.w	r7,0
800033b0:	c1 e0       	breq	800033ec <tc_irq+0x258>
800033b2:	e0 68 05 dc 	mov	r8,1500
800033b6:	49 57       	lddpc	r7,80003408 <tc_irq+0x274>
800033b8:	49 0b       	lddpc	r11,800033f8 <tc_irq+0x264>
								b_month,b_day,b_year,b_hour,b_min,b_sec,b_msec,
								data_sample[R1],data_sample[R2],data_sample[R3],data_sample[R4],
								data_sample[F1],data_sample[F2],PING_TIMEOUT,ping_timeout);		
	}
	
	if(sys.log.smpl_enable == 1 && temp_block != 1 && sendSample)
800033ba:	ef 3c 3a 99 	ld.ub	r12,r7[15001]
800033be:	b1 3c       	mul	r12,r8
800033c0:	ee 0c 00 0c 	add	r12,r7,r12
800033c4:	e0 a0 06 ac 	rcall	8000411c <strcpy>
800033c8:	ef 38 3a 99 	ld.ub	r8,r7[15001]
800033cc:	2f f8       	sub	r8,-1
800033ce:	ef 68 3a 99 	st.b	r7[15001],r8
800033d2:	30 98       	mov	r8,9
800033d4:	ef 39 3a 99 	ld.ub	r9,r7[15001]
	{
		//LedPulse(0);	

		strcpy(dataToSend.buffer[dataToSend.tail], out_str);
800033d8:	f0 09 18 00 	cp.b	r9,r8
800033dc:	e0 88 00 05 	brls	800033e6 <tc_irq+0x252>
800033e0:	30 08       	mov	r8,0
800033e2:	ef 68 3a 99 	st.b	r7[15001],r8
800033e6:	30 19       	mov	r9,1
800033e8:	48 98       	lddpc	r8,8000340c <tc_irq+0x278>
800033ea:	b0 89       	st.b	r8[0x0],r9
		dataToSend.tail++;
800033ec:	2f 8d       	sub	sp,-32
800033ee:	d4 32       	popm	r0-r7,lr
800033f0:	d6 03       	rete
800033f2:	d7 03       	nop
800033f4:	00 00       	add	r0,r0
        if (dataToSend.tail >= MAX_QUEUE_SIZE) {
800033f6:	05 ff       	ld.ub	pc,r2[0x7]
800033f8:	00 00       	add	r0,r0
800033fa:	6a c4       	ld.w	r4,r5[0x30]
800033fc:	80 00       	ld.sh	r0,r0[0x0]
800033fe:	9a c8       	ld.uh	r8,sp[0x8]
80003400:	00 00       	add	r0,r0
80003402:	06 3c       	cp.w	r12,r3
	        dataToSend.tail = 0;
80003404:	00 00       	add	r0,r0
80003406:	05 f0       	ld.ub	r0,r2[0x7]
80003408:	00 00       	add	r0,r0
//        if (tail == head-1) {
//            LOG.debug("Queue full!!");
//        }
			
		//usart_write_line(&XB_USART,out_str);
		startSample = true;
8000340a:	2f 61       	sub	r1,-10
8000340c:	00 00       	add	r0,r0
8000340e:	00 04       	add	r4,r0

80003410 <send_data>:
		SoftwareReset();
		smpl_cntr = 0;
	}
	*/
	
} 
80003410:	d4 31       	pushm	r0-r7,lr
80003412:	fa cd 7b 14 	sub	sp,sp,31508
80003416:	30 03       	mov	r3,0
80003418:	fb 43 7b 10 	st.w	sp[31504],r3
8000341c:	d3 03       	ssrf	0x10
8000341e:	4a 47       	lddpc	r7,800034ac <send_data+0x9c>
80003420:	1a 96       	mov	r6,sp
80003422:	e0 65 05 dc 	mov	r5,1500
80003426:	30 94       	mov	r4,9
80003428:	c1 f8       	rjmp	80003466 <send_data+0x56>
8000342a:	ef 3b 3a 98 	ld.ub	r11,r7[15000]
8000342e:	fa fc 7b 10 	ld.w	r12,sp[31504]
80003432:	ab 3b       	mul	r11,r5
80003434:	ab 3c       	mul	r12,r5
80003436:	ee 0b 00 0b 	add	r11,r7,r11
8000343a:	ec 0c 00 0c 	add	r12,r6,r12
8000343e:	e0 a0 06 6f 	rcall	8000411c <strcpy>
	
	//XB_DATA_BFR_t dataToSendCopy = dataToSend;
	cpu_irq_disable();
	while (dataToSend.head != dataToSend.tail) {
		strcpy(sendString[sendIdx], dataToSend.buffer[dataToSend.head]);
		dataToSend.head++;
80003442:	ef 38 3a 98 	ld.ub	r8,r7[15000]
80003446:	2f f8       	sub	r8,-1
80003448:	ef 68 3a 98 	st.b	r7[15000],r8
		if (dataToSend.head >= MAX_QUEUE_SIZE) {
8000344c:	ef 38 3a 98 	ld.ub	r8,r7[15000]
80003450:	e8 08 18 00 	cp.b	r8,r4
80003454:	e0 88 00 04 	brls	8000345c <send_data+0x4c>
			dataToSend.head = 0;
80003458:	ef 63 3a 98 	st.b	r7[15000],r3
		}
		sendIdx++;
8000345c:	fa f8 7b 10 	ld.w	r8,sp[31504]
80003460:	2f f8       	sub	r8,-1
80003462:	fb 48 7b 10 	st.w	sp[31504],r8
	}
	*/
	
	//XB_DATA_BFR_t dataToSendCopy = dataToSend;
	cpu_irq_disable();
	while (dataToSend.head != dataToSend.tail) {
80003466:	ef 39 3a 98 	ld.ub	r9,r7[15000]
8000346a:	ef 38 3a 99 	ld.ub	r8,r7[15001]
8000346e:	f0 09 18 00 	cp.b	r9,r8
80003472:	cd c1       	brne	8000342a <send_data+0x1a>
		if (dataToSend.head >= MAX_QUEUE_SIZE) {
			dataToSend.head = 0;
		}
		sendIdx++;
	}
	cpu_irq_enable();
80003474:	d5 03       	csrf	0x10
80003476:	30 07       	mov	r7,0
80003478:	1a 96       	mov	r6,sp

	for (int idx=0; idx<sendIdx; idx++) {
		sprintf(targetString, "%s\n\r", sendString[idx]);
8000347a:	fa c5 8a d0 	sub	r5,sp,-30000
		}
		sendIdx++;
	}
	cpu_irq_enable();

	for (int idx=0; idx<sendIdx; idx++) {
8000347e:	c0 d8       	rjmp	80003498 <send_data+0x88>
		sprintf(targetString, "%s\n\r", sendString[idx]);
80003480:	1a d6       	st.w	--sp,r6
80003482:	e0 a0 05 fb 	rcall	80004078 <sprintf>
		usart_write_line(&XB_USART, targetString);
80003486:	0a 9b       	mov	r11,r5
		}
		sendIdx++;
	}
	cpu_irq_enable();

	for (int idx=0; idx<sendIdx; idx++) {
80003488:	2f f7       	sub	r7,-1
		sprintf(targetString, "%s\n\r", sendString[idx]);
		usart_write_line(&XB_USART, targetString);
8000348a:	fe 7c 14 00 	mov	r12,-60416
		}
		sendIdx++;
	}
	cpu_irq_enable();

	for (int idx=0; idx<sendIdx; idx++) {
8000348e:	ec c6 fa 24 	sub	r6,r6,-1500
		sprintf(targetString, "%s\n\r", sendString[idx]);
		usart_write_line(&XB_USART, targetString);
80003492:	fe b0 fc 92 	rcall	80002db6 <usart_write_line>
		}
		sendIdx++;
	}
	cpu_irq_enable();

	for (int idx=0; idx<sendIdx; idx++) {
80003496:	2f fd       	sub	sp,-4
		sprintf(targetString, "%s\n\r", sendString[idx]);
80003498:	48 6b       	lddpc	r11,800034b0 <send_data+0xa0>
8000349a:	0a 9c       	mov	r12,r5
		}
		sendIdx++;
	}
	cpu_irq_enable();

	for (int idx=0; idx<sendIdx; idx++) {
8000349c:	fa f8 7b 10 	ld.w	r8,sp[31504]
800034a0:	10 37       	cp.w	r7,r8
800034a2:	ce f5       	brlt	80003480 <send_data+0x70>
		sprintf(targetString, "%s\n\r", sendString[idx]);
		usart_write_line(&XB_USART, targetString);
	}

	return;
}
800034a4:	fe 3d 84 ec 	sub	sp,-31508
800034a8:	d8 32       	popm	r0-r7,pc
800034aa:	d7 03       	nop
800034ac:	00 00       	add	r0,r0
800034ae:	2f 61       	sub	r1,-10
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	9b 08       	st.w	sp[0x0],r8

800034b4 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034b4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800034b8:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
800034ba:	fe 7a 0c 00 	mov	r10,-62464
800034be:	75 58       	ld.w	r8,r10[0x54]
800034c0:	ed b8 00 06 	bld	r8,0x6
800034c4:	cf d1       	brne	800034be <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
800034c6:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800034c8:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
800034ca:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800034ce:	e0 2c f3 f8 	sub	r12,62456
800034d2:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
800034d4:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800034d6:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034d8:	e3 b9 00 00 	mtsr	0x0,r9

	cpu_irq_restore(flags);
}
800034dc:	5e fc       	retal	r12
800034de:	d7 03       	nop

800034e0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
800034e0:	d4 21       	pushm	r4-r7,lr
800034e2:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034e4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800034e8:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
800034ea:	48 a8       	lddpc	r8,80003510 <sysclk_enable_pbb_module+0x30>
800034ec:	11 89       	ld.ub	r9,r8[0x0]
800034ee:	30 08       	mov	r8,0
800034f0:	f0 09 18 00 	cp.b	r9,r8
800034f4:	c0 41       	brne	800034fc <sysclk_enable_pbb_module+0x1c>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800034f6:	30 2b       	mov	r11,2
800034f8:	30 1c       	mov	r12,1
800034fa:	cd df       	rcall	800034b4 <sysclk_priv_enable_module>
800034fc:	48 58       	lddpc	r8,80003510 <sysclk_enable_pbb_module+0x30>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
800034fe:	11 89       	ld.ub	r9,r8[0x0]
80003500:	2f f9       	sub	r9,-1
80003502:	b0 89       	st.b	r8[0x0],r9
80003504:	e3 b6 00 00 	mtsr	0x0,r6
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003508:	30 3c       	mov	r12,3

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000350a:	0e 9b       	mov	r11,r7
8000350c:	cd 4f       	rcall	800034b4 <sysclk_priv_enable_module>
8000350e:	d8 22       	popm	r4-r7,pc
80003510:	00 00       	add	r0,r0
}
80003512:	06 02       	add	r2,r3

80003514 <T.67>:
80003514:	fe 78 0c 00 	mov	r8,-62464
80003518:	71 59       	ld.w	r9,r8[0x54]
8000351a:	ed b9 00 00 	bld	r9,0x0

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000351e:	5e 0c       	reteq	r12
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80003520:	71 59       	ld.w	r9,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80003522:	ed b9 00 07 	bld	r9,0x7
80003526:	c1 00       	breq	80003546 <T.67+0x32>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003528:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000352c:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
8000352e:	e0 69 01 07 	mov	r9,263
80003532:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80003534:	70 09       	ld.w	r9,r8[0x0]
80003536:	a3 a9       	sbr	r9,0x2
80003538:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000353a:	e3 ba 00 00 	mtsr	0x0,r10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000353e:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80003540:	ed b9 00 07 	bld	r9,0x7
80003544:	cf d1       	brne	8000353e <T.67+0x2a>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80003546:	fe 78 0c 00 	mov	r8,-62464
8000354a:	e0 69 02 0d 	mov	r9,525
8000354e:	ea 19 3f 0f 	orh	r9,0x3f0f

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003552:	10 9a       	mov	r10,r8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80003554:	91 89       	st.w	r8[0x20],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003556:	75 58       	ld.w	r8,r10[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80003558:	ed b8 00 00 	bld	r8,0x0
8000355c:	cf d1       	brne	80003556 <T.67+0x42>
8000355e:	5e fc       	retal	r12

80003560 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80003560:	d4 21       	pushm	r4-r7,lr

	if (pbb_shift > 0)
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
80003562:	fc 18 80 80 	movh	r8,0x8080
80003566:	fe 77 0c 00 	mov	r7,-62464
8000356a:	8f 18       	st.w	r7[0x4],r8
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000356c:	cd 4f       	rcall	80003514 <T.67>
8000356e:	e0 6c 6c 00 	mov	r12,27648
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80003572:	ea 1c 02 dc 	orh	r12,0x2dc
80003576:	fe b0 f8 c7 	rcall	80002704 <flashc_set_bus_freq>
8000357a:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000357e:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80003580:	6e 08       	ld.w	r8,r7[0x0]
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80003582:	e0 18 ff fc 	andl	r8,0xfffc
80003586:	a1 b8       	sbr	r8,0x1
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80003588:	8f 08       	st.w	r7[0x0],r8
	AVR32_PM.mcctrl = mcctrl;
8000358a:	e3 b9 00 00 	mtsr	0x0,r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000358e:	e0 78 00 02 	mov	r8,65538
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
80003592:	8f 28       	st.w	r7[0x8],r8
80003594:	e0 68 01 0b 	mov	r8,267
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80003598:	8f 48       	st.w	r7[0x10],r8
8000359a:	d8 22       	popm	r4-r7,pc

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000359c:	00 00       	add	r0,r0
	...

800035a0 <check_leap_year>:
	}		
}

uint8_t check_leap_year(uint8_t y)
{
	if((y%4 == 0) && (y%100 != 0))	return 1;
800035a0:	f1 dc c0 02 	bfextu	r8,r12,0x0,0x2
800035a4:	c0 20       	breq	800035a8 <check_leap_year+0x8>
800035a6:	5e fd       	retal	0
800035a8:	36 4b       	mov	r11,100
800035aa:	f8 0b 0d 0a 	divu	r10,r12,r11
800035ae:	16 9c       	mov	r12,r11
800035b0:	f0 0c 18 00 	cp.b	r12,r8
800035b4:	5f 1c       	srne	r12
	else
	{
		return 0;
	}
}
800035b6:	5e fc       	retal	r12

800035b8 <add_second_to_date>:
		xb_write(s[i]);
	}
}

void add_second_to_date(void)
{	
800035b8:	d4 01       	pushm	lr
	b_sec++;
800035ba:	4c 18       	lddpc	r8,800036bc <add_second_to_date+0x104>
800035bc:	11 89       	ld.ub	r9,r8[0x0]
800035be:	2f f9       	sub	r9,-1
800035c0:	b0 89       	st.b	r8[0x0],r9
	if(b_sec == 60)	
800035c2:	33 cb       	mov	r11,60
800035c4:	11 89       	ld.ub	r9,r8[0x0]
800035c6:	f6 09 18 00 	cp.b	r9,r11
800035ca:	c7 81       	brne	800036ba <add_second_to_date+0x102>
800035cc:	4b d9       	lddpc	r9,800036c0 <add_second_to_date+0x108>
	{
		b_min++;
800035ce:	13 8a       	ld.ub	r10,r9[0x0]
800035d0:	2f fa       	sub	r10,-1
800035d2:	b2 8a       	st.b	r9[0x0],r10
800035d4:	30 0a       	mov	r10,0
		b_sec = 0;
800035d6:	b0 8a       	st.b	r8[0x0],r10
800035d8:	13 88       	ld.ub	r8,r9[0x0]
		if(b_min == 60)
800035da:	f6 08 18 00 	cp.b	r8,r11
800035de:	c6 e1       	brne	800036ba <add_second_to_date+0x102>
800035e0:	4b 98       	lddpc	r8,800036c4 <add_second_to_date+0x10c>
		{
			b_hour++;
800035e2:	11 8b       	ld.ub	r11,r8[0x0]
800035e4:	2f fb       	sub	r11,-1
800035e6:	b0 8b       	st.b	r8[0x0],r11
800035e8:	b2 8a       	st.b	r9[0x0],r10
			b_min = 0;
800035ea:	31 89       	mov	r9,24
			if(b_hour == 24)
800035ec:	11 8b       	ld.ub	r11,r8[0x0]
800035ee:	f2 0b 18 00 	cp.b	r11,r9
800035f2:	c6 41       	brne	800036ba <add_second_to_date+0x102>
800035f4:	4b 59       	lddpc	r9,800036c8 <add_second_to_date+0x110>
			{
				b_day++;
800035f6:	13 8b       	ld.ub	r11,r9[0x0]
800035f8:	2f fb       	sub	r11,-1
800035fa:	b2 8b       	st.b	r9[0x0],r11
800035fc:	b0 8a       	st.b	r8[0x0],r10
				b_hour = 0;
800035fe:	4b 48       	lddpc	r8,800036cc <add_second_to_date+0x114>
				
				if(b_month == 2)
80003600:	30 2a       	mov	r10,2
80003602:	11 8b       	ld.ub	r11,r8[0x0]
80003604:	f4 0b 18 00 	cp.b	r11,r10
80003608:	c1 b1       	brne	8000363e <add_second_to_date+0x86>
8000360a:	13 8b       	ld.ub	r11,r9[0x0]
				{
					if((b_day >28) && (b_lpyear!=1))
8000360c:	31 ca       	mov	r10,28
8000360e:	f4 0b 18 00 	cp.b	r11,r10
80003612:	e0 88 00 0c 	brls	8000362a <add_second_to_date+0x72>
80003616:	4a fa       	lddpc	r10,800036d0 <add_second_to_date+0x118>
80003618:	15 8b       	ld.ub	r11,r10[0x0]
8000361a:	30 1a       	mov	r10,1
8000361c:	f4 0b 18 00 	cp.b	r11,r10
80003620:	c0 50       	breq	8000362a <add_second_to_date+0x72>
80003622:	30 3b       	mov	r11,3
					{
						b_month = 3;
80003624:	b0 8b       	st.b	r8[0x0],r11
80003626:	b2 8a       	st.b	r9[0x0],r10
						b_day = 1;
80003628:	d8 02       	popm	pc
				b_day++;
				b_hour = 0;
				
				if(b_month == 2)
				{
					if((b_day >28) && (b_lpyear!=1))
8000362a:	4a 88       	lddpc	r8,800036c8 <add_second_to_date+0x110>
					{
						b_month = 3;
						b_day = 1;
					}
					else if(b_day >29)
8000362c:	31 d9       	mov	r9,29
8000362e:	11 8a       	ld.ub	r10,r8[0x0]
80003630:	f2 0a 18 00 	cp.b	r10,r9
80003634:	e0 88 00 43 	brls	800036ba <add_second_to_date+0x102>
80003638:	30 3a       	mov	r10,3
					{
						b_month = 3;
8000363a:	4a 59       	lddpc	r9,800036cc <add_second_to_date+0x114>
8000363c:	c1 f8       	rjmp	8000367a <add_second_to_date+0xc2>
8000363e:	11 8b       	ld.ub	r11,r8[0x0]
						b_day = 1;
					}
				}
				else if (b_month == 4 ||
80003640:	30 4a       	mov	r10,4
80003642:	f4 0b 18 00 	cp.b	r11,r10
80003646:	c1 00       	breq	80003666 <add_second_to_date+0xae>
80003648:	11 8b       	ld.ub	r11,r8[0x0]
				b_month == 6 ||
8000364a:	30 6a       	mov	r10,6
					{
						b_month = 3;
						b_day = 1;
					}
				}
				else if (b_month == 4 ||
8000364c:	f4 0b 18 00 	cp.b	r11,r10
80003650:	c0 b0       	breq	80003666 <add_second_to_date+0xae>
80003652:	11 8b       	ld.ub	r11,r8[0x0]
				b_month == 6 ||
				b_month == 9 ||
80003654:	30 9a       	mov	r10,9
					{
						b_month = 3;
						b_day = 1;
					}
				}
				else if (b_month == 4 ||
80003656:	f4 0b 18 00 	cp.b	r11,r10
8000365a:	c0 60       	breq	80003666 <add_second_to_date+0xae>
8000365c:	11 8b       	ld.ub	r11,r8[0x0]
				b_month == 6 ||
				b_month == 9 ||
				b_month == 11)
8000365e:	30 ba       	mov	r10,11
					{
						b_month = 3;
						b_day = 1;
					}
				}
				else if (b_month == 4 ||
80003660:	f4 0b 18 00 	cp.b	r11,r10
80003664:	c0 e1       	brne	80003680 <add_second_to_date+0xc8>
80003666:	49 98       	lddpc	r8,800036c8 <add_second_to_date+0x110>
				b_month == 6 ||
				b_month == 9 ||
				b_month == 11)
				{
					if(b_day >30)
80003668:	31 e9       	mov	r9,30
8000366a:	11 8a       	ld.ub	r10,r8[0x0]
8000366c:	f2 0a 18 00 	cp.b	r10,r9
80003670:	e0 88 00 25 	brls	800036ba <add_second_to_date+0x102>
80003674:	49 69       	lddpc	r9,800036cc <add_second_to_date+0x114>
					{
						b_month++;
80003676:	13 8a       	ld.ub	r10,r9[0x0]
80003678:	2f fa       	sub	r10,-1
8000367a:	b2 8a       	st.b	r9[0x0],r10
8000367c:	30 19       	mov	r9,1
						b_day = 1;
8000367e:	c1 28       	rjmp	800036a2 <add_second_to_date+0xea>
80003680:	11 8b       	ld.ub	r11,r8[0x0]
					}					
				}
				else if(b_month != 12)
80003682:	30 ca       	mov	r10,12
80003684:	f4 0b 18 00 	cp.b	r11,r10
80003688:	c0 f0       	breq	800036a6 <add_second_to_date+0xee>
8000368a:	13 89       	ld.ub	r9,r9[0x0]
				{
					if(b_day > 31)
8000368c:	31 f8       	mov	r8,31
8000368e:	f0 09 18 00 	cp.b	r9,r8
80003692:	e0 88 00 14 	brls	800036ba <add_second_to_date+0x102>
80003696:	48 e8       	lddpc	r8,800036cc <add_second_to_date+0x114>
					{
						b_month++;
80003698:	11 89       	ld.ub	r9,r8[0x0]
8000369a:	2f f9       	sub	r9,-1
8000369c:	b0 89       	st.b	r8[0x0],r9
8000369e:	30 19       	mov	r9,1
						b_day = 1;
800036a0:	48 a8       	lddpc	r8,800036c8 <add_second_to_date+0x110>
800036a2:	b0 89       	st.b	r8[0x0],r9
800036a4:	d8 02       	popm	pc
800036a6:	48 c9       	lddpc	r9,800036d4 <add_second_to_date+0x11c>
					}
				}
				else
				{
					b_year++;
800036a8:	13 8a       	ld.ub	r10,r9[0x0]
800036aa:	2f fa       	sub	r10,-1
800036ac:	b2 8a       	st.b	r9[0x0],r10
800036ae:	30 1a       	mov	r10,1
					b_month = 1;
800036b0:	b0 8a       	st.b	r8[0x0],r10
800036b2:	13 8c       	ld.ub	r12,r9[0x0]
					
					b_lpyear = check_leap_year(b_year);
800036b4:	c7 6f       	rcall	800035a0 <check_leap_year>
800036b6:	48 78       	lddpc	r8,800036d0 <add_second_to_date+0x118>
800036b8:	b0 8c       	st.b	r8[0x0],r12
800036ba:	d8 02       	popm	pc
800036bc:	00 00       	add	r0,r0
800036be:	05 fc       	ld.ub	r12,r2[0x7]
800036c0:	00 00       	add	r0,r0
800036c2:	05 fd       	ld.ub	sp,r2[0x7]
800036c4:	00 00       	add	r0,r0
800036c6:	05 f1       	ld.ub	r1,r2[0x7]
800036c8:	00 00       	add	r0,r0
800036ca:	05 f8       	ld.ub	r8,r2[0x7]
800036cc:	00 00       	add	r0,r0
800036ce:	05 ff       	ld.ub	pc,r2[0x7]
800036d0:	00 00       	add	r0,r0
800036d2:	06 01       	add	r1,r3
800036d4:	00 00       	add	r0,r0
800036d6:	05 fe       	ld.ub	lr,r2[0x7]

800036d8 <SoftwareReset>:
800036d8:	d4 21       	pushm	r4-r7,lr
800036da:	20 2d       	sub	sp,8
800036dc:	d3 03       	ssrf	0x10
800036de:	30 09       	mov	r9,0
	
	cpu_irq_disable();
	// Enable the WDT with a 0s period (fastest way to get a Watchdog reset).
	wdt_opt_t opt = {
		.us_timeout_period = 500000
	};
800036e0:	fa cc ff f8 	sub	r12,sp,-8
800036e4:	e6 78 a1 20 	mov	r8,500000
800036e8:	b9 29       	st.d	--r12,r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800036ea:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800036ee:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800036f0:	fe 76 0c 00 	mov	r6,-62464
800036f4:	6c 08       	ld.w	r8,r6[0x0]
800036f6:	e0 18 ff fc 	andl	r8,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800036fa:	a1 a8       	sbr	r8,0x0
	AVR32_PM.mcctrl = mcctrl;
800036fc:	8d 08       	st.w	r6[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800036fe:	e3 b9 00 00 	mtsr	0x0,r9
	sysclk_set_source(SYSCLK_SRC_OSC0);
	wdt_enable(&opt);
80003702:	1a 9c       	mov	r12,sp
80003704:	fe b0 f4 b0 	rcall	80002064 <wdt_enable>

static inline void pll_disable(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = 0;
80003708:	30 08       	mov	r8,0
8000370a:	8d 88       	st.w	r6[0x20],r8
8000370c:	8d 98       	st.w	r6[0x24],r8
8000370e:	c0 08       	rjmp	8000370e <SoftwareReset+0x36>

80003710 <main>:
80003710:	d4 31       	pushm	r0-r7,lr
80003712:	fa cd 01 54 	sub	sp,sp,340


uint8_t wifi_state = WAIT_FOR_MESSAGE;
int main (void)
{
	wdt_disable();
80003716:	fe b0 f4 9b 	rcall	8000204c <wdt_disable>
	// Local Variables
	
	//uint32_t i;
	
	uint8_t state = 0;
	wifi_state = WAIT_FOR_MESSAGE;
8000371a:	4c 78       	lddpc	r8,80003834 <main+0x124>
8000371c:	30 07       	mov	r7,0
8000371e:	b0 87       	st.b	r8[0x0],r7
	
	t_cpu_time led_tmr;
	uint16_t num_files;
	
	// Initialize Clocks
	sysclk_init();
80003720:	c2 0f       	rcall	80003560 <sysclk_init>
80003722:	4c 68       	lddpc	r8,80003838 <main+0x128>
	delay_init(sysclk_get_cpu_hz());
	
	sys.log.fs_chg = true;
80003724:	30 19       	mov	r9,1
80003726:	f1 67 00 98 	st.b	r8[152],r7
	sys.log.fs_err = false;
8000372a:	f1 69 00 97 	st.b	r8[151],r9
	
	// Initialize Clocks
	sysclk_init();
	delay_init(sysclk_get_cpu_hz());
	
	sys.log.fs_chg = true;
8000372e:	33 6b       	mov	r11,54
	sys.log.fs_err = false;
	
	// Initialize UI
	InitButton(BTN_1,AVR32_PIN_PB22);
80003730:	30 0c       	mov	r12,0
80003732:	fe b0 f4 e5 	rcall	800020fc <InitButton>
80003736:	33 2b       	mov	r11,50
	InitButton(BTN_2,AVR32_PIN_PB18);
80003738:	30 1c       	mov	r12,1
8000373a:	fe b0 f4 e1 	rcall	800020fc <InitButton>
8000373e:	33 3b       	mov	r11,51
	InitLed(0,LED_ONB);
80003740:	30 0c       	mov	r12,0
80003742:	fe b0 f6 af 	rcall	800024a0 <InitLed>
80003746:	33 4b       	mov	r11,52
	InitLed(1,LED_LOG);
80003748:	30 1c       	mov	r12,1
8000374a:	fe b0 f6 ab 	rcall	800024a0 <InitLed>
8000374e:	33 5b       	mov	r11,53
	InitLed(2,LED_ZGB);
80003750:	30 2c       	mov	r12,2
80003752:	fe b0 f6 a7 	rcall	800024a0 <InitLed>
80003756:	30 08       	mov	r8,0
	
	LedOn(0);
80003758:	30 19       	mov	r9,1
8000375a:	10 9a       	mov	r10,r8
8000375c:	10 9b       	mov	r11,r8
8000375e:	10 9c       	mov	r12,r8
80003760:	fe b0 f6 16 	rcall	8000238c <LedCtrl>
80003764:	30 08       	mov	r8,0
	LedOn(1);
80003766:	30 19       	mov	r9,1
80003768:	10 9a       	mov	r10,r8
8000376a:	10 9b       	mov	r11,r8
8000376c:	12 9c       	mov	r12,r9
8000376e:	fe b0 f6 0f 	rcall	8000238c <LedCtrl>
80003772:	30 08       	mov	r8,0
	LedOn(2);
80003774:	30 19       	mov	r9,1
80003776:	10 9a       	mov	r10,r8
80003778:	10 9b       	mov	r11,r8
8000377a:	30 2c       	mov	r12,2
8000377c:	fe b0 f6 08 	rcall	8000238c <LedCtrl>
80003780:	e1 b7 00 42 	mfsr	r7,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003784:	e0 68 03 e8 	mov	r8,1000
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003788:	30 09       	mov	r9,0
8000378a:	e0 6a c3 e7 	mov	r10,50151
8000378e:	ea 1a 5a 0b 	orh	r10,0x5a0b
80003792:	31 6b       	mov	r11,22
80003794:	e0 a0 02 8d 	rcall	80003cae <__avr32_udiv64>
80003798:	ee 0a 00 0a 	add	r10,r7,r10
8000379c:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800037a0:	14 37       	cp.w	r7,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800037a2:	e0 88 00 05 	brls	800037ac <main+0x9c>
800037a6:	0e 38       	cp.w	r8,r7
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800037a8:	cf a2       	brcc	8000379c <main+0x8c>
800037aa:	c0 48       	rjmp	800037b2 <main+0xa2>
800037ac:	0e 38       	cp.w	r8,r7
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800037ae:	e0 83 01 d3 	brlo	80003b54 <main+0x444>
800037b2:	14 38       	cp.w	r8,r10
800037b4:	e0 8b 01 d0 	brhi	80003b54 <main+0x444>
800037b8:	cf 2b       	rjmp	8000379c <main+0x8c>
800037ba:	49 f4       	lddpc	r4,80003834 <main+0x124>
			usart_putchar(&XB_USART,x);
		}
		*/
		
		// State Machine
		switch(wifi_state)
800037bc:	30 16       	mov	r6,1
800037be:	09 88       	ld.ub	r8,r4[0x0]
800037c0:	ec 08 18 00 	cp.b	r8,r6
800037c4:	c2 f0       	breq	80003822 <main+0x112>
800037c6:	c0 b3       	brcs	800037dc <main+0xcc>
800037c8:	30 29       	mov	r9,2
800037ca:	f2 08 18 00 	cp.b	r8,r9
800037ce:	c6 90       	breq	800038a0 <main+0x190>
800037d0:	30 39       	mov	r9,3
800037d2:	f2 08 18 00 	cp.b	r8,r9
800037d6:	e0 81 01 9d 	brne	80003b10 <main+0x400>
800037da:	c9 d8       	rjmp	80003914 <main+0x204>
800037dc:	d5 03       	csrf	0x10
		{
			case WAIT_FOR_MESSAGE:
				cpu_irq_enable();
800037de:	30 08       	mov	r8,0
				sync_error = 0;
				temp_block = 0;
800037e0:	49 77       	lddpc	r7,8000383c <main+0x12c>
800037e2:	fa cc fe c8 	sub	r12,sp,-312
				rtn = wifi_read(&x);
800037e6:	ae 88       	st.b	r7[0x0],r8
		switch(wifi_state)
		{
			case WAIT_FOR_MESSAGE:
				cpu_irq_enable();
				sync_error = 0;
				temp_block = 0;
800037e8:	fe b0 f6 82 	rcall	800024ec <wifi_read>
				rtn = wifi_read(&x);
800037ec:	e0 80 01 95 	breq	80003b16 <main+0x406>
				if(rtn)
800037f0:	ae 86       	st.b	r7[0x0],r6
				{
					//cpu_irq_disable();
					temp_block = 1;
800037f2:	33 e8       	mov	r8,62
					if((char)x == '>') 
800037f4:	44 e9       	lddsp	r9,sp[0x138]
800037f6:	f0 09 18 00 	cp.b	r9,r8
800037fa:	e0 81 01 8e 	brne	80003b16 <main+0x406>
800037fe:	30 0c       	mov	r12,0
					{
						ping_timeout = 0;
80003800:	49 08       	lddpc	r8,80003840 <main+0x130>
80003802:	31 49       	mov	r9,20
						LedBlink(0,ping_timeout/20+20);
80003804:	91 0c       	st.w	r8[0x0],r12
				{
					//cpu_irq_disable();
					temp_block = 1;
					if((char)x == '>') 
					{
						ping_timeout = 0;
80003806:	70 08       	ld.w	r8,r8[0x0]
						LedBlink(0,ping_timeout/20+20);
80003808:	f0 09 0d 08 	divu	r8,r8,r9
8000380c:	18 97       	mov	r7,r12
						//LedPulse(1);
						wifi_state = MSG_START_RCVD;
8000380e:	2e c8       	sub	r8,-20
					//cpu_irq_disable();
					temp_block = 1;
					if((char)x == '>') 
					{
						ping_timeout = 0;
						LedBlink(0,ping_timeout/20+20);
80003810:	30 29       	mov	r9,2
80003812:	5c 78       	castu.h	r8
80003814:	18 9a       	mov	r10,r12
80003816:	18 9b       	mov	r11,r12
80003818:	0e 95       	mov	r5,r7
						//LedPulse(1);
						wifi_state = MSG_START_RCVD;
8000381a:	fe b0 f5 b9 	rcall	8000238c <LedCtrl>
					//cpu_irq_disable();
					temp_block = 1;
					if((char)x == '>') 
					{
						ping_timeout = 0;
						LedBlink(0,ping_timeout/20+20);
8000381e:	a8 86       	st.b	r4[0x0],r6
						//LedPulse(1);
						wifi_state = MSG_START_RCVD;
80003820:	c7 c9       	rjmp	80003b18 <main+0x408>
						//sys.log.smpl_enable = 0;
						
						data_idx = 0;
						
						break;
80003822:	e1 b6 00 42 	mfsr	r6,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003826:	30 01       	mov	r1,0
					rtn = wifi_read(&x);
					if(rtn)
					{
						
						in_str[data_idx] = x;
						if(x == '\n' || x == '\r')
80003828:	ec 03 00 04 	add	r4,r6,r3
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000382c:	fa c2 fe c8 	sub	r2,sp,-312
				//cpu_irq_enable();
				cpu_set_timeout(cpu_ms_2_cy(100,F_CPU),&wifi_timeout);
				time_exprd = 1;
				while(!cpu_is_timeout(&wifi_timeout))
				{
					rtn = wifi_read(&x);
80003830:	c2 18       	rjmp	80003872 <main+0x162>
				
			case MSG_START_RCVD:
				//cpu_irq_enable();
				cpu_set_timeout(cpu_ms_2_cy(100,F_CPU),&wifi_timeout);
				time_exprd = 1;
				while(!cpu_is_timeout(&wifi_timeout))
80003832:	d7 03       	nop
80003834:	00 00       	add	r0,r0
80003836:	06 03       	add	r3,r3
80003838:	00 00       	add	r0,r0
8000383a:	06 3c       	cp.w	r12,r3
8000383c:	00 00       	add	r0,r0
8000383e:	05 f0       	ld.ub	r0,r2[0x7]
80003840:	00 00       	add	r0,r0
80003842:	05 f4       	ld.ub	r4,r2[0x7]
80003844:	44 e9       	lddsp	r9,sp[0x138]
80003846:	f1 69 fe ac 	st.b	r8[-340],r9
8000384a:	58 a9       	cp.w	r9,10
8000384c:	5f 08       	sreq	r8
8000384e:	58 d9       	cp.w	r9,13
80003850:	5f 09       	sreq	r9
80003852:	10 49       	or	r9,r8
80003854:	ea c8 ff ff 	sub	r8,r5,-1
80003858:	eb d8 c0 08 	bfextu	r5,r8,0x0,0x8
8000385c:	e2 09 18 00 	cp.b	r9,r1
				{
					rtn = wifi_read(&x);
					if(rtn)
					{
						
						in_str[data_idx] = x;
80003860:	c0 90       	breq	80003872 <main+0x162>
80003862:	30 09       	mov	r9,0
80003864:	fa c8 fe ac 	sub	r8,sp,-340
						if(x == '\n' || x == '\r')
80003868:	0a 08       	add	r8,r5
8000386a:	f1 69 fe ac 	st.b	r8[-340],r9
8000386e:	30 29       	mov	r9,2
80003870:	c4 d8       	rjmp	8000390a <main+0x1fa>
80003872:	e1 b8 00 42 	mfsr	r8,0x108
							in_str[data_idx] = 0;
							time_exprd = 0;
							break;
						}
						
						data_idx++;
80003876:	08 36       	cp.w	r6,r4
					rtn = wifi_read(&x);
					if(rtn)
					{
						
						in_str[data_idx] = x;
						if(x == '\n' || x == '\r')
80003878:	e0 88 00 05 	brls	80003882 <main+0x172>
8000387c:	0c 38       	cp.w	r8,r6
						{
							data_idx++;
							in_str[data_idx] = 0;
8000387e:	c0 82       	brcc	8000388e <main+0x17e>
80003880:	c0 48       	rjmp	80003888 <main+0x178>
80003882:	0c 38       	cp.w	r8,r6
80003884:	e0 83 01 ee 	brlo	80003c60 <main+0x550>
80003888:	08 38       	cp.w	r8,r4
					
					
				}
				else
				{
					wifi_state = PARSE_CMD;
8000388a:	e0 8b 01 eb 	brhi	80003c60 <main+0x550>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000388e:	04 9c       	mov	r12,r2
80003890:	fe b0 f6 2e 	rcall	800024ec <wifi_read>
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003894:	fa c8 fe ac 	sub	r8,sp,-340
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003898:	0a 08       	add	r8,r5
8000389a:	58 0c       	cp.w	r12,0
8000389c:	cd 41       	brne	80003844 <main+0x134>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000389e:	ce ab       	rjmp	80003872 <main+0x162>
800038a0:	30 08       	mov	r8,0
800038a2:	30 a2       	mov	r2,10
800038a4:	fb 68 01 36 	st.b	sp[310],r8
800038a8:	33 a4       	mov	r4,58
				//cpu_irq_enable();
				cpu_set_timeout(cpu_ms_2_cy(100,F_CPU),&wifi_timeout);
				time_exprd = 1;
				while(!cpu_is_timeout(&wifi_timeout))
				{
					rtn = wifi_read(&x);
800038aa:	30 08       	mov	r8,0
800038ac:	30 d6       	mov	r6,13
800038ae:	10 9a       	mov	r10,r8
					if(rtn)
					{
						
						in_str[data_idx] = x;
800038b0:	30 9c       	mov	r12,9
800038b2:	c0 58       	rjmp	800038bc <main+0x1ac>
800038b4:	f7 69 ff d8 	st.b	r11[-40],r9
				cpu_set_timeout(cpu_ms_2_cy(100,F_CPU),&wifi_timeout);
				time_exprd = 1;
				while(!cpu_is_timeout(&wifi_timeout))
				{
					rtn = wifi_read(&x);
					if(rtn)
800038b8:	f1 de c0 08 	bfextu	r8,lr,0x0,0x8
				
			case PARSE_CMD:
				//usart_write_line(&XB_USART,"STATE:PARSE_CMD\n\r");
				parse_idx = 0;
				cmd_val = 0;
				cmd_str[10]=0;
800038bc:	fa cb fe ac 	sub	r11,sp,-340
800038c0:	f0 ce ff ff 	sub	lr,r8,-1
				while
					(in_str[parse_idx] != ':' 
800038c4:	10 0b       	add	r11,r8
				
			case PARSE_CMD:
				//usart_write_line(&XB_USART,"STATE:PARSE_CMD\n\r");
				parse_idx = 0;
				cmd_val = 0;
				cmd_str[10]=0;
800038c6:	f7 39 fe ac 	ld.ub	r9,r11[-340]
				while
					(in_str[parse_idx] != ':' 
800038ca:	e4 09 18 00 	cp.b	r9,r2
800038ce:	5f 10       	srne	r0
					&& in_str[parse_idx]!='\n' 
					&& in_str[parse_idx] != 0 
					&& in_str[parse_idx] != '\r'
					&& parse_idx < 10)
					{
						cmd_str[parse_idx] = in_str[parse_idx];
800038d0:	e8 09 18 00 	cp.b	r9,r4
						parse_idx++;
800038d4:	5f 11       	srne	r1
800038d6:	e1 e1 00 01 	and	r1,r0,r1
				//usart_write_line(&XB_USART,"STATE:PARSE_CMD\n\r");
				parse_idx = 0;
				cmd_val = 0;
				cmd_str[10]=0;
				while
					(in_str[parse_idx] != ':' 
800038da:	f4 01 18 00 	cp.b	r1,r10
					&& in_str[parse_idx] != 0 
					&& in_str[parse_idx] != '\r'
					&& parse_idx < 10)
					{
						cmd_str[parse_idx] = in_str[parse_idx];
						parse_idx++;
800038de:	c0 e0       	breq	800038fa <main+0x1ea>
				//usart_write_line(&XB_USART,"STATE:PARSE_CMD\n\r");
				parse_idx = 0;
				cmd_val = 0;
				cmd_str[10]=0;
				while
					(in_str[parse_idx] != ':' 
800038e0:	58 09       	cp.w	r9,0
800038e2:	c0 c0       	breq	800038fa <main+0x1ea>
800038e4:	f8 08 18 00 	cp.b	r8,r12
800038e8:	5f 81       	srls	r1
800038ea:	ec 09 18 00 	cp.b	r9,r6
800038ee:	5f 10       	srne	r0
800038f0:	e1 e1 00 01 	and	r1,r0,r1
800038f4:	f4 01 18 00 	cp.b	r1,r10
800038f8:	cd e1       	brne	800038b4 <main+0x1a4>
800038fa:	fa c9 fe ac 	sub	r9,sp,-340
800038fe:	f2 08 00 08 	add	r8,r9,r8
80003902:	30 09       	mov	r9,0
80003904:	f1 69 ff d8 	st.b	r8[-40],r9
80003908:	30 39       	mov	r9,3
8000390a:	48 28       	lddpc	r8,80003910 <main+0x200>
8000390c:	b0 89       	st.b	r8[0x0],r9
8000390e:	c0 59       	rjmp	80003b18 <main+0x408>
80003910:	00 00       	add	r0,r0
80003912:	06 03       	add	r3,r3
80003914:	fa c4 fe d4 	sub	r4,sp,-300
					{
						cmd_str[parse_idx] = in_str[parse_idx];
						parse_idx++;
						
					}
					cmd_str[parse_idx]=0;
80003918:	4d 4b       	lddpc	r11,80003a68 <main+0x358>
8000391a:	08 9c       	mov	r12,r4
8000391c:	e0 a0 03 cc 	rcall	800040b4 <strcasecmp>
80003920:	e0 81 00 c6 	brne	80003aac <main+0x39c>
				//usart_write_line(&XB_USART,in_str);
				//usart_putchar(&XB_USART,(x));
				//usart_write_line(&XB_USART,cmd_str);
				//usart_putchar(&XB_USART,x);
				wifi_state = HANDLE_CMD;
80003924:	1b d8       	ld.ub	r8,sp[0x5]
80003926:	fb 68 01 4c 	st.b	sp[332],r8
				break;
8000392a:	1b e8       	ld.ub	r8,sp[0x6]
8000392c:	fb 68 01 4d 	st.b	sp[333],r8
80003930:	fb 38 00 08 	ld.ub	r8,sp[8]
				
			case HANDLE_CMD:
				if(!strcmpi(cmd_str,"SYNC"))
80003934:	fb 68 01 50 	st.b	sp[336],r8
80003938:	fb 38 00 09 	ld.ub	r8,sp[9]
8000393c:	fb 68 01 51 	st.b	sp[337],r8
80003940:	fb 38 00 0b 	ld.ub	r8,sp[11]
				{
					month_str[0] = in_str[5];
80003944:	fb 68 01 48 	st.b	sp[328],r8
80003948:	fb 38 00 0c 	ld.ub	r8,sp[12]
					month_str[1] = in_str[6];
8000394c:	fb 68 01 49 	st.b	sp[329],r8
					month_str[2] = 0;
					day_str[0] = in_str[8];
80003950:	fb 38 00 0e 	ld.ub	r8,sp[14]
80003954:	fb 68 01 44 	st.b	sp[324],r8
					day_str[1] = in_str[9];
80003958:	fb 38 00 0f 	ld.ub	r8,sp[15]
8000395c:	fb 68 01 45 	st.b	sp[325],r8
					day_str[2] = 0;
					year_str[0] = in_str[11];
80003960:	fb 38 00 11 	ld.ub	r8,sp[17]
80003964:	fb 68 01 40 	st.b	sp[320],r8
					year_str[1] = in_str[12];
80003968:	fb 38 00 12 	ld.ub	r8,sp[18]
8000396c:	fb 68 01 41 	st.b	sp[321],r8
					year_str[2] = 0;
					hour_str[0] = in_str[14];
80003970:	fb 38 00 14 	ld.ub	r8,sp[20]
80003974:	fb 68 01 3c 	st.b	sp[316],r8
					hour_str[1] = in_str[15];
80003978:	fb 38 00 15 	ld.ub	r8,sp[21]
8000397c:	fb 6c 01 3e 	st.b	sp[318],r12
					hour_str[2] = 0;
					min_str[0] = in_str[17];
80003980:	fb 6c 01 4e 	st.b	sp[334],r12
80003984:	fb 6c 01 52 	st.b	sp[338],r12
					min_str[1] = in_str[18];
80003988:	fb 6c 01 4a 	st.b	sp[330],r12
8000398c:	fb 6c 01 46 	st.b	sp[326],r12
					min_str[2] = 0;
					sec_str[0] = in_str[20];
80003990:	fb 6c 01 42 	st.b	sp[322],r12
80003994:	fb 68 01 3d 	st.b	sp[317],r8
					sec_str[1] = in_str[21];
80003998:	fa cc fe b0 	sub	r12,sp,-336
					sec_str[2] = 0;
8000399c:	e0 a0 02 bc 	rcall	80003f14 <atoi>
			case HANDLE_CMD:
				if(!strcmpi(cmd_str,"SYNC"))
				{
					month_str[0] = in_str[5];
					month_str[1] = in_str[6];
					month_str[2] = 0;
800039a0:	4b 38       	lddpc	r8,80003a6c <main+0x35c>
800039a2:	b0 8c       	st.b	r8[0x0],r12
					day_str[0] = in_str[8];
					day_str[1] = in_str[9];
					day_str[2] = 0;
800039a4:	11 89       	ld.ub	r9,r8[0x0]
800039a6:	58 09       	cp.w	r9,0
					year_str[0] = in_str[11];
					year_str[1] = in_str[12];
					year_str[2] = 0;
800039a8:	c0 70       	breq	800039b6 <main+0x2a6>
800039aa:	11 89       	ld.ub	r9,r8[0x0]
					hour_str[0] = in_str[14];
					hour_str[1] = in_str[15];
					hour_str[2] = 0;
800039ac:	31 f8       	mov	r8,31
800039ae:	f0 09 18 00 	cp.b	r9,r8
					min_str[0] = in_str[17];
					min_str[1] = in_str[18];
					min_str[2] = 0;
800039b2:	e0 88 00 03 	brls	800039b8 <main+0x2a8>
					sec_str[0] = in_str[20];
					sec_str[1] = in_str[21];
800039b6:	30 17       	mov	r7,1
					sec_str[2] = 0;
										
					b_day = atoi(day_str);
800039b8:	fa cc fe b4 	sub	r12,sp,-332
800039bc:	e0 a0 02 ac 	rcall	80003f14 <atoi>
800039c0:	4a c8       	lddpc	r8,80003a70 <main+0x360>
800039c2:	b0 8c       	st.b	r8[0x0],r12
					if(b_day<1 || b_day >31)	sync_error = 1;
800039c4:	11 89       	ld.ub	r9,r8[0x0]
800039c6:	58 09       	cp.w	r9,0
800039c8:	c0 70       	breq	800039d6 <main+0x2c6>
800039ca:	11 89       	ld.ub	r9,r8[0x0]
800039cc:	30 c8       	mov	r8,12
800039ce:	f0 09 18 00 	cp.b	r9,r8
800039d2:	e0 88 00 03 	brls	800039d8 <main+0x2c8>
800039d6:	30 17       	mov	r7,1
					b_month = atoi(month_str);
800039d8:	fa cc fe b8 	sub	r12,sp,-328
800039dc:	e0 a0 02 9c 	rcall	80003f14 <atoi>
800039e0:	4a 56       	lddpc	r6,80003a74 <main+0x364>
800039e2:	36 39       	mov	r9,99
					if(b_month<1 || b_month >12)	sync_error = 1;
800039e4:	ac 8c       	st.b	r6[0x0],r12
800039e6:	0d 88       	ld.ub	r8,r6[0x0]
800039e8:	fa cc fe bc 	sub	r12,sp,-324
800039ec:	f0 09 18 00 	cp.b	r9,r8
800039f0:	f9 b7 03 01 	movlo	r7,1
800039f4:	e0 a0 02 90 	rcall	80003f14 <atoi>
					b_year = atoi(year_str);
800039f8:	31 79       	mov	r9,23
800039fa:	4a 08       	lddpc	r8,80003a78 <main+0x368>
800039fc:	b0 8c       	st.b	r8[0x0],r12
800039fe:	11 88       	ld.ub	r8,r8[0x0]
80003a00:	fa cc fe c0 	sub	r12,sp,-320
80003a04:	f0 09 18 00 	cp.b	r9,r8
					if(b_year >99)	sync_error = 1;
					b_hour = atoi(hour_str);
80003a08:	f9 b7 03 01 	movlo	r7,1
					b_day = atoi(day_str);
					if(b_day<1 || b_day >31)	sync_error = 1;
					b_month = atoi(month_str);
					if(b_month<1 || b_month >12)	sync_error = 1;
					b_year = atoi(year_str);
					if(b_year >99)	sync_error = 1;
80003a0c:	e0 a0 02 84 	rcall	80003f14 <atoi>
80003a10:	49 b8       	lddpc	r8,80003a7c <main+0x36c>
80003a12:	b0 8c       	st.b	r8[0x0],r12
					b_hour = atoi(hour_str);
80003a14:	11 88       	ld.ub	r8,r8[0x0]
80003a16:	33 b4       	mov	r4,59
					if(b_hour >23) sync_error = 1; 
80003a18:	fa cc fe c4 	sub	r12,sp,-316
					if(b_day<1 || b_day >31)	sync_error = 1;
					b_month = atoi(month_str);
					if(b_month<1 || b_month >12)	sync_error = 1;
					b_year = atoi(year_str);
					if(b_year >99)	sync_error = 1;
					b_hour = atoi(hour_str);
80003a1c:	f0 04 18 00 	cp.b	r4,r8
					if(b_hour >23) sync_error = 1; 
					b_min = atoi(min_str);
80003a20:	f9 b7 03 01 	movlo	r7,1
					b_month = atoi(month_str);
					if(b_month<1 || b_month >12)	sync_error = 1;
					b_year = atoi(year_str);
					if(b_year >99)	sync_error = 1;
					b_hour = atoi(hour_str);
					if(b_hour >23) sync_error = 1; 
80003a24:	e0 a0 02 78 	rcall	80003f14 <atoi>
80003a28:	49 68       	lddpc	r8,80003a80 <main+0x370>
80003a2a:	b0 8c       	st.b	r8[0x0],r12
					b_min = atoi(min_str);
80003a2c:	11 88       	ld.ub	r8,r8[0x0]
80003a2e:	f0 04 18 00 	cp.b	r4,r8
80003a32:	f9 b7 03 01 	movlo	r7,1
					if(b_min > 59) sync_error = 1;
80003a36:	49 48       	lddpc	r8,80003a84 <main+0x374>
					b_sec = atoi(sec_str);
80003a38:	30 04       	mov	r4,0
80003a3a:	b0 04       	st.h	r8[0x0],r4
					b_year = atoi(year_str);
					if(b_year >99)	sync_error = 1;
					b_hour = atoi(hour_str);
					if(b_hour >23) sync_error = 1; 
					b_min = atoi(min_str);
					if(b_min > 59) sync_error = 1;
80003a3c:	0d 8c       	ld.ub	r12,r6[0x0]
80003a3e:	fe b0 fd b1 	rcall	800035a0 <check_leap_year>
80003a42:	49 28       	lddpc	r8,80003a88 <main+0x378>
					b_sec = atoi(sec_str);
80003a44:	b0 8c       	st.b	r8[0x0],r12
80003a46:	49 26       	lddpc	r6,80003a8c <main+0x37c>
80003a48:	30 18       	mov	r8,1
80003a4a:	f0 07 18 00 	cp.b	r7,r8
					if(b_sec > 59) sync_error = 1;
80003a4e:	c2 71       	brne	80003a9c <main+0x38c>
80003a50:	49 0b       	lddpc	r11,80003a90 <main+0x380>
80003a52:	fe 7c 14 00 	mov	r12,-60416
					b_msec = 0;
80003a56:	fe b0 f9 b0 	rcall	80002db6 <usart_write_line>
80003a5a:	48 fb       	lddpc	r11,80003a94 <main+0x384>
					b_lpyear = check_leap_year(b_year);
80003a5c:	fe 7c 14 00 	mov	r12,-60416
80003a60:	fe b0 f9 ab 	rcall	80002db6 <usart_write_line>
80003a64:	c1 a8       	rjmp	80003a98 <main+0x388>
80003a66:	d7 03       	nop
					if(sync_error == 1)
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	9e cc       	ld.uh	r12,pc[0x8]
80003a6c:	00 00       	add	r0,r0
80003a6e:	05 f8       	ld.ub	r8,r2[0x7]
					{
						usart_write_line(&XB_USART,"For Realz\n\r");
80003a70:	00 00       	add	r0,r0
80003a72:	05 ff       	ld.ub	pc,r2[0x7]
80003a74:	00 00       	add	r0,r0
80003a76:	05 fe       	ld.ub	lr,r2[0x7]
80003a78:	00 00       	add	r0,r0
						usart_write_line(&XB_USART,"<ERROR:BadSync\n\r");
80003a7a:	05 f1       	ld.ub	r1,r2[0x7]
80003a7c:	00 00       	add	r0,r0
80003a7e:	05 fd       	ld.ub	sp,r2[0x7]
80003a80:	00 00       	add	r0,r0
80003a82:	05 fc       	ld.ub	r12,r2[0x7]
80003a84:	00 00       	add	r0,r0
80003a86:	05 fa       	ld.ub	r10,r2[0x7]
80003a88:	00 00       	add	r0,r0
80003a8a:	06 01       	add	r1,r3
80003a8c:	00 00       	add	r0,r0
80003a8e:	06 00       	add	r0,r3
80003a90:	80 00       	ld.sh	r0,r0[0x0]
80003a92:	9e d4       	ld.uh	r4,pc[0xa]
80003a94:	80 00       	ld.sh	r0,r0[0x0]
80003a96:	9e e0       	ld.uh	r0,pc[0xc]
80003a98:	ac 84       	st.b	r6[0x0],r4
80003a9a:	c3 18       	rjmp	80003afc <main+0x3ec>
80003a9c:	ac 88       	st.b	r6[0x0],r8
80003a9e:	4a 5b       	lddpc	r11,80003b30 <main+0x420>
80003aa0:	fe 7c 14 00 	mov	r12,-60416
80003aa4:	fe b0 f9 89 	rcall	80002db6 <usart_write_line>
80003aa8:	30 07       	mov	r7,0
80003aaa:	c2 98       	rjmp	80003afc <main+0x3ec>
80003aac:	4a 2b       	lddpc	r11,80003b34 <main+0x424>
80003aae:	08 9c       	mov	r12,r4
80003ab0:	e0 a0 03 02 	rcall	800040b4 <strcasecmp>
80003ab4:	c1 01       	brne	80003ad4 <main+0x3c4>
80003ab6:	4a 18       	lddpc	r8,80003b38 <main+0x428>
80003ab8:	11 88       	ld.ub	r8,r8[0x0]
80003aba:	58 08       	cp.w	r8,0
80003abc:	c0 a0       	breq	80003ad0 <main+0x3c0>
80003abe:	49 db       	lddpc	r11,80003b30 <main+0x420>
80003ac0:	fe 7c 14 00 	mov	r12,-60416
80003ac4:	fe b0 f9 79 	rcall	80002db6 <usart_write_line>
						
						
						
						//temp_block = 0;
						timestamp_valid = 0;
80003ac8:	49 d8       	lddpc	r8,80003b3c <main+0x42c>
80003aca:	f1 66 00 84 	st.b	r8[132],r6
					else
					{
						timestamp_valid = 1;
						
						//temp_block = 1;
						usart_write_line(&XB_USART,"<OK\n\r");
80003ace:	c1 78       	rjmp	80003afc <main+0x3ec>
80003ad0:	49 cb       	lddpc	r11,80003b40 <main+0x430>
80003ad2:	c1 18       	rjmp	80003af4 <main+0x3e4>
80003ad4:	49 cb       	lddpc	r11,80003b44 <main+0x434>
80003ad6:	08 9c       	mov	r12,r4
80003ad8:	e0 a0 02 ee 	rcall	800040b4 <strcasecmp>
					sprintf(str2,"TIME:%u:%u:%u\n\r",b_hour,b_min,b_sec);
					usart_write_line(&XB_USART,str2);
					*/
					
				}
				else if (!strcmpi(cmd_str,"START"))
80003adc:	c0 61       	brne	80003ae8 <main+0x3d8>
80003ade:	49 88       	lddpc	r8,80003b3c <main+0x42c>
80003ae0:	49 4b       	lddpc	r11,80003b30 <main+0x420>
80003ae2:	f1 6c 00 84 	st.b	r8[132],r12
				{
					if(timestamp_valid)
80003ae6:	c0 78       	rjmp	80003af4 <main+0x3e4>
80003ae8:	08 9c       	mov	r12,r4
80003aea:	49 8b       	lddpc	r11,80003b48 <main+0x438>
80003aec:	e0 a0 02 e4 	rcall	800040b4 <strcasecmp>
					{
						
						usart_write_line(&XB_USART,"<OK\n\r");
80003af0:	c0 61       	brne	80003afc <main+0x3ec>
80003af2:	49 7b       	lddpc	r11,80003b4c <main+0x43c>
80003af4:	fe 7c 14 00 	mov	r12,-60416
						
						sys.log.smpl_enable = 1;
80003af8:	fe b0 f9 5f 	rcall	80002db6 <usart_write_line>
80003afc:	30 09       	mov	r9,0
80003afe:	49 58       	lddpc	r8,80003b50 <main+0x440>
					}
					else
					{
					
						usart_write_line(&XB_USART,"<ERROR:NoSync\n\r");
80003b00:	fa c6 fe c8 	sub	r6,sp,-312
					
					}
				}
				else if (!strcmpi(cmd_str,"STOP"))
80003b04:	b0 89       	st.b	r8[0x0],r9
80003b06:	0c 9c       	mov	r12,r6
80003b08:	fe b0 f4 f2 	rcall	800024ec <wifi_read>
80003b0c:	cf d1       	brne	80003b06 <main+0x3f6>
				{
					sys.log.smpl_enable = 0;				
80003b0e:	c0 58       	rjmp	80003b18 <main+0x408>
					usart_write_line(&XB_USART,"<OK\n\r");
80003b10:	30 08       	mov	r8,0
					
					}
				}
				else if (!strcmpi(cmd_str,"STOP"))
				{
					sys.log.smpl_enable = 0;				
80003b12:	a8 88       	st.b	r4[0x0],r8
80003b14:	c0 28       	rjmp	80003b18 <main+0x408>
80003b16:	30 07       	mov	r7,0
					usart_write_line(&XB_USART,"<OK\n\r");

					
				}
				else if(!strcmpi(cmd_str,"PING"))
80003b18:	48 98       	lddpc	r8,80003b3c <main+0x42c>
80003b1a:	f1 39 00 84 	ld.ub	r9,r8[132]
80003b1e:	30 18       	mov	r8,1
80003b20:	f0 09 18 00 	cp.b	r9,r8
				{
					usart_write_line(&XB_USART,"<PA\n\r");
80003b24:	fe 91 fe 4b 	brne	800037ba <main+0xaa>
80003b28:	fe b0 fc 74 	rcall	80003410 <send_data>
				}

				//while(usart_getchar(&XB_USART)!=USART_FAILURE);
				wifi_state = WAIT_FOR_MESSAGE;
80003b2c:	fe 9f fe 47 	bral	800037ba <main+0xaa>
				while(wifi_read(&x));
80003b30:	80 00       	ld.sh	r0,r0[0x0]
80003b32:	9e f4       	ld.uh	r4,pc[0xe]
				{
					usart_write_line(&XB_USART,"<PA\n\r");
				}

				//while(usart_getchar(&XB_USART)!=USART_FAILURE);
				wifi_state = WAIT_FOR_MESSAGE;
80003b34:	80 00       	ld.sh	r0,r0[0x0]
				while(wifi_read(&x));
80003b36:	9e fc       	ld.uh	r12,pc[0xe]
80003b38:	00 00       	add	r0,r0
80003b3a:	06 00       	add	r0,r3
80003b3c:	00 00       	add	r0,r0
80003b3e:	06 3c       	cp.w	r12,r3
				break;
			default:
				wifi_state = WAIT_FOR_MESSAGE;
80003b40:	80 00       	ld.sh	r0,r0[0x0]
80003b42:	9f 04       	st.w	pc[0x0],r4
80003b44:	80 00       	ld.sh	r0,r0[0x0]
80003b46:	9f 14       	st.w	pc[0x4],r4
				break;
		}
		
		if (sys.log.smpl_enable == 1) {
80003b48:	80 00       	ld.sh	r0,r0[0x0]
80003b4a:	9f 1c       	st.w	pc[0x4],r12
80003b4c:	80 00       	ld.sh	r0,r0[0x0]
80003b4e:	9f 24       	st.w	pc[0x8],r4
80003b50:	00 00       	add	r0,r0
80003b52:	06 03       	add	r3,r3
80003b54:	30 08       	mov	r8,0
80003b56:	10 99       	mov	r9,r8
			send_data();
80003b58:	10 9a       	mov	r10,r8
80003b5a:	10 9b       	mov	r11,r8
80003b5c:	10 9c       	mov	r12,r8
80003b5e:	fe b0 f4 17 	rcall	8000238c <LedCtrl>
80003b62:	30 08       	mov	r8,0
80003b64:	30 1c       	mov	r12,1
80003b66:	10 99       	mov	r9,r8
80003b68:	10 9a       	mov	r10,r8
80003b6a:	10 9b       	mov	r11,r8
80003b6c:	fe b0 f4 10 	rcall	8000238c <LedCtrl>
80003b70:	30 08       	mov	r8,0
80003b72:	30 2c       	mov	r12,2
80003b74:	10 99       	mov	r9,r8
80003b76:	10 9a       	mov	r10,r8
80003b78:	10 9b       	mov	r11,r8
80003b7a:	fe b0 f4 09 	rcall	8000238c <LedCtrl>
80003b7e:	fe b0 fa 61 	rcall	80003040 <board_init>
80003b82:	fe b0 f4 cf 	rcall	80002520 <xb_usart_init>
80003b86:	30 18       	mov	r8,1
80003b88:	30 06       	mov	r6,0
80003b8a:	4b a5       	lddpc	r5,80003c70 <main+0x560>
80003b8c:	30 07       	mov	r7,0
80003b8e:	30 02       	mov	r2,0
80003b90:	30 03       	mov	r3,0
80003b92:	aa 88       	st.b	r5[0x0],r8
	
	LedOn(0);
	LedOn(1);
	LedOn(2);
	delay_s(2);
	LedOff(0);
80003b94:	eb 66 00 95 	st.b	r5[149],r6
80003b98:	eb 66 00 96 	st.b	r5[150],r6
80003b9c:	eb 66 00 72 	st.b	r5[114],r6
80003ba0:	eb 66 13 f0 	st.b	r5[5104],r6
	LedOff(1);
80003ba4:	eb 47 00 90 	st.w	r5[144],r7
80003ba8:	eb 67 00 94 	st.b	r5[148],r7
80003bac:	54 e7       	stdsp	sp[0x138],r7
80003bae:	fa e3 00 00 	st.d	sp[0],r2
	LedOff(2);
80003bb2:	e0 6a 01 24 	mov	r10,292
80003bb6:	0e 9b       	mov	r11,r7
80003bb8:	fa cc ff f8 	sub	r12,sp,-8
80003bbc:	e0 a0 02 56 	rcall	80004068 <memset>
	
	
	// Initialize Peripherals
	board_init();
80003bc0:	4a d8       	lddpc	r8,80003c74 <main+0x564>
	
	// Delay to allow xbee to boot
	//delay_s(2);
	
	// Initialize and enable xbee
	xb_usart_init();
80003bc2:	fa e3 01 2c 	st.d	sp[300],r2
	//cpu_irq_enable();
	
	uint8_t d[7];
	
	// Reset State Machine
	sys.state = IDLE;
80003bc6:	b0 86       	st.b	r8[0x0],r6
	sys.log.mode = LOG_DISABLED;
80003bc8:	eb 66 00 84 	st.b	r5[132],r6
	sys.log.status = LOG_OFF;
	sys.com.conn = false;
	sys.diag.trgr = 0;
	sys.log.new_lvl_avg = 0;
80003bcc:	fb 57 01 34 	st.h	sp[308],r7
	uint32_t cntr5 = 0;
	
	int x = 0;
	uint8_t data_idx = 0;
	
	char in_str[300] = "";
80003bd0:	fb 66 01 36 	st.b	sp[310],r6
	
	uint8_t d[7];
	
	// Reset State Machine
	sys.state = IDLE;
	sys.log.mode = LOG_DISABLED;
80003bd4:	fb 66 01 51 	st.b	sp[337],r6
	sys.log.status = LOG_OFF;
80003bd8:	fb 66 01 52 	st.b	sp[338],r6
	sys.com.conn = false;
80003bdc:	fb 66 01 4d 	st.b	sp[333],r6
	sys.diag.trgr = 0;
80003be0:	fb 66 01 4e 	st.b	sp[334],r6
	sys.log.new_lvl_avg = 0;
80003be4:	fb 66 01 49 	st.b	sp[329],r6
	sys.log.new_threshold = 0;
80003be8:	fb 66 01 4a 	st.b	sp[330],r6
	
	uint8_t i = 0;
	
	uint32_t cntr5 = 0;
	
	int x = 0;
80003bec:	fb 66 01 45 	st.b	sp[325],r6
	uint8_t data_idx = 0;
	
	char in_str[300] = "";
80003bf0:	fb 66 01 46 	st.b	sp[326],r6
80003bf4:	fb 66 01 41 	st.b	sp[321],r6
80003bf8:	fb 66 01 42 	st.b	sp[322],r6
80003bfc:	fb 66 01 3d 	st.b	sp[317],r6
	char year_str[3] = "";
	char hour_str[3] = "";
	char min_str[3] = "";
	char sec_str[3] = "";
	
	timestamp_valid = 0;
80003c00:	fb 66 01 3e 	st.b	sp[318],r6
	char in_str[300] = "";
	uint8_t time_exprd = 0;
	
	uint8_t parse_idx = 0;
	uint8_t cmd_val = 0;
	char cmd_str[11]="";
80003c04:	fe c8 06 68 	sub	r8,pc,1640
	
	//LedBlink(0,100);
	
	sys.log.smpl_enable = 0;
80003c08:	11 88       	ld.ub	r8,r8[0x0]
80003c0a:	fb 68 01 3c 	st.b	sp[316],r8
	char in_str[300] = "";
	uint8_t time_exprd = 0;
	
	uint8_t parse_idx = 0;
	uint8_t cmd_val = 0;
	char cmd_str[11]="";
80003c0e:	fb 68 01 50 	st.b	sp[336],r8
80003c12:	fb 68 01 4c 	st.b	sp[332],r8
	
	sys.log.smpl_enable = 0;
	char hld = 0;
	uint8_t rtn = 0;
	
	char day_str[3] = "";
80003c16:	fb 68 01 48 	st.b	sp[328],r8
80003c1a:	fb 68 01 44 	st.b	sp[324],r8
	char month_str[3] = "";
80003c1e:	fb 68 01 40 	st.b	sp[320],r8
80003c22:	49 68       	lddpc	r8,80003c78 <main+0x568>
	char year_str[3] = "";
80003c24:	b0 86       	st.b	r8[0x0],r6
80003c26:	d5 03       	csrf	0x10
80003c28:	49 58       	lddpc	r8,80003c7c <main+0x56c>
80003c2a:	91 07       	st.w	r8[0x0],r7
	char hour_str[3] = "";
80003c2c:	70 08       	ld.w	r8,r8[0x0]
80003c2e:	30 29       	mov	r9,2
80003c30:	0e 9a       	mov	r10,r7
80003c32:	0e 9b       	mov	r11,r7
	char min_str[3] = "";
80003c34:	0e 9c       	mov	r12,r7
80003c36:	31 45       	mov	r5,20
80003c38:	f0 05 0d 04 	divu	r4,r8,r5
	char sec_str[3] = "";
80003c3c:	e8 c8 ff ec 	sub	r8,r4,-20
80003c40:	5c 78       	castu.h	r8
80003c42:	fe b0 f3 a5 	rcall	8000238c <LedCtrl>
	
	sys.log.smpl_enable = 0;
	char hld = 0;
	uint8_t rtn = 0;
	
	char day_str[3] = "";
80003c46:	e0 68 03 e8 	mov	r8,1000
	char month_str[3] = "";
	char year_str[3] = "";
	char hour_str[3] = "";
	char min_str[3] = "";
	char sec_str[3] = "";
80003c4a:	30 09       	mov	r9,0
	
	sys.log.smpl_enable = 0;
	char hld = 0;
	uint8_t rtn = 0;
	
	char day_str[3] = "";
80003c4c:	e0 6a 33 e7 	mov	r10,13287
	char month_str[3] = "";
80003c50:	ea 1a 1e 1a 	orh	r10,0x1e1a
	char year_str[3] = "";
80003c54:	30 1b       	mov	r11,1
80003c56:	0e 95       	mov	r5,r7
	char hour_str[3] = "";
80003c58:	c2 bc       	rcall	80003cae <__avr32_udiv64>
80003c5a:	14 93       	mov	r3,r10
	char min_str[3] = "";
80003c5c:	fe 9f fd af 	bral	800037ba <main+0xaa>
	char sec_str[3] = "";
	
	timestamp_valid = 0;
	uint8_t sync_error = 0;
	temp_block = 0;
80003c60:	48 89       	lddpc	r9,80003c80 <main+0x570>
80003c62:	30 08       	mov	r8,0
	cpu_irq_enable();
80003c64:	b2 88       	st.b	r9[0x0],r8
	
	uint8_t usart_result;
	
	ping_timeout = 0;
80003c66:	48 39       	lddpc	r9,80003c70 <main+0x560>
80003c68:	f3 68 00 84 	st.b	r9[132],r8
	LedBlink(0,ping_timeout/20+20);
80003c6c:	c5 6b       	rjmp	80003b18 <main+0x408>
80003c6e:	d7 03       	nop
80003c70:	00 00       	add	r0,r0
80003c72:	06 3c       	cp.w	r12,r3
80003c74:	00 00       	add	r0,r0
80003c76:	06 00       	add	r0,r3
80003c78:	00 00       	add	r0,r0
80003c7a:	05 f0       	ld.ub	r0,r2[0x7]
80003c7c:	00 00       	add	r0,r0
80003c7e:	05 f4       	ld.ub	r4,r2[0x7]
80003c80:	00 00       	add	r0,r0
80003c82:	06 03       	add	r3,r3

80003c84 <__ashldi3>:
80003c84:	58 0c       	cp.w	r12,0
80003c86:	5e 0c       	reteq	r12
80003c88:	f8 08 11 20 	rsub	r8,r12,32
80003c8c:	58 08       	cp.w	r8,0
80003c8e:	e0 89 00 07 	brgt	80003c9c <__ashldi3+0x18>
80003c92:	5c 38       	neg	r8
80003c94:	f4 08 09 4b 	lsl	r11,r10,r8
80003c98:	30 0a       	mov	r10,0
80003c9a:	5e fc       	retal	r12
80003c9c:	f4 08 0a 48 	lsr	r8,r10,r8
80003ca0:	f6 0c 09 4b 	lsl	r11,r11,r12
80003ca4:	f4 0c 09 4a 	lsl	r10,r10,r12
80003ca8:	f1 eb 10 0b 	or	r11,r8,r11
80003cac:	5e fc       	retal	r12

80003cae <__avr32_udiv64>:
80003cae:	d4 31       	pushm	r0-r7,lr
80003cb0:	1a 97       	mov	r7,sp
80003cb2:	20 3d       	sub	sp,12
80003cb4:	10 9c       	mov	r12,r8
80003cb6:	12 9e       	mov	lr,r9
80003cb8:	14 93       	mov	r3,r10
80003cba:	58 09       	cp.w	r9,0
80003cbc:	e0 81 00 bd 	brne	80003e36 <__avr32_udiv64+0x188>
80003cc0:	16 38       	cp.w	r8,r11
80003cc2:	e0 88 00 40 	brls	80003d42 <__avr32_udiv64+0x94>
80003cc6:	f0 08 12 00 	clz	r8,r8
80003cca:	c0 d0       	breq	80003ce4 <__avr32_udiv64+0x36>
80003ccc:	f6 08 09 4b 	lsl	r11,r11,r8
80003cd0:	f0 09 11 20 	rsub	r9,r8,32
80003cd4:	f8 08 09 4c 	lsl	r12,r12,r8
80003cd8:	f4 09 0a 49 	lsr	r9,r10,r9
80003cdc:	f4 08 09 43 	lsl	r3,r10,r8
80003ce0:	f3 eb 10 0b 	or	r11,r9,r11
80003ce4:	f8 0e 16 10 	lsr	lr,r12,0x10
80003ce8:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003cec:	f6 0e 0d 00 	divu	r0,r11,lr
80003cf0:	e6 0b 16 10 	lsr	r11,r3,0x10
80003cf4:	00 99       	mov	r9,r0
80003cf6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003cfa:	e0 0a 02 48 	mul	r8,r0,r10
80003cfe:	10 3b       	cp.w	r11,r8
80003d00:	c0 a2       	brcc	80003d14 <__avr32_udiv64+0x66>
80003d02:	20 19       	sub	r9,1
80003d04:	18 0b       	add	r11,r12
80003d06:	18 3b       	cp.w	r11,r12
80003d08:	c0 63       	brcs	80003d14 <__avr32_udiv64+0x66>
80003d0a:	10 3b       	cp.w	r11,r8
80003d0c:	f7 b9 03 01 	sublo	r9,1
80003d10:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d14:	f6 08 01 01 	sub	r1,r11,r8
80003d18:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003d1c:	e2 0e 0d 00 	divu	r0,r1,lr
80003d20:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003d24:	00 98       	mov	r8,r0
80003d26:	e0 0a 02 4a 	mul	r10,r0,r10
80003d2a:	14 33       	cp.w	r3,r10
80003d2c:	c0 82       	brcc	80003d3c <__avr32_udiv64+0x8e>
80003d2e:	20 18       	sub	r8,1
80003d30:	18 03       	add	r3,r12
80003d32:	18 33       	cp.w	r3,r12
80003d34:	c0 43       	brcs	80003d3c <__avr32_udiv64+0x8e>
80003d36:	14 33       	cp.w	r3,r10
80003d38:	f7 b8 03 01 	sublo	r8,1
80003d3c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003d40:	cd f8       	rjmp	80003efe <__avr32_udiv64+0x250>
80003d42:	58 08       	cp.w	r8,0
80003d44:	c0 51       	brne	80003d4e <__avr32_udiv64+0xa0>
80003d46:	30 19       	mov	r9,1
80003d48:	f2 08 0d 08 	divu	r8,r9,r8
80003d4c:	10 9c       	mov	r12,r8
80003d4e:	f8 06 12 00 	clz	r6,r12
80003d52:	c0 41       	brne	80003d5a <__avr32_udiv64+0xac>
80003d54:	18 1b       	sub	r11,r12
80003d56:	30 19       	mov	r9,1
80003d58:	c4 08       	rjmp	80003dd8 <__avr32_udiv64+0x12a>
80003d5a:	ec 01 11 20 	rsub	r1,r6,32
80003d5e:	f4 01 0a 49 	lsr	r9,r10,r1
80003d62:	f8 06 09 4c 	lsl	r12,r12,r6
80003d66:	f6 06 09 48 	lsl	r8,r11,r6
80003d6a:	f6 01 0a 41 	lsr	r1,r11,r1
80003d6e:	f3 e8 10 08 	or	r8,r9,r8
80003d72:	f8 03 16 10 	lsr	r3,r12,0x10
80003d76:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003d7a:	e2 03 0d 00 	divu	r0,r1,r3
80003d7e:	f0 0b 16 10 	lsr	r11,r8,0x10
80003d82:	00 9e       	mov	lr,r0
80003d84:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d88:	e0 05 02 49 	mul	r9,r0,r5
80003d8c:	12 3b       	cp.w	r11,r9
80003d8e:	c0 a2       	brcc	80003da2 <__avr32_udiv64+0xf4>
80003d90:	20 1e       	sub	lr,1
80003d92:	18 0b       	add	r11,r12
80003d94:	18 3b       	cp.w	r11,r12
80003d96:	c0 63       	brcs	80003da2 <__avr32_udiv64+0xf4>
80003d98:	12 3b       	cp.w	r11,r9
80003d9a:	f7 be 03 01 	sublo	lr,1
80003d9e:	f7 dc e3 0b 	addcs	r11,r11,r12
80003da2:	12 1b       	sub	r11,r9
80003da4:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003da8:	f6 03 0d 02 	divu	r2,r11,r3
80003dac:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003db0:	04 99       	mov	r9,r2
80003db2:	e4 05 02 4b 	mul	r11,r2,r5
80003db6:	16 38       	cp.w	r8,r11
80003db8:	c0 a2       	brcc	80003dcc <__avr32_udiv64+0x11e>
80003dba:	20 19       	sub	r9,1
80003dbc:	18 08       	add	r8,r12
80003dbe:	18 38       	cp.w	r8,r12
80003dc0:	c0 63       	brcs	80003dcc <__avr32_udiv64+0x11e>
80003dc2:	16 38       	cp.w	r8,r11
80003dc4:	f7 b9 03 01 	sublo	r9,1
80003dc8:	f1 dc e3 08 	addcs	r8,r8,r12
80003dcc:	f4 06 09 43 	lsl	r3,r10,r6
80003dd0:	f0 0b 01 0b 	sub	r11,r8,r11
80003dd4:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003dd8:	f8 06 16 10 	lsr	r6,r12,0x10
80003ddc:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003de0:	f6 06 0d 00 	divu	r0,r11,r6
80003de4:	e6 0b 16 10 	lsr	r11,r3,0x10
80003de8:	00 9a       	mov	r10,r0
80003dea:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003dee:	e0 0e 02 48 	mul	r8,r0,lr
80003df2:	10 3b       	cp.w	r11,r8
80003df4:	c0 a2       	brcc	80003e08 <__avr32_udiv64+0x15a>
80003df6:	20 1a       	sub	r10,1
80003df8:	18 0b       	add	r11,r12
80003dfa:	18 3b       	cp.w	r11,r12
80003dfc:	c0 63       	brcs	80003e08 <__avr32_udiv64+0x15a>
80003dfe:	10 3b       	cp.w	r11,r8
80003e00:	f7 ba 03 01 	sublo	r10,1
80003e04:	f7 dc e3 0b 	addcs	r11,r11,r12
80003e08:	f6 08 01 01 	sub	r1,r11,r8
80003e0c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003e10:	e2 06 0d 00 	divu	r0,r1,r6
80003e14:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003e18:	00 98       	mov	r8,r0
80003e1a:	e0 0e 02 4b 	mul	r11,r0,lr
80003e1e:	16 33       	cp.w	r3,r11
80003e20:	c0 82       	brcc	80003e30 <__avr32_udiv64+0x182>
80003e22:	20 18       	sub	r8,1
80003e24:	18 03       	add	r3,r12
80003e26:	18 33       	cp.w	r3,r12
80003e28:	c0 43       	brcs	80003e30 <__avr32_udiv64+0x182>
80003e2a:	16 33       	cp.w	r3,r11
80003e2c:	f7 b8 03 01 	sublo	r8,1
80003e30:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003e34:	c6 98       	rjmp	80003f06 <__avr32_udiv64+0x258>
80003e36:	16 39       	cp.w	r9,r11
80003e38:	e0 8b 00 65 	brhi	80003f02 <__avr32_udiv64+0x254>
80003e3c:	f2 09 12 00 	clz	r9,r9
80003e40:	c0 b1       	brne	80003e56 <__avr32_udiv64+0x1a8>
80003e42:	10 3a       	cp.w	r10,r8
80003e44:	5f 2a       	srhs	r10
80003e46:	1c 3b       	cp.w	r11,lr
80003e48:	5f b8       	srhi	r8
80003e4a:	10 4a       	or	r10,r8
80003e4c:	f2 0a 18 00 	cp.b	r10,r9
80003e50:	c5 90       	breq	80003f02 <__avr32_udiv64+0x254>
80003e52:	30 18       	mov	r8,1
80003e54:	c5 98       	rjmp	80003f06 <__avr32_udiv64+0x258>
80003e56:	f0 09 09 46 	lsl	r6,r8,r9
80003e5a:	f2 03 11 20 	rsub	r3,r9,32
80003e5e:	fc 09 09 4e 	lsl	lr,lr,r9
80003e62:	f0 03 0a 48 	lsr	r8,r8,r3
80003e66:	f6 09 09 4c 	lsl	r12,r11,r9
80003e6a:	f4 03 0a 42 	lsr	r2,r10,r3
80003e6e:	ef 46 ff f4 	st.w	r7[-12],r6
80003e72:	f6 03 0a 43 	lsr	r3,r11,r3
80003e76:	18 42       	or	r2,r12
80003e78:	f1 ee 10 0c 	or	r12,r8,lr
80003e7c:	f8 01 16 10 	lsr	r1,r12,0x10
80003e80:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003e84:	e6 01 0d 04 	divu	r4,r3,r1
80003e88:	e4 03 16 10 	lsr	r3,r2,0x10
80003e8c:	08 9e       	mov	lr,r4
80003e8e:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003e92:	e8 06 02 48 	mul	r8,r4,r6
80003e96:	10 33       	cp.w	r3,r8
80003e98:	c0 a2       	brcc	80003eac <__avr32_udiv64+0x1fe>
80003e9a:	20 1e       	sub	lr,1
80003e9c:	18 03       	add	r3,r12
80003e9e:	18 33       	cp.w	r3,r12
80003ea0:	c0 63       	brcs	80003eac <__avr32_udiv64+0x1fe>
80003ea2:	10 33       	cp.w	r3,r8
80003ea4:	f7 be 03 01 	sublo	lr,1
80003ea8:	e7 dc e3 03 	addcs	r3,r3,r12
80003eac:	10 13       	sub	r3,r8
80003eae:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003eb2:	e6 01 0d 00 	divu	r0,r3,r1
80003eb6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003eba:	00 98       	mov	r8,r0
80003ebc:	e0 06 02 46 	mul	r6,r0,r6
80003ec0:	0c 3b       	cp.w	r11,r6
80003ec2:	c0 a2       	brcc	80003ed6 <__avr32_udiv64+0x228>
80003ec4:	20 18       	sub	r8,1
80003ec6:	18 0b       	add	r11,r12
80003ec8:	18 3b       	cp.w	r11,r12
80003eca:	c0 63       	brcs	80003ed6 <__avr32_udiv64+0x228>
80003ecc:	0c 3b       	cp.w	r11,r6
80003ece:	f7 dc e3 0b 	addcs	r11,r11,r12
80003ed2:	f7 b8 03 01 	sublo	r8,1
80003ed6:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003eda:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003ede:	0c 1b       	sub	r11,r6
80003ee0:	f0 04 06 42 	mulu.d	r2,r8,r4
80003ee4:	06 95       	mov	r5,r3
80003ee6:	16 35       	cp.w	r5,r11
80003ee8:	e0 8b 00 0a 	brhi	80003efc <__avr32_udiv64+0x24e>
80003eec:	5f 0b       	sreq	r11
80003eee:	f4 09 09 49 	lsl	r9,r10,r9
80003ef2:	12 32       	cp.w	r2,r9
80003ef4:	5f b9       	srhi	r9
80003ef6:	f7 e9 00 09 	and	r9,r11,r9
80003efa:	c0 60       	breq	80003f06 <__avr32_udiv64+0x258>
80003efc:	20 18       	sub	r8,1
80003efe:	30 09       	mov	r9,0
80003f00:	c0 38       	rjmp	80003f06 <__avr32_udiv64+0x258>
80003f02:	30 09       	mov	r9,0
80003f04:	12 98       	mov	r8,r9
80003f06:	10 9a       	mov	r10,r8
80003f08:	12 93       	mov	r3,r9
80003f0a:	10 92       	mov	r2,r8
80003f0c:	12 9b       	mov	r11,r9
80003f0e:	2f dd       	sub	sp,-12
80003f10:	d8 32       	popm	r0-r7,pc
80003f12:	d7 03       	nop

80003f14 <atoi>:
80003f14:	d4 01       	pushm	lr
80003f16:	30 aa       	mov	r10,10
80003f18:	30 0b       	mov	r11,0
80003f1a:	cb 1d       	rcall	8000427c <strtol>
80003f1c:	d8 02       	popm	pc
80003f1e:	d7 03       	nop

80003f20 <memcpy>:
80003f20:	58 8a       	cp.w	r10,8
80003f22:	c2 f5       	brlt	80003f80 <memcpy+0x60>
80003f24:	f9 eb 10 09 	or	r9,r12,r11
80003f28:	e2 19 00 03 	andl	r9,0x3,COH
80003f2c:	e0 81 00 97 	brne	8000405a <memcpy+0x13a>
80003f30:	e0 4a 00 20 	cp.w	r10,32
80003f34:	c3 b4       	brge	80003faa <memcpy+0x8a>
80003f36:	f4 08 14 02 	asr	r8,r10,0x2
80003f3a:	f0 09 11 08 	rsub	r9,r8,8
80003f3e:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003f42:	76 69       	ld.w	r9,r11[0x18]
80003f44:	99 69       	st.w	r12[0x18],r9
80003f46:	76 59       	ld.w	r9,r11[0x14]
80003f48:	99 59       	st.w	r12[0x14],r9
80003f4a:	76 49       	ld.w	r9,r11[0x10]
80003f4c:	99 49       	st.w	r12[0x10],r9
80003f4e:	76 39       	ld.w	r9,r11[0xc]
80003f50:	99 39       	st.w	r12[0xc],r9
80003f52:	76 29       	ld.w	r9,r11[0x8]
80003f54:	99 29       	st.w	r12[0x8],r9
80003f56:	76 19       	ld.w	r9,r11[0x4]
80003f58:	99 19       	st.w	r12[0x4],r9
80003f5a:	76 09       	ld.w	r9,r11[0x0]
80003f5c:	99 09       	st.w	r12[0x0],r9
80003f5e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003f62:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003f66:	e0 1a 00 03 	andl	r10,0x3
80003f6a:	f4 0a 11 04 	rsub	r10,r10,4
80003f6e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003f72:	17 a9       	ld.ub	r9,r11[0x2]
80003f74:	b0 a9       	st.b	r8[0x2],r9
80003f76:	17 99       	ld.ub	r9,r11[0x1]
80003f78:	b0 99       	st.b	r8[0x1],r9
80003f7a:	17 89       	ld.ub	r9,r11[0x0]
80003f7c:	b0 89       	st.b	r8[0x0],r9
80003f7e:	5e fc       	retal	r12
80003f80:	f4 0a 11 09 	rsub	r10,r10,9
80003f84:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003f88:	17 f9       	ld.ub	r9,r11[0x7]
80003f8a:	b8 f9       	st.b	r12[0x7],r9
80003f8c:	17 e9       	ld.ub	r9,r11[0x6]
80003f8e:	b8 e9       	st.b	r12[0x6],r9
80003f90:	17 d9       	ld.ub	r9,r11[0x5]
80003f92:	b8 d9       	st.b	r12[0x5],r9
80003f94:	17 c9       	ld.ub	r9,r11[0x4]
80003f96:	b8 c9       	st.b	r12[0x4],r9
80003f98:	17 b9       	ld.ub	r9,r11[0x3]
80003f9a:	b8 b9       	st.b	r12[0x3],r9
80003f9c:	17 a9       	ld.ub	r9,r11[0x2]
80003f9e:	b8 a9       	st.b	r12[0x2],r9
80003fa0:	17 99       	ld.ub	r9,r11[0x1]
80003fa2:	b8 99       	st.b	r12[0x1],r9
80003fa4:	17 89       	ld.ub	r9,r11[0x0]
80003fa6:	b8 89       	st.b	r12[0x0],r9
80003fa8:	5e fc       	retal	r12
80003faa:	eb cd 40 c0 	pushm	r6-r7,lr
80003fae:	18 99       	mov	r9,r12
80003fb0:	22 0a       	sub	r10,32
80003fb2:	b7 07       	ld.d	r6,r11++
80003fb4:	b3 26       	st.d	r9++,r6
80003fb6:	b7 07       	ld.d	r6,r11++
80003fb8:	b3 26       	st.d	r9++,r6
80003fba:	b7 07       	ld.d	r6,r11++
80003fbc:	b3 26       	st.d	r9++,r6
80003fbe:	b7 07       	ld.d	r6,r11++
80003fc0:	b3 26       	st.d	r9++,r6
80003fc2:	22 0a       	sub	r10,32
80003fc4:	cf 74       	brge	80003fb2 <memcpy+0x92>
80003fc6:	2f 0a       	sub	r10,-16
80003fc8:	c0 65       	brlt	80003fd4 <memcpy+0xb4>
80003fca:	b7 07       	ld.d	r6,r11++
80003fcc:	b3 26       	st.d	r9++,r6
80003fce:	b7 07       	ld.d	r6,r11++
80003fd0:	b3 26       	st.d	r9++,r6
80003fd2:	21 0a       	sub	r10,16
80003fd4:	5c 3a       	neg	r10
80003fd6:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003fda:	d7 03       	nop
80003fdc:	d7 03       	nop
80003fde:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003fe2:	f3 66 00 0e 	st.b	r9[14],r6
80003fe6:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003fea:	f3 66 00 0d 	st.b	r9[13],r6
80003fee:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003ff2:	f3 66 00 0c 	st.b	r9[12],r6
80003ff6:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003ffa:	f3 66 00 0b 	st.b	r9[11],r6
80003ffe:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004002:	f3 66 00 0a 	st.b	r9[10],r6
80004006:	f7 36 00 09 	ld.ub	r6,r11[9]
8000400a:	f3 66 00 09 	st.b	r9[9],r6
8000400e:	f7 36 00 08 	ld.ub	r6,r11[8]
80004012:	f3 66 00 08 	st.b	r9[8],r6
80004016:	f7 36 00 07 	ld.ub	r6,r11[7]
8000401a:	f3 66 00 07 	st.b	r9[7],r6
8000401e:	f7 36 00 06 	ld.ub	r6,r11[6]
80004022:	f3 66 00 06 	st.b	r9[6],r6
80004026:	f7 36 00 05 	ld.ub	r6,r11[5]
8000402a:	f3 66 00 05 	st.b	r9[5],r6
8000402e:	f7 36 00 04 	ld.ub	r6,r11[4]
80004032:	f3 66 00 04 	st.b	r9[4],r6
80004036:	f7 36 00 03 	ld.ub	r6,r11[3]
8000403a:	f3 66 00 03 	st.b	r9[3],r6
8000403e:	f7 36 00 02 	ld.ub	r6,r11[2]
80004042:	f3 66 00 02 	st.b	r9[2],r6
80004046:	f7 36 00 01 	ld.ub	r6,r11[1]
8000404a:	f3 66 00 01 	st.b	r9[1],r6
8000404e:	f7 36 00 00 	ld.ub	r6,r11[0]
80004052:	f3 66 00 00 	st.b	r9[0],r6
80004056:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000405a:	20 1a       	sub	r10,1
8000405c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004060:	f8 0a 0b 09 	st.b	r12[r10],r9
80004064:	cf b1       	brne	8000405a <memcpy+0x13a>
80004066:	5e fc       	retal	r12

80004068 <memset>:
80004068:	18 98       	mov	r8,r12
8000406a:	c0 38       	rjmp	80004070 <memset+0x8>
8000406c:	10 cb       	st.b	r8++,r11
8000406e:	20 1a       	sub	r10,1
80004070:	58 0a       	cp.w	r10,0
80004072:	cf d1       	brne	8000406c <memset+0x4>
80004074:	5e fc       	retal	r12
80004076:	d7 03       	nop

80004078 <sprintf>:
80004078:	d4 01       	pushm	lr
8000407a:	21 7d       	sub	sp,92
8000407c:	e0 68 ff ff 	mov	r8,65535
80004080:	ea 18 7f ff 	orh	r8,0x7fff
80004084:	50 58       	stdsp	sp[0x14],r8
80004086:	50 28       	stdsp	sp[0x8],r8
80004088:	e0 68 02 08 	mov	r8,520
8000408c:	ba 68       	st.h	sp[0xc],r8
8000408e:	3f f8       	mov	r8,-1
80004090:	ba 78       	st.h	sp[0xe],r8
80004092:	48 88       	lddpc	r8,800040b0 <sprintf+0x38>
80004094:	50 4c       	stdsp	sp[0x10],r12
80004096:	16 9a       	mov	r10,r11
80004098:	50 0c       	stdsp	sp[0x0],r12
8000409a:	fa c9 ff a0 	sub	r9,sp,-96
8000409e:	70 0c       	ld.w	r12,r8[0x0]
800040a0:	1a 9b       	mov	r11,sp
800040a2:	e0 a0 02 95 	rcall	800045cc <_vfprintf_r>
800040a6:	30 09       	mov	r9,0
800040a8:	40 08       	lddsp	r8,sp[0x0]
800040aa:	b0 89       	st.b	r8[0x0],r9
800040ac:	2e 9d       	sub	sp,-92
800040ae:	d8 02       	popm	pc
800040b0:	00 00       	add	r0,r0
800040b2:	00 fc       	st.b	--r0,r12

800040b4 <strcasecmp>:
800040b4:	d4 21       	pushm	r4-r7,lr
800040b6:	49 98       	lddpc	r8,80004118 <strcasecmp+0x64>
800040b8:	70 09       	ld.w	r9,r8[0x0]
800040ba:	c0 28       	rjmp	800040be <strcasecmp+0xa>
800040bc:	2f fb       	sub	r11,-1
800040be:	19 88       	ld.ub	r8,r12[0x0]
800040c0:	58 08       	cp.w	r8,0
800040c2:	c1 60       	breq	800040ee <strcasecmp+0x3a>
800040c4:	17 8a       	ld.ub	r10,r11[0x0]
800040c6:	10 9e       	mov	lr,r8
800040c8:	f2 0a 07 06 	ld.ub	r6,r9[r10]
800040cc:	f2 08 07 07 	ld.ub	r7,r9[r8]
800040d0:	ed d6 c0 01 	bfextu	r6,r6,0x0,0x1
800040d4:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
800040d8:	f0 c5 ff e0 	sub	r5,r8,-32
800040dc:	58 06       	cp.w	r6,0
800040de:	f7 ba 01 e0 	subne	r10,-32
800040e2:	2f fc       	sub	r12,-1
800040e4:	58 07       	cp.w	r7,0
800040e6:	ea 0e 17 10 	movne	lr,r5
800040ea:	14 3e       	cp.w	lr,r10
800040ec:	ce 80       	breq	800040bc <strcasecmp+0x8>
800040ee:	10 9c       	mov	r12,r8
800040f0:	17 88       	ld.ub	r8,r11[0x0]
800040f2:	f8 cb ff e0 	sub	r11,r12,-32
800040f6:	f2 08 07 0a 	ld.ub	r10,r9[r8]
800040fa:	f2 0c 07 09 	ld.ub	r9,r9[r12]
800040fe:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80004102:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004106:	58 0a       	cp.w	r10,0
80004108:	f7 b8 01 e0 	subne	r8,-32
8000410c:	58 09       	cp.w	r9,0
8000410e:	f6 0c 17 10 	movne	r12,r11
80004112:	10 1c       	sub	r12,r8
80004114:	d8 22       	popm	r4-r7,pc
80004116:	d7 03       	nop
80004118:	00 00       	add	r0,r0
8000411a:	00 08       	add	r8,r0

8000411c <strcpy>:
8000411c:	30 08       	mov	r8,0
8000411e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80004122:	f8 08 0b 09 	st.b	r12[r8],r9
80004126:	2f f8       	sub	r8,-1
80004128:	58 09       	cp.w	r9,0
8000412a:	cf a1       	brne	8000411e <strcpy+0x2>
8000412c:	5e fc       	retal	r12

8000412e <strlen>:
8000412e:	30 09       	mov	r9,0
80004130:	18 98       	mov	r8,r12
80004132:	c0 28       	rjmp	80004136 <strlen+0x8>
80004134:	2f f8       	sub	r8,-1
80004136:	11 8a       	ld.ub	r10,r8[0x0]
80004138:	f2 0a 18 00 	cp.b	r10,r9
8000413c:	cf c1       	brne	80004134 <strlen+0x6>
8000413e:	f0 0c 01 0c 	sub	r12,r8,r12
80004142:	5e fc       	retal	r12

80004144 <_strtol_r>:
80004144:	d4 31       	pushm	r0-r7,lr
80004146:	20 3d       	sub	sp,12
80004148:	4c c8       	lddpc	r8,80004278 <_strtol_r+0x134>
8000414a:	50 2c       	stdsp	sp[0x8],r12
8000414c:	70 01       	ld.w	r1,r8[0x0]
8000414e:	16 98       	mov	r8,r11
80004150:	11 3e       	ld.ub	lr,r8++
80004152:	e2 0e 07 06 	ld.ub	r6,r1[lr]
80004156:	e2 16 00 08 	andl	r6,0x8,COH
8000415a:	cf b1       	brne	80004150 <_strtol_r+0xc>
8000415c:	e0 4e 00 2d 	cp.w	lr,45
80004160:	c0 41       	brne	80004168 <_strtol_r+0x24>
80004162:	11 3e       	ld.ub	lr,r8++
80004164:	30 16       	mov	r6,1
80004166:	c0 58       	rjmp	80004170 <_strtol_r+0x2c>
80004168:	e0 4e 00 2b 	cp.w	lr,43
8000416c:	c0 21       	brne	80004170 <_strtol_r+0x2c>
8000416e:	11 3e       	ld.ub	lr,r8++
80004170:	58 09       	cp.w	r9,0
80004172:	5f 0c       	sreq	r12
80004174:	59 09       	cp.w	r9,16
80004176:	5f 05       	sreq	r5
80004178:	30 07       	mov	r7,0
8000417a:	f9 e5 10 05 	or	r5,r12,r5
8000417e:	ee 05 18 00 	cp.b	r5,r7
80004182:	c1 e0       	breq	800041be <_strtol_r+0x7a>
80004184:	e0 4e 00 30 	cp.w	lr,48
80004188:	c1 31       	brne	800041ae <_strtol_r+0x6a>
8000418a:	11 85       	ld.ub	r5,r8[0x0]
8000418c:	35 84       	mov	r4,88
8000418e:	37 83       	mov	r3,120
80004190:	e8 05 18 00 	cp.b	r5,r4
80004194:	5f 04       	sreq	r4
80004196:	e6 05 18 00 	cp.b	r5,r3
8000419a:	5f 05       	sreq	r5
8000419c:	e9 e5 10 05 	or	r5,r4,r5
800041a0:	ee 05 18 00 	cp.b	r5,r7
800041a4:	c0 50       	breq	800041ae <_strtol_r+0x6a>
800041a6:	11 9e       	ld.ub	lr,r8[0x1]
800041a8:	31 09       	mov	r9,16
800041aa:	2f e8       	sub	r8,-2
800041ac:	c0 98       	rjmp	800041be <_strtol_r+0x7a>
800041ae:	58 0c       	cp.w	r12,0
800041b0:	c0 70       	breq	800041be <_strtol_r+0x7a>
800041b2:	e0 4e 00 30 	cp.w	lr,48
800041b6:	f9 b9 00 08 	moveq	r9,8
800041ba:	f9 b9 01 0a 	movne	r9,10
800041be:	e0 6c ff ff 	mov	r12,65535
800041c2:	ea 1c 7f ff 	orh	r12,0x7fff
800041c6:	30 07       	mov	r7,0
800041c8:	fc 15 80 00 	movh	r5,0x8000
800041cc:	0e 93       	mov	r3,r7
800041ce:	0e 36       	cp.w	r6,r7
800041d0:	f8 05 17 00 	moveq	r5,r12
800041d4:	0e 9c       	mov	r12,r7
800041d6:	ea 09 0d 04 	divu	r4,r5,r9
800041da:	08 92       	mov	r2,r4
800041dc:	50 05       	stdsp	sp[0x0],r5
800041de:	e2 0e 07 04 	ld.ub	r4,r1[lr]
800041e2:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
800041e6:	f9 b0 01 37 	movne	r0,55
800041ea:	f9 b0 00 57 	moveq	r0,87
800041ee:	50 10       	stdsp	sp[0x4],r0
800041f0:	fc c5 00 30 	sub	r5,lr,48
800041f4:	08 90       	mov	r0,r4
800041f6:	e2 10 00 04 	andl	r0,0x4,COH
800041fa:	c0 81       	brne	8000420a <_strtol_r+0xc6>
800041fc:	40 10       	lddsp	r0,sp[0x4]
800041fe:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
80004202:	fc 00 01 05 	sub	r5,lr,r0
80004206:	58 04       	cp.w	r4,0
80004208:	c1 c0       	breq	80004240 <_strtol_r+0xfc>
8000420a:	12 35       	cp.w	r5,r9
8000420c:	c1 a4       	brge	80004240 <_strtol_r+0xfc>
8000420e:	04 3c       	cp.w	r12,r2
80004210:	5f be       	srhi	lr
80004212:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
80004216:	e6 0e 18 00 	cp.b	lr,r3
8000421a:	c1 01       	brne	8000423a <_strtol_r+0xf6>
8000421c:	04 3c       	cp.w	r12,r2
8000421e:	5f 0e       	sreq	lr
80004220:	40 07       	lddsp	r7,sp[0x0]
80004222:	0e 35       	cp.w	r5,r7
80004224:	5f 97       	srgt	r7
80004226:	ef ee 00 0e 	and	lr,r7,lr
8000422a:	e6 0e 18 00 	cp.b	lr,r3
8000422e:	c0 61       	brne	8000423a <_strtol_r+0xf6>
80004230:	b3 3c       	mul	r12,r9
80004232:	30 17       	mov	r7,1
80004234:	ea 0c 00 0c 	add	r12,r5,r12
80004238:	c0 28       	rjmp	8000423c <_strtol_r+0xf8>
8000423a:	3f f7       	mov	r7,-1
8000423c:	11 3e       	ld.ub	lr,r8++
8000423e:	cd 0b       	rjmp	800041de <_strtol_r+0x9a>
80004240:	5b f7       	cp.w	r7,-1
80004242:	c0 e1       	brne	8000425e <_strtol_r+0x11a>
80004244:	e0 69 ff ff 	mov	r9,65535
80004248:	ea 19 7f ff 	orh	r9,0x7fff
8000424c:	fc 1c 80 00 	movh	r12,0x8000
80004250:	40 20       	lddsp	r0,sp[0x8]
80004252:	58 06       	cp.w	r6,0
80004254:	f2 0c 17 00 	moveq	r12,r9
80004258:	32 29       	mov	r9,34
8000425a:	81 39       	st.w	r0[0xc],r9
8000425c:	c0 48       	rjmp	80004264 <_strtol_r+0x120>
8000425e:	58 06       	cp.w	r6,0
80004260:	fb bc 01 00 	rsubne	r12,0
80004264:	58 0a       	cp.w	r10,0
80004266:	c0 60       	breq	80004272 <_strtol_r+0x12e>
80004268:	20 18       	sub	r8,1
8000426a:	58 07       	cp.w	r7,0
8000426c:	f0 0b 17 10 	movne	r11,r8
80004270:	95 0b       	st.w	r10[0x0],r11
80004272:	2f dd       	sub	sp,-12
80004274:	d8 32       	popm	r0-r7,pc
80004276:	d7 03       	nop
80004278:	00 00       	add	r0,r0
8000427a:	00 08       	add	r8,r0

8000427c <strtol>:
8000427c:	d4 01       	pushm	lr
8000427e:	48 48       	lddpc	r8,8000428c <strtol+0x10>
80004280:	14 99       	mov	r9,r10
80004282:	16 9a       	mov	r10,r11
80004284:	18 9b       	mov	r11,r12
80004286:	70 0c       	ld.w	r12,r8[0x0]
80004288:	c5 ef       	rcall	80004144 <_strtol_r>
8000428a:	d8 02       	popm	pc
8000428c:	00 00       	add	r0,r0
8000428e:	00 fc       	st.b	--r0,r12

80004290 <get_arg>:
80004290:	d4 31       	pushm	r0-r7,lr
80004292:	20 8d       	sub	sp,32
80004294:	fa c4 ff bc 	sub	r4,sp,-68
80004298:	50 4b       	stdsp	sp[0x10],r11
8000429a:	68 2e       	ld.w	lr,r4[0x8]
8000429c:	50 58       	stdsp	sp[0x14],r8
8000429e:	12 96       	mov	r6,r9
800042a0:	7c 0b       	ld.w	r11,lr[0x0]
800042a2:	70 05       	ld.w	r5,r8[0x0]
800042a4:	50 6e       	stdsp	sp[0x18],lr
800042a6:	58 0b       	cp.w	r11,0
800042a8:	f4 0b 17 00 	moveq	r11,r10
800042ac:	68 03       	ld.w	r3,r4[0x0]
800042ae:	68 11       	ld.w	r1,r4[0x4]
800042b0:	40 49       	lddsp	r9,sp[0x10]
800042b2:	30 08       	mov	r8,0
800042b4:	c2 e9       	rjmp	80004510 <get_arg+0x280>
800042b6:	2f fb       	sub	r11,-1
800042b8:	32 5c       	mov	r12,37
800042ba:	17 8a       	ld.ub	r10,r11[0x0]
800042bc:	f8 0a 18 00 	cp.b	r10,r12
800042c0:	5f 1e       	srne	lr
800042c2:	f0 0a 18 00 	cp.b	r10,r8
800042c6:	5f 1c       	srne	r12
800042c8:	fd ec 00 0c 	and	r12,lr,r12
800042cc:	f0 0c 18 00 	cp.b	r12,r8
800042d0:	cf 31       	brne	800042b6 <get_arg+0x26>
800042d2:	58 0a       	cp.w	r10,0
800042d4:	e0 80 01 2b 	breq	8000452a <get_arg+0x29a>
800042d8:	30 0c       	mov	r12,0
800042da:	3f fa       	mov	r10,-1
800042dc:	18 90       	mov	r0,r12
800042de:	50 3a       	stdsp	sp[0xc],r10
800042e0:	18 94       	mov	r4,r12
800042e2:	18 92       	mov	r2,r12
800042e4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800042e8:	16 97       	mov	r7,r11
800042ea:	50 7c       	stdsp	sp[0x1c],r12
800042ec:	4c ec       	lddpc	r12,80004424 <get_arg+0x194>
800042ee:	0f 3a       	ld.ub	r10,r7++
800042f0:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800042f4:	40 7c       	lddsp	r12,sp[0x1c]
800042f6:	1c 0c       	add	r12,lr
800042f8:	4c ce       	lddpc	lr,80004428 <get_arg+0x198>
800042fa:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800042fe:	20 1e       	sub	lr,1
80004300:	50 0e       	stdsp	sp[0x0],lr
80004302:	4c be       	lddpc	lr,8000442c <get_arg+0x19c>
80004304:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80004308:	50 7c       	stdsp	sp[0x1c],r12
8000430a:	40 0c       	lddsp	r12,sp[0x0]
8000430c:	58 7c       	cp.w	r12,7
8000430e:	e0 8b 00 fa 	brhi	80004502 <get_arg+0x272>
80004312:	4c 8e       	lddpc	lr,80004430 <get_arg+0x1a0>
80004314:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80004318:	36 8b       	mov	r11,104
8000431a:	f6 0a 18 00 	cp.b	r10,r11
8000431e:	e0 80 00 f2 	breq	80004502 <get_arg+0x272>
80004322:	37 1b       	mov	r11,113
80004324:	f6 0a 18 00 	cp.b	r10,r11
80004328:	c0 70       	breq	80004336 <get_arg+0xa6>
8000432a:	34 cb       	mov	r11,76
8000432c:	f6 0a 18 00 	cp.b	r10,r11
80004330:	c0 51       	brne	8000433a <get_arg+0xaa>
80004332:	a3 b4       	sbr	r4,0x3
80004334:	ce 78       	rjmp	80004502 <get_arg+0x272>
80004336:	a5 b4       	sbr	r4,0x5
80004338:	ce 58       	rjmp	80004502 <get_arg+0x272>
8000433a:	08 9a       	mov	r10,r4
8000433c:	0e 9b       	mov	r11,r7
8000433e:	a5 aa       	sbr	r10,0x4
80004340:	17 3c       	ld.ub	r12,r11++
80004342:	a5 b4       	sbr	r4,0x5
80004344:	36 ce       	mov	lr,108
80004346:	fc 0c 18 00 	cp.b	r12,lr
8000434a:	e0 80 00 dd 	breq	80004504 <get_arg+0x274>
8000434e:	14 94       	mov	r4,r10
80004350:	cd 98       	rjmp	80004502 <get_arg+0x272>
80004352:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80004356:	36 7c       	mov	r12,103
80004358:	f8 0a 18 00 	cp.b	r10,r12
8000435c:	e0 8b 00 27 	brhi	800043aa <get_arg+0x11a>
80004360:	36 5b       	mov	r11,101
80004362:	f6 0a 18 00 	cp.b	r10,r11
80004366:	c4 82       	brcc	800043f6 <get_arg+0x166>
80004368:	34 fb       	mov	r11,79
8000436a:	f6 0a 18 00 	cp.b	r10,r11
8000436e:	c4 80       	breq	800043fe <get_arg+0x16e>
80004370:	e0 8b 00 0c 	brhi	80004388 <get_arg+0xf8>
80004374:	34 5b       	mov	r11,69
80004376:	f6 0a 18 00 	cp.b	r10,r11
8000437a:	c3 e0       	breq	800043f6 <get_arg+0x166>
8000437c:	34 7b       	mov	r11,71
8000437e:	f6 0a 18 00 	cp.b	r10,r11
80004382:	c3 a0       	breq	800043f6 <get_arg+0x166>
80004384:	34 4b       	mov	r11,68
80004386:	c0 88       	rjmp	80004396 <get_arg+0x106>
80004388:	35 8b       	mov	r11,88
8000438a:	f6 0a 18 00 	cp.b	r10,r11
8000438e:	c2 c0       	breq	800043e6 <get_arg+0x156>
80004390:	e0 8b 00 07 	brhi	8000439e <get_arg+0x10e>
80004394:	35 5b       	mov	r11,85
80004396:	f6 0a 18 00 	cp.b	r10,r11
8000439a:	c3 51       	brne	80004404 <get_arg+0x174>
8000439c:	c3 18       	rjmp	800043fe <get_arg+0x16e>
8000439e:	36 3b       	mov	r11,99
800043a0:	f6 0a 18 00 	cp.b	r10,r11
800043a4:	c2 f0       	breq	80004402 <get_arg+0x172>
800043a6:	36 4b       	mov	r11,100
800043a8:	c0 e8       	rjmp	800043c4 <get_arg+0x134>
800043aa:	37 0b       	mov	r11,112
800043ac:	f6 0a 18 00 	cp.b	r10,r11
800043b0:	c2 50       	breq	800043fa <get_arg+0x16a>
800043b2:	e0 8b 00 0d 	brhi	800043cc <get_arg+0x13c>
800043b6:	36 eb       	mov	r11,110
800043b8:	f6 0a 18 00 	cp.b	r10,r11
800043bc:	c1 f0       	breq	800043fa <get_arg+0x16a>
800043be:	e0 8b 00 14 	brhi	800043e6 <get_arg+0x156>
800043c2:	36 9b       	mov	r11,105
800043c4:	f6 0a 18 00 	cp.b	r10,r11
800043c8:	c1 e1       	brne	80004404 <get_arg+0x174>
800043ca:	c0 e8       	rjmp	800043e6 <get_arg+0x156>
800043cc:	37 5b       	mov	r11,117
800043ce:	f6 0a 18 00 	cp.b	r10,r11
800043d2:	c0 a0       	breq	800043e6 <get_arg+0x156>
800043d4:	37 8b       	mov	r11,120
800043d6:	f6 0a 18 00 	cp.b	r10,r11
800043da:	c0 60       	breq	800043e6 <get_arg+0x156>
800043dc:	37 3b       	mov	r11,115
800043de:	f6 0a 18 00 	cp.b	r10,r11
800043e2:	c1 11       	brne	80004404 <get_arg+0x174>
800043e4:	c0 b8       	rjmp	800043fa <get_arg+0x16a>
800043e6:	ed b4 00 04 	bld	r4,0x4
800043ea:	c0 a0       	breq	800043fe <get_arg+0x16e>
800043ec:	ed b4 00 05 	bld	r4,0x5
800043f0:	c0 91       	brne	80004402 <get_arg+0x172>
800043f2:	30 20       	mov	r0,2
800043f4:	c0 88       	rjmp	80004404 <get_arg+0x174>
800043f6:	30 40       	mov	r0,4
800043f8:	c0 68       	rjmp	80004404 <get_arg+0x174>
800043fa:	30 30       	mov	r0,3
800043fc:	c0 48       	rjmp	80004404 <get_arg+0x174>
800043fe:	30 10       	mov	r0,1
80004400:	c0 28       	rjmp	80004404 <get_arg+0x174>
80004402:	30 00       	mov	r0,0
80004404:	40 3b       	lddsp	r11,sp[0xc]
80004406:	5b fb       	cp.w	r11,-1
80004408:	c0 40       	breq	80004410 <get_arg+0x180>
8000440a:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000440e:	c7 a8       	rjmp	80004502 <get_arg+0x272>
80004410:	58 60       	cp.w	r0,6
80004412:	e0 8b 00 78 	brhi	80004502 <get_arg+0x272>
80004416:	6c 0a       	ld.w	r10,r6[0x0]
80004418:	ea cc ff ff 	sub	r12,r5,-1
8000441c:	48 6e       	lddpc	lr,80004434 <get_arg+0x1a4>
8000441e:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80004422:	d7 03       	nop
80004424:	80 00       	ld.sh	r0,r0[0x0]
80004426:	a3 0c       	ld.d	r12,r1
80004428:	80 00       	ld.sh	r0,r0[0x0]
8000442a:	a2 44       	st.h	r1[0x8],r4
8000442c:	80 00       	ld.sh	r0,r0[0x0]
8000442e:	a1 d8       	cbr	r8,0x1
80004430:	80 00       	ld.sh	r0,r0[0x0]
80004432:	a0 38       	st.h	r0[0x6],r8
80004434:	80 00       	ld.sh	r0,r0[0x0]
80004436:	a0 58       	st.h	r0[0xa],r8
80004438:	f4 cb ff f8 	sub	r11,r10,-8
8000443c:	8d 0b       	st.w	r6[0x0],r11
8000443e:	f4 ea 00 00 	ld.d	r10,r10[0]
80004442:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004446:	c0 f8       	rjmp	80004464 <get_arg+0x1d4>
80004448:	f4 cb ff fc 	sub	r11,r10,-4
8000444c:	8d 0b       	st.w	r6[0x0],r11
8000444e:	74 0a       	ld.w	r10,r10[0x0]
80004450:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004454:	c0 88       	rjmp	80004464 <get_arg+0x1d4>
80004456:	f4 cb ff f8 	sub	r11,r10,-8
8000445a:	8d 0b       	st.w	r6[0x0],r11
8000445c:	f4 ea 00 00 	ld.d	r10,r10[0]
80004460:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004464:	0e 9b       	mov	r11,r7
80004466:	18 95       	mov	r5,r12
80004468:	c4 e8       	rjmp	80004504 <get_arg+0x274>
8000446a:	62 0a       	ld.w	r10,r1[0x0]
8000446c:	5b fa       	cp.w	r10,-1
8000446e:	c0 b1       	brne	80004484 <get_arg+0x1f4>
80004470:	50 19       	stdsp	sp[0x4],r9
80004472:	50 28       	stdsp	sp[0x8],r8
80004474:	e0 6a 00 80 	mov	r10,128
80004478:	30 0b       	mov	r11,0
8000447a:	02 9c       	mov	r12,r1
8000447c:	fe b0 fd f6 	rcall	80004068 <memset>
80004480:	40 28       	lddsp	r8,sp[0x8]
80004482:	40 19       	lddsp	r9,sp[0x4]
80004484:	e4 cc 00 01 	sub	r12,r2,1
80004488:	0e 9b       	mov	r11,r7
8000448a:	50 3c       	stdsp	sp[0xc],r12
8000448c:	f2 0c 0c 49 	max	r9,r9,r12
80004490:	c3 a8       	rjmp	80004504 <get_arg+0x274>
80004492:	62 0a       	ld.w	r10,r1[0x0]
80004494:	5b fa       	cp.w	r10,-1
80004496:	c0 b1       	brne	800044ac <get_arg+0x21c>
80004498:	50 19       	stdsp	sp[0x4],r9
8000449a:	50 28       	stdsp	sp[0x8],r8
8000449c:	e0 6a 00 80 	mov	r10,128
800044a0:	30 0b       	mov	r11,0
800044a2:	02 9c       	mov	r12,r1
800044a4:	fe b0 fd e2 	rcall	80004068 <memset>
800044a8:	40 28       	lddsp	r8,sp[0x8]
800044aa:	40 19       	lddsp	r9,sp[0x4]
800044ac:	20 12       	sub	r2,1
800044ae:	30 0a       	mov	r10,0
800044b0:	0e 9b       	mov	r11,r7
800044b2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800044b6:	f2 02 0c 49 	max	r9,r9,r2
800044ba:	c2 58       	rjmp	80004504 <get_arg+0x274>
800044bc:	16 97       	mov	r7,r11
800044be:	6c 0a       	ld.w	r10,r6[0x0]
800044c0:	f4 cb ff fc 	sub	r11,r10,-4
800044c4:	8d 0b       	st.w	r6[0x0],r11
800044c6:	74 0a       	ld.w	r10,r10[0x0]
800044c8:	0e 9b       	mov	r11,r7
800044ca:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800044ce:	2f f5       	sub	r5,-1
800044d0:	c1 a8       	rjmp	80004504 <get_arg+0x274>
800044d2:	f4 c2 00 30 	sub	r2,r10,48
800044d6:	c0 68       	rjmp	800044e2 <get_arg+0x252>
800044d8:	e4 02 00 22 	add	r2,r2,r2<<0x2
800044dc:	2f f7       	sub	r7,-1
800044de:	f4 02 00 12 	add	r2,r10,r2<<0x1
800044e2:	0f 8a       	ld.ub	r10,r7[0x0]
800044e4:	58 0a       	cp.w	r10,0
800044e6:	c0 e0       	breq	80004502 <get_arg+0x272>
800044e8:	23 0a       	sub	r10,48
800044ea:	58 9a       	cp.w	r10,9
800044ec:	fe 98 ff f6 	brls	800044d8 <get_arg+0x248>
800044f0:	c0 98       	rjmp	80004502 <get_arg+0x272>
800044f2:	2f f7       	sub	r7,-1
800044f4:	0f 8a       	ld.ub	r10,r7[0x0]
800044f6:	58 0a       	cp.w	r10,0
800044f8:	c0 50       	breq	80004502 <get_arg+0x272>
800044fa:	23 0a       	sub	r10,48
800044fc:	58 9a       	cp.w	r10,9
800044fe:	fe 98 ff fa 	brls	800044f2 <get_arg+0x262>
80004502:	0e 9b       	mov	r11,r7
80004504:	40 7c       	lddsp	r12,sp[0x1c]
80004506:	30 ba       	mov	r10,11
80004508:	f4 0c 18 00 	cp.b	r12,r10
8000450c:	fe 91 fe ec 	brne	800042e4 <get_arg+0x54>
80004510:	40 42       	lddsp	r2,sp[0x10]
80004512:	17 8c       	ld.ub	r12,r11[0x0]
80004514:	0a 32       	cp.w	r2,r5
80004516:	5f 4a       	srge	r10
80004518:	f0 0c 18 00 	cp.b	r12,r8
8000451c:	5f 1c       	srne	r12
8000451e:	f9 ea 00 0a 	and	r10,r12,r10
80004522:	f0 0a 18 00 	cp.b	r10,r8
80004526:	fe 91 fe c9 	brne	800042b8 <get_arg+0x28>
8000452a:	30 08       	mov	r8,0
8000452c:	40 4e       	lddsp	lr,sp[0x10]
8000452e:	17 8a       	ld.ub	r10,r11[0x0]
80004530:	e2 05 00 21 	add	r1,r1,r5<<0x2
80004534:	f0 0a 18 00 	cp.b	r10,r8
80004538:	fc 09 17 10 	movne	r9,lr
8000453c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80004540:	06 9e       	mov	lr,r3
80004542:	c2 a8       	rjmp	80004596 <get_arg+0x306>
80004544:	62 0a       	ld.w	r10,r1[0x0]
80004546:	58 3a       	cp.w	r10,3
80004548:	c1 e0       	breq	80004584 <get_arg+0x2f4>
8000454a:	e0 89 00 07 	brgt	80004558 <get_arg+0x2c8>
8000454e:	58 1a       	cp.w	r10,1
80004550:	c1 a0       	breq	80004584 <get_arg+0x2f4>
80004552:	58 2a       	cp.w	r10,2
80004554:	c1 81       	brne	80004584 <get_arg+0x2f4>
80004556:	c0 58       	rjmp	80004560 <get_arg+0x2d0>
80004558:	58 5a       	cp.w	r10,5
8000455a:	c0 c0       	breq	80004572 <get_arg+0x2e2>
8000455c:	c0 b5       	brlt	80004572 <get_arg+0x2e2>
8000455e:	c1 38       	rjmp	80004584 <get_arg+0x2f4>
80004560:	6c 0a       	ld.w	r10,r6[0x0]
80004562:	f4 cc ff f8 	sub	r12,r10,-8
80004566:	8d 0c       	st.w	r6[0x0],r12
80004568:	f4 e2 00 00 	ld.d	r2,r10[0]
8000456c:	f0 e3 00 00 	st.d	r8[0],r2
80004570:	c1 08       	rjmp	80004590 <get_arg+0x300>
80004572:	6c 0a       	ld.w	r10,r6[0x0]
80004574:	f4 cc ff f8 	sub	r12,r10,-8
80004578:	8d 0c       	st.w	r6[0x0],r12
8000457a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000457e:	f0 e3 00 00 	st.d	r8[0],r2
80004582:	c0 78       	rjmp	80004590 <get_arg+0x300>
80004584:	6c 0a       	ld.w	r10,r6[0x0]
80004586:	f4 cc ff fc 	sub	r12,r10,-4
8000458a:	8d 0c       	st.w	r6[0x0],r12
8000458c:	74 0a       	ld.w	r10,r10[0x0]
8000458e:	91 0a       	st.w	r8[0x0],r10
80004590:	2f f5       	sub	r5,-1
80004592:	2f 88       	sub	r8,-8
80004594:	2f c1       	sub	r1,-4
80004596:	12 35       	cp.w	r5,r9
80004598:	fe 9a ff d6 	brle	80004544 <get_arg+0x2b4>
8000459c:	1c 93       	mov	r3,lr
8000459e:	40 52       	lddsp	r2,sp[0x14]
800045a0:	40 6e       	lddsp	lr,sp[0x18]
800045a2:	85 05       	st.w	r2[0x0],r5
800045a4:	9d 0b       	st.w	lr[0x0],r11
800045a6:	40 4b       	lddsp	r11,sp[0x10]
800045a8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800045ac:	2f 8d       	sub	sp,-32
800045ae:	d8 32       	popm	r0-r7,pc

800045b0 <__sprint_r>:
800045b0:	d4 21       	pushm	r4-r7,lr
800045b2:	14 97       	mov	r7,r10
800045b4:	74 28       	ld.w	r8,r10[0x8]
800045b6:	58 08       	cp.w	r8,0
800045b8:	c0 41       	brne	800045c0 <__sprint_r+0x10>
800045ba:	95 18       	st.w	r10[0x4],r8
800045bc:	10 9c       	mov	r12,r8
800045be:	d8 22       	popm	r4-r7,pc
800045c0:	e0 a0 18 ca 	rcall	80007754 <__sfvwrite_r>
800045c4:	30 08       	mov	r8,0
800045c6:	8f 18       	st.w	r7[0x4],r8
800045c8:	8f 28       	st.w	r7[0x8],r8
800045ca:	d8 22       	popm	r4-r7,pc

800045cc <_vfprintf_r>:
800045cc:	d4 31       	pushm	r0-r7,lr
800045ce:	fa cd 06 bc 	sub	sp,sp,1724
800045d2:	51 09       	stdsp	sp[0x40],r9
800045d4:	16 91       	mov	r1,r11
800045d6:	14 97       	mov	r7,r10
800045d8:	18 95       	mov	r5,r12
800045da:	e0 a0 1a 33 	rcall	80007a40 <_localeconv_r>
800045de:	78 0c       	ld.w	r12,r12[0x0]
800045e0:	50 cc       	stdsp	sp[0x30],r12
800045e2:	58 05       	cp.w	r5,0
800045e4:	c0 70       	breq	800045f2 <_vfprintf_r+0x26>
800045e6:	6a 68       	ld.w	r8,r5[0x18]
800045e8:	58 08       	cp.w	r8,0
800045ea:	c0 41       	brne	800045f2 <_vfprintf_r+0x26>
800045ec:	0a 9c       	mov	r12,r5
800045ee:	e0 a0 17 4f 	rcall	8000748c <__sinit>
800045f2:	4d 08       	lddpc	r8,80004730 <_vfprintf_r+0x164>
800045f4:	10 31       	cp.w	r1,r8
800045f6:	c0 31       	brne	800045fc <_vfprintf_r+0x30>
800045f8:	6a 01       	ld.w	r1,r5[0x0]
800045fa:	c0 a8       	rjmp	8000460e <_vfprintf_r+0x42>
800045fc:	4c e8       	lddpc	r8,80004734 <_vfprintf_r+0x168>
800045fe:	10 31       	cp.w	r1,r8
80004600:	c0 31       	brne	80004606 <_vfprintf_r+0x3a>
80004602:	6a 11       	ld.w	r1,r5[0x4]
80004604:	c0 58       	rjmp	8000460e <_vfprintf_r+0x42>
80004606:	4c d8       	lddpc	r8,80004738 <_vfprintf_r+0x16c>
80004608:	10 31       	cp.w	r1,r8
8000460a:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000460e:	82 68       	ld.sh	r8,r1[0xc]
80004610:	ed b8 00 03 	bld	r8,0x3
80004614:	c0 41       	brne	8000461c <_vfprintf_r+0x50>
80004616:	62 48       	ld.w	r8,r1[0x10]
80004618:	58 08       	cp.w	r8,0
8000461a:	c0 71       	brne	80004628 <_vfprintf_r+0x5c>
8000461c:	02 9b       	mov	r11,r1
8000461e:	0a 9c       	mov	r12,r5
80004620:	e0 a0 0f 6c 	rcall	800064f8 <__swsetup_r>
80004624:	e0 81 0f 63 	brne	800064ea <_vfprintf_r+0x1f1e>
80004628:	82 68       	ld.sh	r8,r1[0xc]
8000462a:	10 99       	mov	r9,r8
8000462c:	e2 19 00 1a 	andl	r9,0x1a,COH
80004630:	58 a9       	cp.w	r9,10
80004632:	c3 c1       	brne	800046aa <_vfprintf_r+0xde>
80004634:	82 79       	ld.sh	r9,r1[0xe]
80004636:	30 0a       	mov	r10,0
80004638:	f4 09 19 00 	cp.h	r9,r10
8000463c:	c3 75       	brlt	800046aa <_vfprintf_r+0xde>
8000463e:	a1 d8       	cbr	r8,0x1
80004640:	fb 58 05 d0 	st.h	sp[1488],r8
80004644:	62 88       	ld.w	r8,r1[0x20]
80004646:	fb 48 05 e4 	st.w	sp[1508],r8
8000464a:	62 a8       	ld.w	r8,r1[0x28]
8000464c:	fb 48 05 ec 	st.w	sp[1516],r8
80004650:	fa c8 ff bc 	sub	r8,sp,-68
80004654:	fb 48 05 d4 	st.w	sp[1492],r8
80004658:	fb 48 05 c4 	st.w	sp[1476],r8
8000465c:	e0 68 04 00 	mov	r8,1024
80004660:	fb 48 05 d8 	st.w	sp[1496],r8
80004664:	fb 48 05 cc 	st.w	sp[1484],r8
80004668:	30 08       	mov	r8,0
8000466a:	fb 59 05 d2 	st.h	sp[1490],r9
8000466e:	0e 9a       	mov	r10,r7
80004670:	41 09       	lddsp	r9,sp[0x40]
80004672:	fa c7 fa 3c 	sub	r7,sp,-1476
80004676:	fb 48 05 dc 	st.w	sp[1500],r8
8000467a:	0a 9c       	mov	r12,r5
8000467c:	0e 9b       	mov	r11,r7
8000467e:	ca 7f       	rcall	800045cc <_vfprintf_r>
80004680:	50 bc       	stdsp	sp[0x2c],r12
80004682:	c0 95       	brlt	80004694 <_vfprintf_r+0xc8>
80004684:	0e 9b       	mov	r11,r7
80004686:	0a 9c       	mov	r12,r5
80004688:	e0 a0 16 26 	rcall	800072d4 <_fflush_r>
8000468c:	40 be       	lddsp	lr,sp[0x2c]
8000468e:	f9 be 01 ff 	movne	lr,-1
80004692:	50 be       	stdsp	sp[0x2c],lr
80004694:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004698:	ed b8 00 06 	bld	r8,0x6
8000469c:	e0 81 0f 29 	brne	800064ee <_vfprintf_r+0x1f22>
800046a0:	82 68       	ld.sh	r8,r1[0xc]
800046a2:	a7 a8       	sbr	r8,0x6
800046a4:	a2 68       	st.h	r1[0xc],r8
800046a6:	e0 8f 0f 24 	bral	800064ee <_vfprintf_r+0x1f22>
800046aa:	30 08       	mov	r8,0
800046ac:	fb 48 06 b4 	st.w	sp[1716],r8
800046b0:	fb 48 06 90 	st.w	sp[1680],r8
800046b4:	fb 48 06 8c 	st.w	sp[1676],r8
800046b8:	fb 48 06 b0 	st.w	sp[1712],r8
800046bc:	30 08       	mov	r8,0
800046be:	30 09       	mov	r9,0
800046c0:	50 a7       	stdsp	sp[0x28],r7
800046c2:	50 78       	stdsp	sp[0x1c],r8
800046c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800046c8:	3f f8       	mov	r8,-1
800046ca:	50 59       	stdsp	sp[0x14],r9
800046cc:	fb 43 06 88 	st.w	sp[1672],r3
800046d0:	fb 48 05 44 	st.w	sp[1348],r8
800046d4:	12 9c       	mov	r12,r9
800046d6:	50 69       	stdsp	sp[0x18],r9
800046d8:	50 d9       	stdsp	sp[0x34],r9
800046da:	50 e9       	stdsp	sp[0x38],r9
800046dc:	50 b9       	stdsp	sp[0x2c],r9
800046de:	12 97       	mov	r7,r9
800046e0:	0a 94       	mov	r4,r5
800046e2:	40 a2       	lddsp	r2,sp[0x28]
800046e4:	32 5a       	mov	r10,37
800046e6:	30 08       	mov	r8,0
800046e8:	c0 28       	rjmp	800046ec <_vfprintf_r+0x120>
800046ea:	2f f2       	sub	r2,-1
800046ec:	05 89       	ld.ub	r9,r2[0x0]
800046ee:	f0 09 18 00 	cp.b	r9,r8
800046f2:	5f 1b       	srne	r11
800046f4:	f4 09 18 00 	cp.b	r9,r10
800046f8:	5f 19       	srne	r9
800046fa:	f3 eb 00 0b 	and	r11,r9,r11
800046fe:	f0 0b 18 00 	cp.b	r11,r8
80004702:	cf 41       	brne	800046ea <_vfprintf_r+0x11e>
80004704:	40 ab       	lddsp	r11,sp[0x28]
80004706:	e4 0b 01 06 	sub	r6,r2,r11
8000470a:	c2 50       	breq	80004754 <_vfprintf_r+0x188>
8000470c:	fa f8 06 90 	ld.w	r8,sp[1680]
80004710:	0c 08       	add	r8,r6
80004712:	87 0b       	st.w	r3[0x0],r11
80004714:	fb 48 06 90 	st.w	sp[1680],r8
80004718:	87 16       	st.w	r3[0x4],r6
8000471a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000471e:	2f f8       	sub	r8,-1
80004720:	fb 48 06 8c 	st.w	sp[1676],r8
80004724:	58 78       	cp.w	r8,7
80004726:	e0 89 00 0b 	brgt	8000473c <_vfprintf_r+0x170>
8000472a:	2f 83       	sub	r3,-8
8000472c:	c1 18       	rjmp	8000474e <_vfprintf_r+0x182>
8000472e:	d7 03       	nop
80004730:	80 00       	ld.sh	r0,r0[0x0]
80004732:	a4 1c       	st.h	r2[0x2],r12
80004734:	80 00       	ld.sh	r0,r0[0x0]
80004736:	a4 3c       	st.h	r2[0x6],r12
80004738:	80 00       	ld.sh	r0,r0[0x0]
8000473a:	a4 5c       	st.h	r2[0xa],r12
8000473c:	fa ca f9 78 	sub	r10,sp,-1672
80004740:	02 9b       	mov	r11,r1
80004742:	08 9c       	mov	r12,r4
80004744:	c3 6f       	rcall	800045b0 <__sprint_r>
80004746:	e0 81 0e ce 	brne	800064e2 <_vfprintf_r+0x1f16>
8000474a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000474e:	40 ba       	lddsp	r10,sp[0x2c]
80004750:	0c 0a       	add	r10,r6
80004752:	50 ba       	stdsp	sp[0x2c],r10
80004754:	05 89       	ld.ub	r9,r2[0x0]
80004756:	30 08       	mov	r8,0
80004758:	f0 09 18 00 	cp.b	r9,r8
8000475c:	e0 80 0e b2 	breq	800064c0 <_vfprintf_r+0x1ef4>
80004760:	30 09       	mov	r9,0
80004762:	fb 68 06 bb 	st.b	sp[1723],r8
80004766:	0e 96       	mov	r6,r7
80004768:	e4 c8 ff ff 	sub	r8,r2,-1
8000476c:	3f fe       	mov	lr,-1
8000476e:	50 93       	stdsp	sp[0x24],r3
80004770:	50 41       	stdsp	sp[0x10],r1
80004772:	0e 93       	mov	r3,r7
80004774:	04 91       	mov	r1,r2
80004776:	50 89       	stdsp	sp[0x20],r9
80004778:	50 a8       	stdsp	sp[0x28],r8
8000477a:	50 2e       	stdsp	sp[0x8],lr
8000477c:	50 39       	stdsp	sp[0xc],r9
8000477e:	12 95       	mov	r5,r9
80004780:	12 90       	mov	r0,r9
80004782:	10 97       	mov	r7,r8
80004784:	08 92       	mov	r2,r4
80004786:	c0 78       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004788:	3f fc       	mov	r12,-1
8000478a:	08 97       	mov	r7,r4
8000478c:	50 2c       	stdsp	sp[0x8],r12
8000478e:	c0 38       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004790:	30 0b       	mov	r11,0
80004792:	50 3b       	stdsp	sp[0xc],r11
80004794:	0f 38       	ld.ub	r8,r7++
80004796:	c0 28       	rjmp	8000479a <_vfprintf_r+0x1ce>
80004798:	12 90       	mov	r0,r9
8000479a:	f0 c9 00 20 	sub	r9,r8,32
8000479e:	e0 49 00 58 	cp.w	r9,88
800047a2:	e0 8b 0a 36 	brhi	80005c0e <_vfprintf_r+0x1642>
800047a6:	4d 9a       	lddpc	r10,80004908 <_vfprintf_r+0x33c>
800047a8:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800047ac:	50 a7       	stdsp	sp[0x28],r7
800047ae:	50 80       	stdsp	sp[0x20],r0
800047b0:	0c 97       	mov	r7,r6
800047b2:	04 94       	mov	r4,r2
800047b4:	06 96       	mov	r6,r3
800047b6:	02 92       	mov	r2,r1
800047b8:	4d 59       	lddpc	r9,8000490c <_vfprintf_r+0x340>
800047ba:	40 93       	lddsp	r3,sp[0x24]
800047bc:	10 90       	mov	r0,r8
800047be:	40 41       	lddsp	r1,sp[0x10]
800047c0:	50 d9       	stdsp	sp[0x34],r9
800047c2:	e0 8f 08 95 	bral	800058ec <_vfprintf_r+0x1320>
800047c6:	30 08       	mov	r8,0
800047c8:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800047cc:	f0 09 18 00 	cp.b	r9,r8
800047d0:	ce 21       	brne	80004794 <_vfprintf_r+0x1c8>
800047d2:	32 08       	mov	r8,32
800047d4:	c6 e8       	rjmp	800048b0 <_vfprintf_r+0x2e4>
800047d6:	a1 a5       	sbr	r5,0x0
800047d8:	cd eb       	rjmp	80004794 <_vfprintf_r+0x1c8>
800047da:	0f 89       	ld.ub	r9,r7[0x0]
800047dc:	f2 c8 00 30 	sub	r8,r9,48
800047e0:	58 98       	cp.w	r8,9
800047e2:	e0 8b 00 1d 	brhi	8000481c <_vfprintf_r+0x250>
800047e6:	ee c8 ff ff 	sub	r8,r7,-1
800047ea:	30 0b       	mov	r11,0
800047ec:	23 09       	sub	r9,48
800047ee:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800047f2:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800047f6:	11 39       	ld.ub	r9,r8++
800047f8:	f2 ca 00 30 	sub	r10,r9,48
800047fc:	58 9a       	cp.w	r10,9
800047fe:	fe 98 ff f7 	brls	800047ec <_vfprintf_r+0x220>
80004802:	e0 49 00 24 	cp.w	r9,36
80004806:	cc 51       	brne	80004790 <_vfprintf_r+0x1c4>
80004808:	e0 4b 00 20 	cp.w	r11,32
8000480c:	e0 89 0e 6a 	brgt	800064e0 <_vfprintf_r+0x1f14>
80004810:	20 1b       	sub	r11,1
80004812:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004816:	12 3b       	cp.w	r11,r9
80004818:	c0 95       	brlt	8000482a <_vfprintf_r+0x25e>
8000481a:	c1 08       	rjmp	8000483a <_vfprintf_r+0x26e>
8000481c:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004820:	ec ca ff ff 	sub	r10,r6,-1
80004824:	12 36       	cp.w	r6,r9
80004826:	c1 f5       	brlt	80004864 <_vfprintf_r+0x298>
80004828:	c2 68       	rjmp	80004874 <_vfprintf_r+0x2a8>
8000482a:	fa ce f9 44 	sub	lr,sp,-1724
8000482e:	10 97       	mov	r7,r8
80004830:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004834:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004838:	c3 58       	rjmp	800048a2 <_vfprintf_r+0x2d6>
8000483a:	10 97       	mov	r7,r8
8000483c:	fa c8 f9 50 	sub	r8,sp,-1712
80004840:	1a d8       	st.w	--sp,r8
80004842:	fa c8 fa b8 	sub	r8,sp,-1352
80004846:	1a d8       	st.w	--sp,r8
80004848:	fa c8 fb b4 	sub	r8,sp,-1100
8000484c:	02 9a       	mov	r10,r1
8000484e:	1a d8       	st.w	--sp,r8
80004850:	04 9c       	mov	r12,r2
80004852:	fa c8 f9 40 	sub	r8,sp,-1728
80004856:	fa c9 ff b4 	sub	r9,sp,-76
8000485a:	fe b0 fd 1b 	rcall	80004290 <get_arg>
8000485e:	2f dd       	sub	sp,-12
80004860:	78 00       	ld.w	r0,r12[0x0]
80004862:	c2 08       	rjmp	800048a2 <_vfprintf_r+0x2d6>
80004864:	fa cc f9 44 	sub	r12,sp,-1724
80004868:	14 96       	mov	r6,r10
8000486a:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000486e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004872:	c1 88       	rjmp	800048a2 <_vfprintf_r+0x2d6>
80004874:	41 08       	lddsp	r8,sp[0x40]
80004876:	59 f9       	cp.w	r9,31
80004878:	e0 89 00 11 	brgt	8000489a <_vfprintf_r+0x2ce>
8000487c:	f0 cb ff fc 	sub	r11,r8,-4
80004880:	51 0b       	stdsp	sp[0x40],r11
80004882:	70 00       	ld.w	r0,r8[0x0]
80004884:	fa cb f9 44 	sub	r11,sp,-1724
80004888:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000488c:	f1 40 fd 88 	st.w	r8[-632],r0
80004890:	2f f9       	sub	r9,-1
80004892:	14 96       	mov	r6,r10
80004894:	fb 49 06 b4 	st.w	sp[1716],r9
80004898:	c0 58       	rjmp	800048a2 <_vfprintf_r+0x2d6>
8000489a:	70 00       	ld.w	r0,r8[0x0]
8000489c:	14 96       	mov	r6,r10
8000489e:	2f c8       	sub	r8,-4
800048a0:	51 08       	stdsp	sp[0x40],r8
800048a2:	58 00       	cp.w	r0,0
800048a4:	fe 94 ff 78 	brge	80004794 <_vfprintf_r+0x1c8>
800048a8:	5c 30       	neg	r0
800048aa:	a3 a5       	sbr	r5,0x2
800048ac:	c7 4b       	rjmp	80004794 <_vfprintf_r+0x1c8>
800048ae:	32 b8       	mov	r8,43
800048b0:	fb 68 06 bb 	st.b	sp[1723],r8
800048b4:	c7 0b       	rjmp	80004794 <_vfprintf_r+0x1c8>
800048b6:	0f 38       	ld.ub	r8,r7++
800048b8:	e0 48 00 2a 	cp.w	r8,42
800048bc:	c0 30       	breq	800048c2 <_vfprintf_r+0x2f6>
800048be:	30 09       	mov	r9,0
800048c0:	c7 d8       	rjmp	800049ba <_vfprintf_r+0x3ee>
800048c2:	0f 88       	ld.ub	r8,r7[0x0]
800048c4:	f0 c9 00 30 	sub	r9,r8,48
800048c8:	58 99       	cp.w	r9,9
800048ca:	e0 8b 00 23 	brhi	80004910 <_vfprintf_r+0x344>
800048ce:	ee c4 ff ff 	sub	r4,r7,-1
800048d2:	30 0b       	mov	r11,0
800048d4:	23 08       	sub	r8,48
800048d6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800048da:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800048de:	09 38       	ld.ub	r8,r4++
800048e0:	f0 c9 00 30 	sub	r9,r8,48
800048e4:	58 99       	cp.w	r9,9
800048e6:	fe 98 ff f7 	brls	800048d4 <_vfprintf_r+0x308>
800048ea:	e0 48 00 24 	cp.w	r8,36
800048ee:	fe 91 ff 51 	brne	80004790 <_vfprintf_r+0x1c4>
800048f2:	e0 4b 00 20 	cp.w	r11,32
800048f6:	e0 89 0d f5 	brgt	800064e0 <_vfprintf_r+0x1f14>
800048fa:	20 1b       	sub	r11,1
800048fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004900:	10 3b       	cp.w	r11,r8
80004902:	c0 e5       	brlt	8000491e <_vfprintf_r+0x352>
80004904:	c1 58       	rjmp	8000492e <_vfprintf_r+0x362>
80004906:	d7 03       	nop
80004908:	80 00       	ld.sh	r0,r0[0x0]
8000490a:	a0 74       	st.h	r0[0xe],r4
8000490c:	80 00       	ld.sh	r0,r0[0x0]
8000490e:	a2 b0       	st.b	r1[0x3],r0
80004910:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004914:	ec c9 ff ff 	sub	r9,r6,-1
80004918:	14 36       	cp.w	r6,r10
8000491a:	c1 f5       	brlt	80004958 <_vfprintf_r+0x38c>
8000491c:	c2 88       	rjmp	8000496c <_vfprintf_r+0x3a0>
8000491e:	fa ca f9 44 	sub	r10,sp,-1724
80004922:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80004926:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000492a:	50 2b       	stdsp	sp[0x8],r11
8000492c:	c3 c8       	rjmp	800049a4 <_vfprintf_r+0x3d8>
8000492e:	fa c8 f9 50 	sub	r8,sp,-1712
80004932:	1a d8       	st.w	--sp,r8
80004934:	fa c8 fa b8 	sub	r8,sp,-1352
80004938:	1a d8       	st.w	--sp,r8
8000493a:	fa c8 fb b4 	sub	r8,sp,-1100
8000493e:	02 9a       	mov	r10,r1
80004940:	1a d8       	st.w	--sp,r8
80004942:	04 9c       	mov	r12,r2
80004944:	fa c8 f9 40 	sub	r8,sp,-1728
80004948:	fa c9 ff b4 	sub	r9,sp,-76
8000494c:	fe b0 fc a2 	rcall	80004290 <get_arg>
80004950:	2f dd       	sub	sp,-12
80004952:	78 0c       	ld.w	r12,r12[0x0]
80004954:	50 2c       	stdsp	sp[0x8],r12
80004956:	c2 78       	rjmp	800049a4 <_vfprintf_r+0x3d8>
80004958:	12 96       	mov	r6,r9
8000495a:	0e 94       	mov	r4,r7
8000495c:	fa c9 f9 44 	sub	r9,sp,-1724
80004960:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004964:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004968:	50 28       	stdsp	sp[0x8],r8
8000496a:	c1 d8       	rjmp	800049a4 <_vfprintf_r+0x3d8>
8000496c:	41 08       	lddsp	r8,sp[0x40]
8000496e:	59 fa       	cp.w	r10,31
80004970:	e0 89 00 14 	brgt	80004998 <_vfprintf_r+0x3cc>
80004974:	f0 cb ff fc 	sub	r11,r8,-4
80004978:	70 08       	ld.w	r8,r8[0x0]
8000497a:	51 0b       	stdsp	sp[0x40],r11
8000497c:	50 28       	stdsp	sp[0x8],r8
8000497e:	fa c6 f9 44 	sub	r6,sp,-1724
80004982:	40 2e       	lddsp	lr,sp[0x8]
80004984:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004988:	f1 4e fd 88 	st.w	r8[-632],lr
8000498c:	2f fa       	sub	r10,-1
8000498e:	0e 94       	mov	r4,r7
80004990:	fb 4a 06 b4 	st.w	sp[1716],r10
80004994:	12 96       	mov	r6,r9
80004996:	c0 78       	rjmp	800049a4 <_vfprintf_r+0x3d8>
80004998:	70 0c       	ld.w	r12,r8[0x0]
8000499a:	0e 94       	mov	r4,r7
8000499c:	2f c8       	sub	r8,-4
8000499e:	50 2c       	stdsp	sp[0x8],r12
800049a0:	12 96       	mov	r6,r9
800049a2:	51 08       	stdsp	sp[0x40],r8
800049a4:	40 2b       	lddsp	r11,sp[0x8]
800049a6:	58 0b       	cp.w	r11,0
800049a8:	fe 95 fe f0 	brlt	80004788 <_vfprintf_r+0x1bc>
800049ac:	08 97       	mov	r7,r4
800049ae:	cf 3a       	rjmp	80004794 <_vfprintf_r+0x1c8>
800049b0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800049b4:	0f 38       	ld.ub	r8,r7++
800049b6:	f4 09 00 19 	add	r9,r10,r9<<0x1
800049ba:	f0 ca 00 30 	sub	r10,r8,48
800049be:	58 9a       	cp.w	r10,9
800049c0:	fe 98 ff f8 	brls	800049b0 <_vfprintf_r+0x3e4>
800049c4:	3f fa       	mov	r10,-1
800049c6:	f2 0a 0c 49 	max	r9,r9,r10
800049ca:	50 29       	stdsp	sp[0x8],r9
800049cc:	ce 7a       	rjmp	8000479a <_vfprintf_r+0x1ce>
800049ce:	a7 b5       	sbr	r5,0x7
800049d0:	ce 2a       	rjmp	80004794 <_vfprintf_r+0x1c8>
800049d2:	30 09       	mov	r9,0
800049d4:	23 08       	sub	r8,48
800049d6:	f2 09 00 29 	add	r9,r9,r9<<0x2
800049da:	f0 09 00 19 	add	r9,r8,r9<<0x1
800049de:	0f 38       	ld.ub	r8,r7++
800049e0:	f0 ca 00 30 	sub	r10,r8,48
800049e4:	58 9a       	cp.w	r10,9
800049e6:	fe 98 ff f7 	brls	800049d4 <_vfprintf_r+0x408>
800049ea:	e0 48 00 24 	cp.w	r8,36
800049ee:	fe 91 fe d5 	brne	80004798 <_vfprintf_r+0x1cc>
800049f2:	e0 49 00 20 	cp.w	r9,32
800049f6:	e0 89 0d 75 	brgt	800064e0 <_vfprintf_r+0x1f14>
800049fa:	f2 c3 00 01 	sub	r3,r9,1
800049fe:	30 19       	mov	r9,1
80004a00:	50 39       	stdsp	sp[0xc],r9
80004a02:	cc 9a       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004a04:	a3 b5       	sbr	r5,0x3
80004a06:	cc 7a       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004a08:	a7 a5       	sbr	r5,0x6
80004a0a:	cc 5a       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004a0c:	0a 98       	mov	r8,r5
80004a0e:	a5 b5       	sbr	r5,0x5
80004a10:	a5 a8       	sbr	r8,0x4
80004a12:	0f 89       	ld.ub	r9,r7[0x0]
80004a14:	36 ce       	mov	lr,108
80004a16:	fc 09 18 00 	cp.b	r9,lr
80004a1a:	f7 b7 00 ff 	subeq	r7,-1
80004a1e:	f0 05 17 10 	movne	r5,r8
80004a22:	cb 9a       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004a24:	a5 b5       	sbr	r5,0x5
80004a26:	cb 7a       	rjmp	80004794 <_vfprintf_r+0x1c8>
80004a28:	50 a7       	stdsp	sp[0x28],r7
80004a2a:	50 80       	stdsp	sp[0x20],r0
80004a2c:	0c 97       	mov	r7,r6
80004a2e:	10 90       	mov	r0,r8
80004a30:	06 96       	mov	r6,r3
80004a32:	04 94       	mov	r4,r2
80004a34:	40 93       	lddsp	r3,sp[0x24]
80004a36:	02 92       	mov	r2,r1
80004a38:	0e 99       	mov	r9,r7
80004a3a:	40 41       	lddsp	r1,sp[0x10]
80004a3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a40:	40 3c       	lddsp	r12,sp[0xc]
80004a42:	58 0c       	cp.w	r12,0
80004a44:	c1 d0       	breq	80004a7e <_vfprintf_r+0x4b2>
80004a46:	10 36       	cp.w	r6,r8
80004a48:	c0 64       	brge	80004a54 <_vfprintf_r+0x488>
80004a4a:	fa cb f9 44 	sub	r11,sp,-1724
80004a4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a52:	c1 d8       	rjmp	80004a8c <_vfprintf_r+0x4c0>
80004a54:	fa c8 f9 50 	sub	r8,sp,-1712
80004a58:	1a d8       	st.w	--sp,r8
80004a5a:	fa c8 fa b8 	sub	r8,sp,-1352
80004a5e:	1a d8       	st.w	--sp,r8
80004a60:	fa c8 fb b4 	sub	r8,sp,-1100
80004a64:	1a d8       	st.w	--sp,r8
80004a66:	fa c8 f9 40 	sub	r8,sp,-1728
80004a6a:	fa c9 ff b4 	sub	r9,sp,-76
80004a6e:	04 9a       	mov	r10,r2
80004a70:	0c 9b       	mov	r11,r6
80004a72:	08 9c       	mov	r12,r4
80004a74:	fe b0 fc 0e 	rcall	80004290 <get_arg>
80004a78:	2f dd       	sub	sp,-12
80004a7a:	19 b8       	ld.ub	r8,r12[0x3]
80004a7c:	c2 28       	rjmp	80004ac0 <_vfprintf_r+0x4f4>
80004a7e:	2f f7       	sub	r7,-1
80004a80:	10 39       	cp.w	r9,r8
80004a82:	c0 84       	brge	80004a92 <_vfprintf_r+0x4c6>
80004a84:	fa ca f9 44 	sub	r10,sp,-1724
80004a88:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a8c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004a90:	c1 88       	rjmp	80004ac0 <_vfprintf_r+0x4f4>
80004a92:	41 09       	lddsp	r9,sp[0x40]
80004a94:	59 f8       	cp.w	r8,31
80004a96:	e0 89 00 12 	brgt	80004aba <_vfprintf_r+0x4ee>
80004a9a:	f2 ca ff fc 	sub	r10,r9,-4
80004a9e:	51 0a       	stdsp	sp[0x40],r10
80004aa0:	72 09       	ld.w	r9,r9[0x0]
80004aa2:	fa c6 f9 44 	sub	r6,sp,-1724
80004aa6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004aaa:	2f f8       	sub	r8,-1
80004aac:	f5 49 fd 88 	st.w	r10[-632],r9
80004ab0:	fb 48 06 b4 	st.w	sp[1716],r8
80004ab4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004ab8:	c0 48       	rjmp	80004ac0 <_vfprintf_r+0x4f4>
80004aba:	13 b8       	ld.ub	r8,r9[0x3]
80004abc:	2f c9       	sub	r9,-4
80004abe:	51 09       	stdsp	sp[0x40],r9
80004ac0:	fb 68 06 60 	st.b	sp[1632],r8
80004ac4:	30 0e       	mov	lr,0
80004ac6:	30 08       	mov	r8,0
80004ac8:	30 12       	mov	r2,1
80004aca:	fb 68 06 bb 	st.b	sp[1723],r8
80004ace:	50 2e       	stdsp	sp[0x8],lr
80004ad0:	e0 8f 08 b1 	bral	80005c32 <_vfprintf_r+0x1666>
80004ad4:	50 a7       	stdsp	sp[0x28],r7
80004ad6:	50 80       	stdsp	sp[0x20],r0
80004ad8:	0c 97       	mov	r7,r6
80004ada:	04 94       	mov	r4,r2
80004adc:	06 96       	mov	r6,r3
80004ade:	02 92       	mov	r2,r1
80004ae0:	40 93       	lddsp	r3,sp[0x24]
80004ae2:	10 90       	mov	r0,r8
80004ae4:	40 41       	lddsp	r1,sp[0x10]
80004ae6:	a5 a5       	sbr	r5,0x4
80004ae8:	c0 a8       	rjmp	80004afc <_vfprintf_r+0x530>
80004aea:	50 a7       	stdsp	sp[0x28],r7
80004aec:	50 80       	stdsp	sp[0x20],r0
80004aee:	0c 97       	mov	r7,r6
80004af0:	04 94       	mov	r4,r2
80004af2:	06 96       	mov	r6,r3
80004af4:	02 92       	mov	r2,r1
80004af6:	40 93       	lddsp	r3,sp[0x24]
80004af8:	10 90       	mov	r0,r8
80004afa:	40 41       	lddsp	r1,sp[0x10]
80004afc:	ed b5 00 05 	bld	r5,0x5
80004b00:	c5 11       	brne	80004ba2 <_vfprintf_r+0x5d6>
80004b02:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b06:	40 3c       	lddsp	r12,sp[0xc]
80004b08:	58 0c       	cp.w	r12,0
80004b0a:	c1 e0       	breq	80004b46 <_vfprintf_r+0x57a>
80004b0c:	10 36       	cp.w	r6,r8
80004b0e:	c0 64       	brge	80004b1a <_vfprintf_r+0x54e>
80004b10:	fa cb f9 44 	sub	r11,sp,-1724
80004b14:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b18:	c2 08       	rjmp	80004b58 <_vfprintf_r+0x58c>
80004b1a:	fa c8 f9 50 	sub	r8,sp,-1712
80004b1e:	1a d8       	st.w	--sp,r8
80004b20:	fa c8 fa b8 	sub	r8,sp,-1352
80004b24:	0c 9b       	mov	r11,r6
80004b26:	1a d8       	st.w	--sp,r8
80004b28:	fa c8 fb b4 	sub	r8,sp,-1100
80004b2c:	1a d8       	st.w	--sp,r8
80004b2e:	fa c9 ff b4 	sub	r9,sp,-76
80004b32:	fa c8 f9 40 	sub	r8,sp,-1728
80004b36:	04 9a       	mov	r10,r2
80004b38:	08 9c       	mov	r12,r4
80004b3a:	fe b0 fb ab 	rcall	80004290 <get_arg>
80004b3e:	2f dd       	sub	sp,-12
80004b40:	78 1b       	ld.w	r11,r12[0x4]
80004b42:	78 09       	ld.w	r9,r12[0x0]
80004b44:	c2 b8       	rjmp	80004b9a <_vfprintf_r+0x5ce>
80004b46:	ee ca ff ff 	sub	r10,r7,-1
80004b4a:	10 37       	cp.w	r7,r8
80004b4c:	c0 b4       	brge	80004b62 <_vfprintf_r+0x596>
80004b4e:	fa c9 f9 44 	sub	r9,sp,-1724
80004b52:	14 97       	mov	r7,r10
80004b54:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b58:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004b5c:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004b60:	c1 d8       	rjmp	80004b9a <_vfprintf_r+0x5ce>
80004b62:	41 09       	lddsp	r9,sp[0x40]
80004b64:	59 f8       	cp.w	r8,31
80004b66:	e0 89 00 14 	brgt	80004b8e <_vfprintf_r+0x5c2>
80004b6a:	f2 cb ff f8 	sub	r11,r9,-8
80004b6e:	51 0b       	stdsp	sp[0x40],r11
80004b70:	fa c6 f9 44 	sub	r6,sp,-1724
80004b74:	72 1b       	ld.w	r11,r9[0x4]
80004b76:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004b7a:	72 09       	ld.w	r9,r9[0x0]
80004b7c:	f9 4b fd 8c 	st.w	r12[-628],r11
80004b80:	f9 49 fd 88 	st.w	r12[-632],r9
80004b84:	2f f8       	sub	r8,-1
80004b86:	14 97       	mov	r7,r10
80004b88:	fb 48 06 b4 	st.w	sp[1716],r8
80004b8c:	c0 78       	rjmp	80004b9a <_vfprintf_r+0x5ce>
80004b8e:	f2 c8 ff f8 	sub	r8,r9,-8
80004b92:	72 1b       	ld.w	r11,r9[0x4]
80004b94:	14 97       	mov	r7,r10
80004b96:	51 08       	stdsp	sp[0x40],r8
80004b98:	72 09       	ld.w	r9,r9[0x0]
80004b9a:	16 98       	mov	r8,r11
80004b9c:	fa e9 00 00 	st.d	sp[0],r8
80004ba0:	ca e8       	rjmp	80004cfc <_vfprintf_r+0x730>
80004ba2:	ed b5 00 04 	bld	r5,0x4
80004ba6:	c1 71       	brne	80004bd4 <_vfprintf_r+0x608>
80004ba8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bac:	40 3e       	lddsp	lr,sp[0xc]
80004bae:	58 0e       	cp.w	lr,0
80004bb0:	c0 80       	breq	80004bc0 <_vfprintf_r+0x5f4>
80004bb2:	10 36       	cp.w	r6,r8
80004bb4:	c6 94       	brge	80004c86 <_vfprintf_r+0x6ba>
80004bb6:	fa cc f9 44 	sub	r12,sp,-1724
80004bba:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004bbe:	c8 28       	rjmp	80004cc2 <_vfprintf_r+0x6f6>
80004bc0:	ee ca ff ff 	sub	r10,r7,-1
80004bc4:	10 37       	cp.w	r7,r8
80004bc6:	e0 84 00 81 	brge	80004cc8 <_vfprintf_r+0x6fc>
80004bca:	fa cb f9 44 	sub	r11,sp,-1724
80004bce:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bd2:	c7 78       	rjmp	80004cc0 <_vfprintf_r+0x6f4>
80004bd4:	ed b5 00 06 	bld	r5,0x6
80004bd8:	c4 b1       	brne	80004c6e <_vfprintf_r+0x6a2>
80004bda:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bde:	40 3c       	lddsp	r12,sp[0xc]
80004be0:	58 0c       	cp.w	r12,0
80004be2:	c1 d0       	breq	80004c1c <_vfprintf_r+0x650>
80004be4:	10 36       	cp.w	r6,r8
80004be6:	c0 64       	brge	80004bf2 <_vfprintf_r+0x626>
80004be8:	fa cb f9 44 	sub	r11,sp,-1724
80004bec:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bf0:	c1 f8       	rjmp	80004c2e <_vfprintf_r+0x662>
80004bf2:	fa c8 f9 50 	sub	r8,sp,-1712
80004bf6:	1a d8       	st.w	--sp,r8
80004bf8:	fa c8 fa b8 	sub	r8,sp,-1352
80004bfc:	1a d8       	st.w	--sp,r8
80004bfe:	fa c8 fb b4 	sub	r8,sp,-1100
80004c02:	1a d8       	st.w	--sp,r8
80004c04:	fa c8 f9 40 	sub	r8,sp,-1728
80004c08:	fa c9 ff b4 	sub	r9,sp,-76
80004c0c:	04 9a       	mov	r10,r2
80004c0e:	0c 9b       	mov	r11,r6
80004c10:	08 9c       	mov	r12,r4
80004c12:	fe b0 fb 3f 	rcall	80004290 <get_arg>
80004c16:	2f dd       	sub	sp,-12
80004c18:	98 18       	ld.sh	r8,r12[0x2]
80004c1a:	c2 68       	rjmp	80004c66 <_vfprintf_r+0x69a>
80004c1c:	ee ca ff ff 	sub	r10,r7,-1
80004c20:	10 37       	cp.w	r7,r8
80004c22:	c0 94       	brge	80004c34 <_vfprintf_r+0x668>
80004c24:	fa c9 f9 44 	sub	r9,sp,-1724
80004c28:	14 97       	mov	r7,r10
80004c2a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c2e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004c32:	c1 a8       	rjmp	80004c66 <_vfprintf_r+0x69a>
80004c34:	41 09       	lddsp	r9,sp[0x40]
80004c36:	59 f8       	cp.w	r8,31
80004c38:	e0 89 00 13 	brgt	80004c5e <_vfprintf_r+0x692>
80004c3c:	f2 cb ff fc 	sub	r11,r9,-4
80004c40:	51 0b       	stdsp	sp[0x40],r11
80004c42:	72 09       	ld.w	r9,r9[0x0]
80004c44:	fa c6 f9 44 	sub	r6,sp,-1724
80004c48:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004c4c:	2f f8       	sub	r8,-1
80004c4e:	f7 49 fd 88 	st.w	r11[-632],r9
80004c52:	fb 48 06 b4 	st.w	sp[1716],r8
80004c56:	14 97       	mov	r7,r10
80004c58:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004c5c:	c0 58       	rjmp	80004c66 <_vfprintf_r+0x69a>
80004c5e:	92 18       	ld.sh	r8,r9[0x2]
80004c60:	14 97       	mov	r7,r10
80004c62:	2f c9       	sub	r9,-4
80004c64:	51 09       	stdsp	sp[0x40],r9
80004c66:	50 18       	stdsp	sp[0x4],r8
80004c68:	bf 58       	asr	r8,0x1f
80004c6a:	50 08       	stdsp	sp[0x0],r8
80004c6c:	c4 88       	rjmp	80004cfc <_vfprintf_r+0x730>
80004c6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c72:	40 3c       	lddsp	r12,sp[0xc]
80004c74:	58 0c       	cp.w	r12,0
80004c76:	c1 d0       	breq	80004cb0 <_vfprintf_r+0x6e4>
80004c78:	10 36       	cp.w	r6,r8
80004c7a:	c0 64       	brge	80004c86 <_vfprintf_r+0x6ba>
80004c7c:	fa cb f9 44 	sub	r11,sp,-1724
80004c80:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c84:	c1 f8       	rjmp	80004cc2 <_vfprintf_r+0x6f6>
80004c86:	fa c8 f9 50 	sub	r8,sp,-1712
80004c8a:	1a d8       	st.w	--sp,r8
80004c8c:	fa c8 fa b8 	sub	r8,sp,-1352
80004c90:	0c 9b       	mov	r11,r6
80004c92:	1a d8       	st.w	--sp,r8
80004c94:	fa c8 fb b4 	sub	r8,sp,-1100
80004c98:	04 9a       	mov	r10,r2
80004c9a:	1a d8       	st.w	--sp,r8
80004c9c:	08 9c       	mov	r12,r4
80004c9e:	fa c8 f9 40 	sub	r8,sp,-1728
80004ca2:	fa c9 ff b4 	sub	r9,sp,-76
80004ca6:	fe b0 fa f5 	rcall	80004290 <get_arg>
80004caa:	2f dd       	sub	sp,-12
80004cac:	78 0b       	ld.w	r11,r12[0x0]
80004cae:	c2 48       	rjmp	80004cf6 <_vfprintf_r+0x72a>
80004cb0:	ee ca ff ff 	sub	r10,r7,-1
80004cb4:	10 37       	cp.w	r7,r8
80004cb6:	c0 94       	brge	80004cc8 <_vfprintf_r+0x6fc>
80004cb8:	fa c9 f9 44 	sub	r9,sp,-1724
80004cbc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cc0:	14 97       	mov	r7,r10
80004cc2:	ec fb fd 88 	ld.w	r11,r6[-632]
80004cc6:	c1 88       	rjmp	80004cf6 <_vfprintf_r+0x72a>
80004cc8:	41 09       	lddsp	r9,sp[0x40]
80004cca:	59 f8       	cp.w	r8,31
80004ccc:	e0 89 00 11 	brgt	80004cee <_vfprintf_r+0x722>
80004cd0:	f2 cb ff fc 	sub	r11,r9,-4
80004cd4:	51 0b       	stdsp	sp[0x40],r11
80004cd6:	fa c6 f9 44 	sub	r6,sp,-1724
80004cda:	72 0b       	ld.w	r11,r9[0x0]
80004cdc:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ce0:	f3 4b fd 88 	st.w	r9[-632],r11
80004ce4:	2f f8       	sub	r8,-1
80004ce6:	14 97       	mov	r7,r10
80004ce8:	fb 48 06 b4 	st.w	sp[1716],r8
80004cec:	c0 58       	rjmp	80004cf6 <_vfprintf_r+0x72a>
80004cee:	72 0b       	ld.w	r11,r9[0x0]
80004cf0:	14 97       	mov	r7,r10
80004cf2:	2f c9       	sub	r9,-4
80004cf4:	51 09       	stdsp	sp[0x40],r9
80004cf6:	50 1b       	stdsp	sp[0x4],r11
80004cf8:	bf 5b       	asr	r11,0x1f
80004cfa:	50 0b       	stdsp	sp[0x0],r11
80004cfc:	fa ea 00 00 	ld.d	r10,sp[0]
80004d00:	58 0a       	cp.w	r10,0
80004d02:	5c 2b       	cpc	r11
80004d04:	c0 e4       	brge	80004d20 <_vfprintf_r+0x754>
80004d06:	30 08       	mov	r8,0
80004d08:	fa ea 00 00 	ld.d	r10,sp[0]
80004d0c:	30 09       	mov	r9,0
80004d0e:	f0 0a 01 0a 	sub	r10,r8,r10
80004d12:	f2 0b 01 4b 	sbc	r11,r9,r11
80004d16:	32 d8       	mov	r8,45
80004d18:	fa eb 00 00 	st.d	sp[0],r10
80004d1c:	fb 68 06 bb 	st.b	sp[1723],r8
80004d20:	30 18       	mov	r8,1
80004d22:	e0 8f 06 fe 	bral	80005b1e <_vfprintf_r+0x1552>
80004d26:	50 a7       	stdsp	sp[0x28],r7
80004d28:	50 80       	stdsp	sp[0x20],r0
80004d2a:	0c 97       	mov	r7,r6
80004d2c:	04 94       	mov	r4,r2
80004d2e:	06 96       	mov	r6,r3
80004d30:	02 92       	mov	r2,r1
80004d32:	40 93       	lddsp	r3,sp[0x24]
80004d34:	10 90       	mov	r0,r8
80004d36:	40 41       	lddsp	r1,sp[0x10]
80004d38:	0e 99       	mov	r9,r7
80004d3a:	ed b5 00 03 	bld	r5,0x3
80004d3e:	c4 11       	brne	80004dc0 <_vfprintf_r+0x7f4>
80004d40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d44:	40 3a       	lddsp	r10,sp[0xc]
80004d46:	58 0a       	cp.w	r10,0
80004d48:	c1 90       	breq	80004d7a <_vfprintf_r+0x7ae>
80004d4a:	10 36       	cp.w	r6,r8
80004d4c:	c6 45       	brlt	80004e14 <_vfprintf_r+0x848>
80004d4e:	fa c8 f9 50 	sub	r8,sp,-1712
80004d52:	1a d8       	st.w	--sp,r8
80004d54:	fa c8 fa b8 	sub	r8,sp,-1352
80004d58:	1a d8       	st.w	--sp,r8
80004d5a:	fa c8 fb b4 	sub	r8,sp,-1100
80004d5e:	0c 9b       	mov	r11,r6
80004d60:	1a d8       	st.w	--sp,r8
80004d62:	04 9a       	mov	r10,r2
80004d64:	fa c8 f9 40 	sub	r8,sp,-1728
80004d68:	fa c9 ff b4 	sub	r9,sp,-76
80004d6c:	08 9c       	mov	r12,r4
80004d6e:	fe b0 fa 91 	rcall	80004290 <get_arg>
80004d72:	2f dd       	sub	sp,-12
80004d74:	78 16       	ld.w	r6,r12[0x4]
80004d76:	50 76       	stdsp	sp[0x1c],r6
80004d78:	c4 88       	rjmp	80004e08 <_vfprintf_r+0x83c>
80004d7a:	2f f7       	sub	r7,-1
80004d7c:	10 39       	cp.w	r9,r8
80004d7e:	c0 c4       	brge	80004d96 <_vfprintf_r+0x7ca>
80004d80:	fa ce f9 44 	sub	lr,sp,-1724
80004d84:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004d88:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004d8c:	50 7c       	stdsp	sp[0x1c],r12
80004d8e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004d92:	50 56       	stdsp	sp[0x14],r6
80004d94:	c6 68       	rjmp	80004e60 <_vfprintf_r+0x894>
80004d96:	41 09       	lddsp	r9,sp[0x40]
80004d98:	59 f8       	cp.w	r8,31
80004d9a:	e0 89 00 10 	brgt	80004dba <_vfprintf_r+0x7ee>
80004d9e:	f2 ca ff f8 	sub	r10,r9,-8
80004da2:	72 1b       	ld.w	r11,r9[0x4]
80004da4:	51 0a       	stdsp	sp[0x40],r10
80004da6:	72 09       	ld.w	r9,r9[0x0]
80004da8:	fa ca f9 44 	sub	r10,sp,-1724
80004dac:	50 7b       	stdsp	sp[0x1c],r11
80004dae:	50 59       	stdsp	sp[0x14],r9
80004db0:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004db4:	40 5b       	lddsp	r11,sp[0x14]
80004db6:	40 7a       	lddsp	r10,sp[0x1c]
80004db8:	c4 78       	rjmp	80004e46 <_vfprintf_r+0x87a>
80004dba:	72 18       	ld.w	r8,r9[0x4]
80004dbc:	50 78       	stdsp	sp[0x1c],r8
80004dbe:	c4 c8       	rjmp	80004e56 <_vfprintf_r+0x88a>
80004dc0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dc4:	40 3e       	lddsp	lr,sp[0xc]
80004dc6:	58 0e       	cp.w	lr,0
80004dc8:	c2 30       	breq	80004e0e <_vfprintf_r+0x842>
80004dca:	10 36       	cp.w	r6,r8
80004dcc:	c0 94       	brge	80004dde <_vfprintf_r+0x812>
80004dce:	fa cc f9 44 	sub	r12,sp,-1724
80004dd2:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004dd6:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004dda:	50 7b       	stdsp	sp[0x1c],r11
80004ddc:	cd 9b       	rjmp	80004d8e <_vfprintf_r+0x7c2>
80004dde:	fa c8 f9 50 	sub	r8,sp,-1712
80004de2:	1a d8       	st.w	--sp,r8
80004de4:	fa c8 fa b8 	sub	r8,sp,-1352
80004de8:	04 9a       	mov	r10,r2
80004dea:	1a d8       	st.w	--sp,r8
80004dec:	fa c8 fb b4 	sub	r8,sp,-1100
80004df0:	0c 9b       	mov	r11,r6
80004df2:	1a d8       	st.w	--sp,r8
80004df4:	08 9c       	mov	r12,r4
80004df6:	fa c8 f9 40 	sub	r8,sp,-1728
80004dfa:	fa c9 ff b4 	sub	r9,sp,-76
80004dfe:	fe b0 fa 49 	rcall	80004290 <get_arg>
80004e02:	2f dd       	sub	sp,-12
80004e04:	78 1a       	ld.w	r10,r12[0x4]
80004e06:	50 7a       	stdsp	sp[0x1c],r10
80004e08:	78 0c       	ld.w	r12,r12[0x0]
80004e0a:	50 5c       	stdsp	sp[0x14],r12
80004e0c:	c2 a8       	rjmp	80004e60 <_vfprintf_r+0x894>
80004e0e:	2f f7       	sub	r7,-1
80004e10:	10 39       	cp.w	r9,r8
80004e12:	c0 94       	brge	80004e24 <_vfprintf_r+0x858>
80004e14:	fa c9 f9 44 	sub	r9,sp,-1724
80004e18:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e1c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004e20:	50 78       	stdsp	sp[0x1c],r8
80004e22:	cb 6b       	rjmp	80004d8e <_vfprintf_r+0x7c2>
80004e24:	41 09       	lddsp	r9,sp[0x40]
80004e26:	59 f8       	cp.w	r8,31
80004e28:	e0 89 00 15 	brgt	80004e52 <_vfprintf_r+0x886>
80004e2c:	f2 ca ff f8 	sub	r10,r9,-8
80004e30:	72 16       	ld.w	r6,r9[0x4]
80004e32:	72 09       	ld.w	r9,r9[0x0]
80004e34:	51 0a       	stdsp	sp[0x40],r10
80004e36:	50 59       	stdsp	sp[0x14],r9
80004e38:	fa ce f9 44 	sub	lr,sp,-1724
80004e3c:	50 76       	stdsp	sp[0x1c],r6
80004e3e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004e42:	40 5b       	lddsp	r11,sp[0x14]
80004e44:	0c 9a       	mov	r10,r6
80004e46:	f2 eb fd 88 	st.d	r9[-632],r10
80004e4a:	2f f8       	sub	r8,-1
80004e4c:	fb 48 06 b4 	st.w	sp[1716],r8
80004e50:	c0 88       	rjmp	80004e60 <_vfprintf_r+0x894>
80004e52:	72 1c       	ld.w	r12,r9[0x4]
80004e54:	50 7c       	stdsp	sp[0x1c],r12
80004e56:	f2 c8 ff f8 	sub	r8,r9,-8
80004e5a:	51 08       	stdsp	sp[0x40],r8
80004e5c:	72 09       	ld.w	r9,r9[0x0]
80004e5e:	50 59       	stdsp	sp[0x14],r9
80004e60:	40 5b       	lddsp	r11,sp[0x14]
80004e62:	40 7a       	lddsp	r10,sp[0x1c]
80004e64:	e0 a0 1c e8 	rcall	80008834 <__isinfd>
80004e68:	18 96       	mov	r6,r12
80004e6a:	c1 50       	breq	80004e94 <_vfprintf_r+0x8c8>
80004e6c:	30 08       	mov	r8,0
80004e6e:	30 09       	mov	r9,0
80004e70:	40 5b       	lddsp	r11,sp[0x14]
80004e72:	40 7a       	lddsp	r10,sp[0x1c]
80004e74:	e0 a0 21 e0 	rcall	80009234 <__avr32_f64_cmp_lt>
80004e78:	c0 40       	breq	80004e80 <_vfprintf_r+0x8b4>
80004e7a:	32 d8       	mov	r8,45
80004e7c:	fb 68 06 bb 	st.b	sp[1723],r8
80004e80:	4d 18       	lddpc	r8,80004fc4 <_vfprintf_r+0x9f8>
80004e82:	4d 26       	lddpc	r6,80004fc8 <_vfprintf_r+0x9fc>
80004e84:	a7 d5       	cbr	r5,0x7
80004e86:	e0 40 00 47 	cp.w	r0,71
80004e8a:	f0 06 17 a0 	movle	r6,r8
80004e8e:	30 32       	mov	r2,3
80004e90:	e0 8f 06 d4 	bral	80005c38 <_vfprintf_r+0x166c>
80004e94:	40 5b       	lddsp	r11,sp[0x14]
80004e96:	40 7a       	lddsp	r10,sp[0x1c]
80004e98:	e0 a0 1c e3 	rcall	8000885e <__isnand>
80004e9c:	c0 c0       	breq	80004eb4 <_vfprintf_r+0x8e8>
80004e9e:	50 26       	stdsp	sp[0x8],r6
80004ea0:	4c b8       	lddpc	r8,80004fcc <_vfprintf_r+0xa00>
80004ea2:	4c c6       	lddpc	r6,80004fd0 <_vfprintf_r+0xa04>
80004ea4:	a7 d5       	cbr	r5,0x7
80004ea6:	e0 40 00 47 	cp.w	r0,71
80004eaa:	f0 06 17 a0 	movle	r6,r8
80004eae:	30 32       	mov	r2,3
80004eb0:	e0 8f 06 ca 	bral	80005c44 <_vfprintf_r+0x1678>
80004eb4:	40 2a       	lddsp	r10,sp[0x8]
80004eb6:	5b fa       	cp.w	r10,-1
80004eb8:	c0 41       	brne	80004ec0 <_vfprintf_r+0x8f4>
80004eba:	30 69       	mov	r9,6
80004ebc:	50 29       	stdsp	sp[0x8],r9
80004ebe:	c1 18       	rjmp	80004ee0 <_vfprintf_r+0x914>
80004ec0:	e0 40 00 47 	cp.w	r0,71
80004ec4:	5f 09       	sreq	r9
80004ec6:	e0 40 00 67 	cp.w	r0,103
80004eca:	5f 08       	sreq	r8
80004ecc:	f3 e8 10 08 	or	r8,r9,r8
80004ed0:	f8 08 18 00 	cp.b	r8,r12
80004ed4:	c0 60       	breq	80004ee0 <_vfprintf_r+0x914>
80004ed6:	40 28       	lddsp	r8,sp[0x8]
80004ed8:	58 08       	cp.w	r8,0
80004eda:	f9 b8 00 01 	moveq	r8,1
80004ede:	50 28       	stdsp	sp[0x8],r8
80004ee0:	40 78       	lddsp	r8,sp[0x1c]
80004ee2:	40 59       	lddsp	r9,sp[0x14]
80004ee4:	fa e9 06 94 	st.d	sp[1684],r8
80004ee8:	a9 a5       	sbr	r5,0x8
80004eea:	fa f8 06 94 	ld.w	r8,sp[1684]
80004eee:	58 08       	cp.w	r8,0
80004ef0:	c0 65       	brlt	80004efc <_vfprintf_r+0x930>
80004ef2:	40 5e       	lddsp	lr,sp[0x14]
80004ef4:	30 0c       	mov	r12,0
80004ef6:	50 6e       	stdsp	sp[0x18],lr
80004ef8:	50 9c       	stdsp	sp[0x24],r12
80004efa:	c0 78       	rjmp	80004f08 <_vfprintf_r+0x93c>
80004efc:	40 5b       	lddsp	r11,sp[0x14]
80004efe:	32 da       	mov	r10,45
80004f00:	ee 1b 80 00 	eorh	r11,0x8000
80004f04:	50 9a       	stdsp	sp[0x24],r10
80004f06:	50 6b       	stdsp	sp[0x18],r11
80004f08:	e0 40 00 46 	cp.w	r0,70
80004f0c:	5f 09       	sreq	r9
80004f0e:	e0 40 00 66 	cp.w	r0,102
80004f12:	5f 08       	sreq	r8
80004f14:	f3 e8 10 08 	or	r8,r9,r8
80004f18:	50 48       	stdsp	sp[0x10],r8
80004f1a:	c0 40       	breq	80004f22 <_vfprintf_r+0x956>
80004f1c:	40 22       	lddsp	r2,sp[0x8]
80004f1e:	30 39       	mov	r9,3
80004f20:	c1 08       	rjmp	80004f40 <_vfprintf_r+0x974>
80004f22:	e0 40 00 45 	cp.w	r0,69
80004f26:	5f 09       	sreq	r9
80004f28:	e0 40 00 65 	cp.w	r0,101
80004f2c:	5f 08       	sreq	r8
80004f2e:	40 22       	lddsp	r2,sp[0x8]
80004f30:	10 49       	or	r9,r8
80004f32:	2f f2       	sub	r2,-1
80004f34:	40 46       	lddsp	r6,sp[0x10]
80004f36:	ec 09 18 00 	cp.b	r9,r6
80004f3a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004f3e:	30 29       	mov	r9,2
80004f40:	fa c8 f9 5c 	sub	r8,sp,-1700
80004f44:	1a d8       	st.w	--sp,r8
80004f46:	fa c8 f9 54 	sub	r8,sp,-1708
80004f4a:	1a d8       	st.w	--sp,r8
80004f4c:	fa c8 f9 4c 	sub	r8,sp,-1716
80004f50:	08 9c       	mov	r12,r4
80004f52:	1a d8       	st.w	--sp,r8
80004f54:	04 98       	mov	r8,r2
80004f56:	40 9b       	lddsp	r11,sp[0x24]
80004f58:	40 aa       	lddsp	r10,sp[0x28]
80004f5a:	e0 a0 0b cd 	rcall	800066f4 <_dtoa_r>
80004f5e:	e0 40 00 47 	cp.w	r0,71
80004f62:	5f 19       	srne	r9
80004f64:	e0 40 00 67 	cp.w	r0,103
80004f68:	5f 18       	srne	r8
80004f6a:	18 96       	mov	r6,r12
80004f6c:	2f dd       	sub	sp,-12
80004f6e:	f3 e8 00 08 	and	r8,r9,r8
80004f72:	c0 41       	brne	80004f7a <_vfprintf_r+0x9ae>
80004f74:	ed b5 00 00 	bld	r5,0x0
80004f78:	c3 81       	brne	80004fe8 <_vfprintf_r+0xa1c>
80004f7a:	ec 02 00 0e 	add	lr,r6,r2
80004f7e:	50 3e       	stdsp	sp[0xc],lr
80004f80:	40 4c       	lddsp	r12,sp[0x10]
80004f82:	58 0c       	cp.w	r12,0
80004f84:	c1 50       	breq	80004fae <_vfprintf_r+0x9e2>
80004f86:	0d 89       	ld.ub	r9,r6[0x0]
80004f88:	33 08       	mov	r8,48
80004f8a:	f0 09 18 00 	cp.b	r9,r8
80004f8e:	c0 b1       	brne	80004fa4 <_vfprintf_r+0x9d8>
80004f90:	30 08       	mov	r8,0
80004f92:	30 09       	mov	r9,0
80004f94:	40 6b       	lddsp	r11,sp[0x18]
80004f96:	40 7a       	lddsp	r10,sp[0x1c]
80004f98:	e0 a0 21 07 	rcall	800091a6 <__avr32_f64_cmp_eq>
80004f9c:	fb b2 00 01 	rsubeq	r2,1
80004fa0:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004fa4:	40 3b       	lddsp	r11,sp[0xc]
80004fa6:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004faa:	10 0b       	add	r11,r8
80004fac:	50 3b       	stdsp	sp[0xc],r11
80004fae:	40 6b       	lddsp	r11,sp[0x18]
80004fb0:	30 08       	mov	r8,0
80004fb2:	30 09       	mov	r9,0
80004fb4:	40 7a       	lddsp	r10,sp[0x1c]
80004fb6:	e0 a0 20 f8 	rcall	800091a6 <__avr32_f64_cmp_eq>
80004fba:	c1 10       	breq	80004fdc <_vfprintf_r+0xa10>
80004fbc:	40 3a       	lddsp	r10,sp[0xc]
80004fbe:	fb 4a 06 a4 	st.w	sp[1700],r10
80004fc2:	c0 d8       	rjmp	80004fdc <_vfprintf_r+0xa10>
80004fc4:	80 00       	ld.sh	r0,r0[0x0]
80004fc6:	a2 c4       	st.b	r1[0x4],r4
80004fc8:	80 00       	ld.sh	r0,r0[0x0]
80004fca:	a2 c8       	st.b	r1[0x4],r8
80004fcc:	80 00       	ld.sh	r0,r0[0x0]
80004fce:	a2 cc       	st.b	r1[0x4],r12
80004fd0:	80 00       	ld.sh	r0,r0[0x0]
80004fd2:	a2 d0       	st.b	r1[0x5],r0
80004fd4:	10 c9       	st.b	r8++,r9
80004fd6:	fb 48 06 a4 	st.w	sp[1700],r8
80004fda:	c0 28       	rjmp	80004fde <_vfprintf_r+0xa12>
80004fdc:	33 09       	mov	r9,48
80004fde:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004fe2:	40 3e       	lddsp	lr,sp[0xc]
80004fe4:	1c 38       	cp.w	r8,lr
80004fe6:	cf 73       	brcs	80004fd4 <_vfprintf_r+0xa08>
80004fe8:	e0 40 00 47 	cp.w	r0,71
80004fec:	5f 09       	sreq	r9
80004fee:	e0 40 00 67 	cp.w	r0,103
80004ff2:	5f 08       	sreq	r8
80004ff4:	f3 e8 10 08 	or	r8,r9,r8
80004ff8:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004ffc:	0c 19       	sub	r9,r6
80004ffe:	50 69       	stdsp	sp[0x18],r9
80005000:	58 08       	cp.w	r8,0
80005002:	c0 b0       	breq	80005018 <_vfprintf_r+0xa4c>
80005004:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005008:	5b d8       	cp.w	r8,-3
8000500a:	c0 55       	brlt	80005014 <_vfprintf_r+0xa48>
8000500c:	40 2c       	lddsp	r12,sp[0x8]
8000500e:	18 38       	cp.w	r8,r12
80005010:	e0 8a 00 6a 	brle	800050e4 <_vfprintf_r+0xb18>
80005014:	20 20       	sub	r0,2
80005016:	c0 58       	rjmp	80005020 <_vfprintf_r+0xa54>
80005018:	e0 40 00 65 	cp.w	r0,101
8000501c:	e0 89 00 46 	brgt	800050a8 <_vfprintf_r+0xadc>
80005020:	fa fb 06 ac 	ld.w	r11,sp[1708]
80005024:	fb 60 06 9c 	st.b	sp[1692],r0
80005028:	20 1b       	sub	r11,1
8000502a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000502e:	c0 47       	brpl	80005036 <_vfprintf_r+0xa6a>
80005030:	5c 3b       	neg	r11
80005032:	32 d8       	mov	r8,45
80005034:	c0 28       	rjmp	80005038 <_vfprintf_r+0xa6c>
80005036:	32 b8       	mov	r8,43
80005038:	fb 68 06 9d 	st.b	sp[1693],r8
8000503c:	58 9b       	cp.w	r11,9
8000503e:	e0 8a 00 1d 	brle	80005078 <_vfprintf_r+0xaac>
80005042:	fa c9 fa 35 	sub	r9,sp,-1483
80005046:	30 aa       	mov	r10,10
80005048:	12 98       	mov	r8,r9
8000504a:	0e 9c       	mov	r12,r7
8000504c:	0c 92       	mov	r2,r6
8000504e:	f6 0a 0c 06 	divs	r6,r11,r10
80005052:	0e 9b       	mov	r11,r7
80005054:	2d 0b       	sub	r11,-48
80005056:	10 fb       	st.b	--r8,r11
80005058:	0c 9b       	mov	r11,r6
8000505a:	58 96       	cp.w	r6,9
8000505c:	fe 99 ff f9 	brgt	8000504e <_vfprintf_r+0xa82>
80005060:	2d 0b       	sub	r11,-48
80005062:	18 97       	mov	r7,r12
80005064:	04 96       	mov	r6,r2
80005066:	10 fb       	st.b	--r8,r11
80005068:	fa ca f9 62 	sub	r10,sp,-1694
8000506c:	c0 38       	rjmp	80005072 <_vfprintf_r+0xaa6>
8000506e:	11 3b       	ld.ub	r11,r8++
80005070:	14 cb       	st.b	r10++,r11
80005072:	12 38       	cp.w	r8,r9
80005074:	cf d3       	brcs	8000506e <_vfprintf_r+0xaa2>
80005076:	c0 98       	rjmp	80005088 <_vfprintf_r+0xabc>
80005078:	2d 0b       	sub	r11,-48
8000507a:	33 08       	mov	r8,48
8000507c:	fb 6b 06 9f 	st.b	sp[1695],r11
80005080:	fb 68 06 9e 	st.b	sp[1694],r8
80005084:	fa ca f9 60 	sub	r10,sp,-1696
80005088:	fa c8 f9 64 	sub	r8,sp,-1692
8000508c:	f4 08 01 08 	sub	r8,r10,r8
80005090:	50 e8       	stdsp	sp[0x38],r8
80005092:	10 92       	mov	r2,r8
80005094:	40 6b       	lddsp	r11,sp[0x18]
80005096:	16 02       	add	r2,r11
80005098:	58 1b       	cp.w	r11,1
8000509a:	e0 89 00 05 	brgt	800050a4 <_vfprintf_r+0xad8>
8000509e:	ed b5 00 00 	bld	r5,0x0
800050a2:	c3 51       	brne	8000510c <_vfprintf_r+0xb40>
800050a4:	2f f2       	sub	r2,-1
800050a6:	c3 38       	rjmp	8000510c <_vfprintf_r+0xb40>
800050a8:	e0 40 00 66 	cp.w	r0,102
800050ac:	c1 c1       	brne	800050e4 <_vfprintf_r+0xb18>
800050ae:	fa f2 06 ac 	ld.w	r2,sp[1708]
800050b2:	58 02       	cp.w	r2,0
800050b4:	e0 8a 00 0c 	brle	800050cc <_vfprintf_r+0xb00>
800050b8:	40 2a       	lddsp	r10,sp[0x8]
800050ba:	58 0a       	cp.w	r10,0
800050bc:	c0 41       	brne	800050c4 <_vfprintf_r+0xaf8>
800050be:	ed b5 00 00 	bld	r5,0x0
800050c2:	c2 51       	brne	8000510c <_vfprintf_r+0xb40>
800050c4:	2f f2       	sub	r2,-1
800050c6:	40 29       	lddsp	r9,sp[0x8]
800050c8:	12 02       	add	r2,r9
800050ca:	c0 b8       	rjmp	800050e0 <_vfprintf_r+0xb14>
800050cc:	40 28       	lddsp	r8,sp[0x8]
800050ce:	58 08       	cp.w	r8,0
800050d0:	c0 61       	brne	800050dc <_vfprintf_r+0xb10>
800050d2:	ed b5 00 00 	bld	r5,0x0
800050d6:	c0 30       	breq	800050dc <_vfprintf_r+0xb10>
800050d8:	30 12       	mov	r2,1
800050da:	c1 98       	rjmp	8000510c <_vfprintf_r+0xb40>
800050dc:	40 22       	lddsp	r2,sp[0x8]
800050de:	2f e2       	sub	r2,-2
800050e0:	36 60       	mov	r0,102
800050e2:	c1 58       	rjmp	8000510c <_vfprintf_r+0xb40>
800050e4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800050e8:	40 6e       	lddsp	lr,sp[0x18]
800050ea:	1c 32       	cp.w	r2,lr
800050ec:	c0 65       	brlt	800050f8 <_vfprintf_r+0xb2c>
800050ee:	ed b5 00 00 	bld	r5,0x0
800050f2:	f7 b2 00 ff 	subeq	r2,-1
800050f6:	c0 a8       	rjmp	8000510a <_vfprintf_r+0xb3e>
800050f8:	e4 08 11 02 	rsub	r8,r2,2
800050fc:	40 6c       	lddsp	r12,sp[0x18]
800050fe:	58 02       	cp.w	r2,0
80005100:	f0 02 17 a0 	movle	r2,r8
80005104:	f9 b2 09 01 	movgt	r2,1
80005108:	18 02       	add	r2,r12
8000510a:	36 70       	mov	r0,103
8000510c:	40 9b       	lddsp	r11,sp[0x24]
8000510e:	58 0b       	cp.w	r11,0
80005110:	e0 80 05 94 	breq	80005c38 <_vfprintf_r+0x166c>
80005114:	32 d8       	mov	r8,45
80005116:	fb 68 06 bb 	st.b	sp[1723],r8
8000511a:	e0 8f 05 93 	bral	80005c40 <_vfprintf_r+0x1674>
8000511e:	50 a7       	stdsp	sp[0x28],r7
80005120:	04 94       	mov	r4,r2
80005122:	0c 97       	mov	r7,r6
80005124:	02 92       	mov	r2,r1
80005126:	06 96       	mov	r6,r3
80005128:	40 41       	lddsp	r1,sp[0x10]
8000512a:	40 93       	lddsp	r3,sp[0x24]
8000512c:	0e 99       	mov	r9,r7
8000512e:	ed b5 00 05 	bld	r5,0x5
80005132:	c4 81       	brne	800051c2 <_vfprintf_r+0xbf6>
80005134:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005138:	40 3e       	lddsp	lr,sp[0xc]
8000513a:	58 0e       	cp.w	lr,0
8000513c:	c1 d0       	breq	80005176 <_vfprintf_r+0xbaa>
8000513e:	10 36       	cp.w	r6,r8
80005140:	c0 64       	brge	8000514c <_vfprintf_r+0xb80>
80005142:	fa cc f9 44 	sub	r12,sp,-1724
80005146:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000514a:	c1 d8       	rjmp	80005184 <_vfprintf_r+0xbb8>
8000514c:	fa c8 f9 50 	sub	r8,sp,-1712
80005150:	1a d8       	st.w	--sp,r8
80005152:	fa c8 fa b8 	sub	r8,sp,-1352
80005156:	04 9a       	mov	r10,r2
80005158:	1a d8       	st.w	--sp,r8
8000515a:	fa c8 fb b4 	sub	r8,sp,-1100
8000515e:	0c 9b       	mov	r11,r6
80005160:	1a d8       	st.w	--sp,r8
80005162:	08 9c       	mov	r12,r4
80005164:	fa c8 f9 40 	sub	r8,sp,-1728
80005168:	fa c9 ff b4 	sub	r9,sp,-76
8000516c:	fe b0 f8 92 	rcall	80004290 <get_arg>
80005170:	2f dd       	sub	sp,-12
80005172:	78 0a       	ld.w	r10,r12[0x0]
80005174:	c2 08       	rjmp	800051b4 <_vfprintf_r+0xbe8>
80005176:	2f f7       	sub	r7,-1
80005178:	10 39       	cp.w	r9,r8
8000517a:	c0 84       	brge	8000518a <_vfprintf_r+0xbbe>
8000517c:	fa cb f9 44 	sub	r11,sp,-1724
80005180:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005184:	ec fa fd 88 	ld.w	r10,r6[-632]
80005188:	c1 68       	rjmp	800051b4 <_vfprintf_r+0xbe8>
8000518a:	41 09       	lddsp	r9,sp[0x40]
8000518c:	59 f8       	cp.w	r8,31
8000518e:	e0 89 00 10 	brgt	800051ae <_vfprintf_r+0xbe2>
80005192:	f2 ca ff fc 	sub	r10,r9,-4
80005196:	51 0a       	stdsp	sp[0x40],r10
80005198:	fa c6 f9 44 	sub	r6,sp,-1724
8000519c:	72 0a       	ld.w	r10,r9[0x0]
8000519e:	ec 08 00 39 	add	r9,r6,r8<<0x3
800051a2:	f3 4a fd 88 	st.w	r9[-632],r10
800051a6:	2f f8       	sub	r8,-1
800051a8:	fb 48 06 b4 	st.w	sp[1716],r8
800051ac:	c0 48       	rjmp	800051b4 <_vfprintf_r+0xbe8>
800051ae:	72 0a       	ld.w	r10,r9[0x0]
800051b0:	2f c9       	sub	r9,-4
800051b2:	51 09       	stdsp	sp[0x40],r9
800051b4:	40 be       	lddsp	lr,sp[0x2c]
800051b6:	1c 98       	mov	r8,lr
800051b8:	95 1e       	st.w	r10[0x4],lr
800051ba:	bf 58       	asr	r8,0x1f
800051bc:	95 08       	st.w	r10[0x0],r8
800051be:	fe 9f fa 92 	bral	800046e2 <_vfprintf_r+0x116>
800051c2:	ed b5 00 04 	bld	r5,0x4
800051c6:	c4 80       	breq	80005256 <_vfprintf_r+0xc8a>
800051c8:	e2 15 00 40 	andl	r5,0x40,COH
800051cc:	c4 50       	breq	80005256 <_vfprintf_r+0xc8a>
800051ce:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051d2:	40 3c       	lddsp	r12,sp[0xc]
800051d4:	58 0c       	cp.w	r12,0
800051d6:	c1 d0       	breq	80005210 <_vfprintf_r+0xc44>
800051d8:	10 36       	cp.w	r6,r8
800051da:	c0 64       	brge	800051e6 <_vfprintf_r+0xc1a>
800051dc:	fa cb f9 44 	sub	r11,sp,-1724
800051e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051e4:	c1 d8       	rjmp	8000521e <_vfprintf_r+0xc52>
800051e6:	fa c8 f9 50 	sub	r8,sp,-1712
800051ea:	1a d8       	st.w	--sp,r8
800051ec:	fa c8 fa b8 	sub	r8,sp,-1352
800051f0:	04 9a       	mov	r10,r2
800051f2:	1a d8       	st.w	--sp,r8
800051f4:	fa c8 fb b4 	sub	r8,sp,-1100
800051f8:	0c 9b       	mov	r11,r6
800051fa:	1a d8       	st.w	--sp,r8
800051fc:	08 9c       	mov	r12,r4
800051fe:	fa c8 f9 40 	sub	r8,sp,-1728
80005202:	fa c9 ff b4 	sub	r9,sp,-76
80005206:	fe b0 f8 45 	rcall	80004290 <get_arg>
8000520a:	2f dd       	sub	sp,-12
8000520c:	78 0a       	ld.w	r10,r12[0x0]
8000520e:	c2 08       	rjmp	8000524e <_vfprintf_r+0xc82>
80005210:	2f f7       	sub	r7,-1
80005212:	10 39       	cp.w	r9,r8
80005214:	c0 84       	brge	80005224 <_vfprintf_r+0xc58>
80005216:	fa ca f9 44 	sub	r10,sp,-1724
8000521a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000521e:	ec fa fd 88 	ld.w	r10,r6[-632]
80005222:	c1 68       	rjmp	8000524e <_vfprintf_r+0xc82>
80005224:	41 09       	lddsp	r9,sp[0x40]
80005226:	59 f8       	cp.w	r8,31
80005228:	e0 89 00 10 	brgt	80005248 <_vfprintf_r+0xc7c>
8000522c:	f2 ca ff fc 	sub	r10,r9,-4
80005230:	51 0a       	stdsp	sp[0x40],r10
80005232:	fa c6 f9 44 	sub	r6,sp,-1724
80005236:	72 0a       	ld.w	r10,r9[0x0]
80005238:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000523c:	f3 4a fd 88 	st.w	r9[-632],r10
80005240:	2f f8       	sub	r8,-1
80005242:	fb 48 06 b4 	st.w	sp[1716],r8
80005246:	c0 48       	rjmp	8000524e <_vfprintf_r+0xc82>
80005248:	72 0a       	ld.w	r10,r9[0x0]
8000524a:	2f c9       	sub	r9,-4
8000524c:	51 09       	stdsp	sp[0x40],r9
8000524e:	40 be       	lddsp	lr,sp[0x2c]
80005250:	b4 0e       	st.h	r10[0x0],lr
80005252:	fe 9f fa 48 	bral	800046e2 <_vfprintf_r+0x116>
80005256:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000525a:	40 3c       	lddsp	r12,sp[0xc]
8000525c:	58 0c       	cp.w	r12,0
8000525e:	c1 d0       	breq	80005298 <_vfprintf_r+0xccc>
80005260:	10 36       	cp.w	r6,r8
80005262:	c0 64       	brge	8000526e <_vfprintf_r+0xca2>
80005264:	fa cb f9 44 	sub	r11,sp,-1724
80005268:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000526c:	c1 d8       	rjmp	800052a6 <_vfprintf_r+0xcda>
8000526e:	fa c8 f9 50 	sub	r8,sp,-1712
80005272:	1a d8       	st.w	--sp,r8
80005274:	fa c8 fa b8 	sub	r8,sp,-1352
80005278:	04 9a       	mov	r10,r2
8000527a:	1a d8       	st.w	--sp,r8
8000527c:	fa c8 fb b4 	sub	r8,sp,-1100
80005280:	0c 9b       	mov	r11,r6
80005282:	1a d8       	st.w	--sp,r8
80005284:	08 9c       	mov	r12,r4
80005286:	fa c8 f9 40 	sub	r8,sp,-1728
8000528a:	fa c9 ff b4 	sub	r9,sp,-76
8000528e:	fe b0 f8 01 	rcall	80004290 <get_arg>
80005292:	2f dd       	sub	sp,-12
80005294:	78 0a       	ld.w	r10,r12[0x0]
80005296:	c2 08       	rjmp	800052d6 <_vfprintf_r+0xd0a>
80005298:	2f f7       	sub	r7,-1
8000529a:	10 39       	cp.w	r9,r8
8000529c:	c0 84       	brge	800052ac <_vfprintf_r+0xce0>
8000529e:	fa ca f9 44 	sub	r10,sp,-1724
800052a2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800052a6:	ec fa fd 88 	ld.w	r10,r6[-632]
800052aa:	c1 68       	rjmp	800052d6 <_vfprintf_r+0xd0a>
800052ac:	41 09       	lddsp	r9,sp[0x40]
800052ae:	59 f8       	cp.w	r8,31
800052b0:	e0 89 00 10 	brgt	800052d0 <_vfprintf_r+0xd04>
800052b4:	f2 ca ff fc 	sub	r10,r9,-4
800052b8:	51 0a       	stdsp	sp[0x40],r10
800052ba:	fa c6 f9 44 	sub	r6,sp,-1724
800052be:	72 0a       	ld.w	r10,r9[0x0]
800052c0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800052c4:	f3 4a fd 88 	st.w	r9[-632],r10
800052c8:	2f f8       	sub	r8,-1
800052ca:	fb 48 06 b4 	st.w	sp[1716],r8
800052ce:	c0 48       	rjmp	800052d6 <_vfprintf_r+0xd0a>
800052d0:	72 0a       	ld.w	r10,r9[0x0]
800052d2:	2f c9       	sub	r9,-4
800052d4:	51 09       	stdsp	sp[0x40],r9
800052d6:	40 be       	lddsp	lr,sp[0x2c]
800052d8:	95 0e       	st.w	r10[0x0],lr
800052da:	fe 9f fa 04 	bral	800046e2 <_vfprintf_r+0x116>
800052de:	50 a7       	stdsp	sp[0x28],r7
800052e0:	50 80       	stdsp	sp[0x20],r0
800052e2:	0c 97       	mov	r7,r6
800052e4:	04 94       	mov	r4,r2
800052e6:	06 96       	mov	r6,r3
800052e8:	02 92       	mov	r2,r1
800052ea:	40 93       	lddsp	r3,sp[0x24]
800052ec:	10 90       	mov	r0,r8
800052ee:	40 41       	lddsp	r1,sp[0x10]
800052f0:	a5 a5       	sbr	r5,0x4
800052f2:	c0 a8       	rjmp	80005306 <_vfprintf_r+0xd3a>
800052f4:	50 a7       	stdsp	sp[0x28],r7
800052f6:	50 80       	stdsp	sp[0x20],r0
800052f8:	0c 97       	mov	r7,r6
800052fa:	04 94       	mov	r4,r2
800052fc:	06 96       	mov	r6,r3
800052fe:	02 92       	mov	r2,r1
80005300:	40 93       	lddsp	r3,sp[0x24]
80005302:	10 90       	mov	r0,r8
80005304:	40 41       	lddsp	r1,sp[0x10]
80005306:	ed b5 00 05 	bld	r5,0x5
8000530a:	c5 d1       	brne	800053c4 <_vfprintf_r+0xdf8>
8000530c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005310:	40 3c       	lddsp	r12,sp[0xc]
80005312:	58 0c       	cp.w	r12,0
80005314:	c2 60       	breq	80005360 <_vfprintf_r+0xd94>
80005316:	10 36       	cp.w	r6,r8
80005318:	c0 a4       	brge	8000532c <_vfprintf_r+0xd60>
8000531a:	fa cb f9 44 	sub	r11,sp,-1724
8000531e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005322:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005326:	fa e9 00 00 	st.d	sp[0],r8
8000532a:	c1 88       	rjmp	8000535a <_vfprintf_r+0xd8e>
8000532c:	fa c8 f9 50 	sub	r8,sp,-1712
80005330:	1a d8       	st.w	--sp,r8
80005332:	fa c8 fa b8 	sub	r8,sp,-1352
80005336:	04 9a       	mov	r10,r2
80005338:	1a d8       	st.w	--sp,r8
8000533a:	0c 9b       	mov	r11,r6
8000533c:	fa c8 fb b4 	sub	r8,sp,-1100
80005340:	08 9c       	mov	r12,r4
80005342:	1a d8       	st.w	--sp,r8
80005344:	fa c8 f9 40 	sub	r8,sp,-1728
80005348:	fa c9 ff b4 	sub	r9,sp,-76
8000534c:	fe b0 f7 a2 	rcall	80004290 <get_arg>
80005350:	2f dd       	sub	sp,-12
80005352:	f8 ea 00 00 	ld.d	r10,r12[0]
80005356:	fa eb 00 00 	st.d	sp[0],r10
8000535a:	30 08       	mov	r8,0
8000535c:	e0 8f 03 de 	bral	80005b18 <_vfprintf_r+0x154c>
80005360:	ee ca ff ff 	sub	r10,r7,-1
80005364:	10 37       	cp.w	r7,r8
80005366:	c0 b4       	brge	8000537c <_vfprintf_r+0xdb0>
80005368:	fa c9 f9 44 	sub	r9,sp,-1724
8000536c:	14 97       	mov	r7,r10
8000536e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005372:	ec ea fd 88 	ld.d	r10,r6[-632]
80005376:	fa eb 00 00 	st.d	sp[0],r10
8000537a:	c1 88       	rjmp	800053aa <_vfprintf_r+0xdde>
8000537c:	41 09       	lddsp	r9,sp[0x40]
8000537e:	59 f8       	cp.w	r8,31
80005380:	e0 89 00 18 	brgt	800053b0 <_vfprintf_r+0xde4>
80005384:	f2 e6 00 00 	ld.d	r6,r9[0]
80005388:	f2 cb ff f8 	sub	r11,r9,-8
8000538c:	fa e7 00 00 	st.d	sp[0],r6
80005390:	51 0b       	stdsp	sp[0x40],r11
80005392:	fa c6 f9 44 	sub	r6,sp,-1724
80005396:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000539a:	fa e6 00 00 	ld.d	r6,sp[0]
8000539e:	f2 e7 fd 88 	st.d	r9[-632],r6
800053a2:	2f f8       	sub	r8,-1
800053a4:	14 97       	mov	r7,r10
800053a6:	fb 48 06 b4 	st.w	sp[1716],r8
800053aa:	40 38       	lddsp	r8,sp[0xc]
800053ac:	e0 8f 03 b6 	bral	80005b18 <_vfprintf_r+0x154c>
800053b0:	f2 e6 00 00 	ld.d	r6,r9[0]
800053b4:	40 38       	lddsp	r8,sp[0xc]
800053b6:	fa e7 00 00 	st.d	sp[0],r6
800053ba:	2f 89       	sub	r9,-8
800053bc:	14 97       	mov	r7,r10
800053be:	51 09       	stdsp	sp[0x40],r9
800053c0:	e0 8f 03 ac 	bral	80005b18 <_vfprintf_r+0x154c>
800053c4:	ed b5 00 04 	bld	r5,0x4
800053c8:	c1 61       	brne	800053f4 <_vfprintf_r+0xe28>
800053ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053ce:	40 3e       	lddsp	lr,sp[0xc]
800053d0:	58 0e       	cp.w	lr,0
800053d2:	c0 80       	breq	800053e2 <_vfprintf_r+0xe16>
800053d4:	10 36       	cp.w	r6,r8
800053d6:	c6 74       	brge	800054a4 <_vfprintf_r+0xed8>
800053d8:	fa cc f9 44 	sub	r12,sp,-1724
800053dc:	f8 06 00 36 	add	r6,r12,r6<<0x3
800053e0:	c8 08       	rjmp	800054e0 <_vfprintf_r+0xf14>
800053e2:	ee ca ff ff 	sub	r10,r7,-1
800053e6:	10 37       	cp.w	r7,r8
800053e8:	c7 f4       	brge	800054e6 <_vfprintf_r+0xf1a>
800053ea:	fa cb f9 44 	sub	r11,sp,-1724
800053ee:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053f2:	c7 68       	rjmp	800054de <_vfprintf_r+0xf12>
800053f4:	ed b5 00 06 	bld	r5,0x6
800053f8:	c4 a1       	brne	8000548c <_vfprintf_r+0xec0>
800053fa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053fe:	40 3c       	lddsp	r12,sp[0xc]
80005400:	58 0c       	cp.w	r12,0
80005402:	c1 d0       	breq	8000543c <_vfprintf_r+0xe70>
80005404:	10 36       	cp.w	r6,r8
80005406:	c0 64       	brge	80005412 <_vfprintf_r+0xe46>
80005408:	fa cb f9 44 	sub	r11,sp,-1724
8000540c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005410:	c1 f8       	rjmp	8000544e <_vfprintf_r+0xe82>
80005412:	fa c8 f9 50 	sub	r8,sp,-1712
80005416:	1a d8       	st.w	--sp,r8
80005418:	fa c8 fa b8 	sub	r8,sp,-1352
8000541c:	1a d8       	st.w	--sp,r8
8000541e:	fa c8 fb b4 	sub	r8,sp,-1100
80005422:	1a d8       	st.w	--sp,r8
80005424:	fa c8 f9 40 	sub	r8,sp,-1728
80005428:	fa c9 ff b4 	sub	r9,sp,-76
8000542c:	04 9a       	mov	r10,r2
8000542e:	0c 9b       	mov	r11,r6
80005430:	08 9c       	mov	r12,r4
80005432:	fe b0 f7 2f 	rcall	80004290 <get_arg>
80005436:	2f dd       	sub	sp,-12
80005438:	98 18       	ld.sh	r8,r12[0x2]
8000543a:	c2 68       	rjmp	80005486 <_vfprintf_r+0xeba>
8000543c:	ee ca ff ff 	sub	r10,r7,-1
80005440:	10 37       	cp.w	r7,r8
80005442:	c0 94       	brge	80005454 <_vfprintf_r+0xe88>
80005444:	fa c9 f9 44 	sub	r9,sp,-1724
80005448:	14 97       	mov	r7,r10
8000544a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000544e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005452:	c1 a8       	rjmp	80005486 <_vfprintf_r+0xeba>
80005454:	41 09       	lddsp	r9,sp[0x40]
80005456:	59 f8       	cp.w	r8,31
80005458:	e0 89 00 13 	brgt	8000547e <_vfprintf_r+0xeb2>
8000545c:	f2 cb ff fc 	sub	r11,r9,-4
80005460:	51 0b       	stdsp	sp[0x40],r11
80005462:	72 09       	ld.w	r9,r9[0x0]
80005464:	fa c6 f9 44 	sub	r6,sp,-1724
80005468:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000546c:	2f f8       	sub	r8,-1
8000546e:	f7 49 fd 88 	st.w	r11[-632],r9
80005472:	fb 48 06 b4 	st.w	sp[1716],r8
80005476:	14 97       	mov	r7,r10
80005478:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000547c:	c0 58       	rjmp	80005486 <_vfprintf_r+0xeba>
8000547e:	92 18       	ld.sh	r8,r9[0x2]
80005480:	14 97       	mov	r7,r10
80005482:	2f c9       	sub	r9,-4
80005484:	51 09       	stdsp	sp[0x40],r9
80005486:	5c 78       	castu.h	r8
80005488:	50 18       	stdsp	sp[0x4],r8
8000548a:	c4 68       	rjmp	80005516 <_vfprintf_r+0xf4a>
8000548c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005490:	40 3c       	lddsp	r12,sp[0xc]
80005492:	58 0c       	cp.w	r12,0
80005494:	c1 d0       	breq	800054ce <_vfprintf_r+0xf02>
80005496:	10 36       	cp.w	r6,r8
80005498:	c0 64       	brge	800054a4 <_vfprintf_r+0xed8>
8000549a:	fa cb f9 44 	sub	r11,sp,-1724
8000549e:	f6 06 00 36 	add	r6,r11,r6<<0x3
800054a2:	c1 f8       	rjmp	800054e0 <_vfprintf_r+0xf14>
800054a4:	fa c8 f9 50 	sub	r8,sp,-1712
800054a8:	1a d8       	st.w	--sp,r8
800054aa:	fa c8 fa b8 	sub	r8,sp,-1352
800054ae:	0c 9b       	mov	r11,r6
800054b0:	1a d8       	st.w	--sp,r8
800054b2:	fa c8 fb b4 	sub	r8,sp,-1100
800054b6:	04 9a       	mov	r10,r2
800054b8:	1a d8       	st.w	--sp,r8
800054ba:	08 9c       	mov	r12,r4
800054bc:	fa c8 f9 40 	sub	r8,sp,-1728
800054c0:	fa c9 ff b4 	sub	r9,sp,-76
800054c4:	fe b0 f6 e6 	rcall	80004290 <get_arg>
800054c8:	2f dd       	sub	sp,-12
800054ca:	78 0b       	ld.w	r11,r12[0x0]
800054cc:	c2 48       	rjmp	80005514 <_vfprintf_r+0xf48>
800054ce:	ee ca ff ff 	sub	r10,r7,-1
800054d2:	10 37       	cp.w	r7,r8
800054d4:	c0 94       	brge	800054e6 <_vfprintf_r+0xf1a>
800054d6:	fa c9 f9 44 	sub	r9,sp,-1724
800054da:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054de:	14 97       	mov	r7,r10
800054e0:	ec fb fd 88 	ld.w	r11,r6[-632]
800054e4:	c1 88       	rjmp	80005514 <_vfprintf_r+0xf48>
800054e6:	41 09       	lddsp	r9,sp[0x40]
800054e8:	59 f8       	cp.w	r8,31
800054ea:	e0 89 00 11 	brgt	8000550c <_vfprintf_r+0xf40>
800054ee:	f2 cb ff fc 	sub	r11,r9,-4
800054f2:	51 0b       	stdsp	sp[0x40],r11
800054f4:	fa c6 f9 44 	sub	r6,sp,-1724
800054f8:	72 0b       	ld.w	r11,r9[0x0]
800054fa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054fe:	f3 4b fd 88 	st.w	r9[-632],r11
80005502:	2f f8       	sub	r8,-1
80005504:	14 97       	mov	r7,r10
80005506:	fb 48 06 b4 	st.w	sp[1716],r8
8000550a:	c0 58       	rjmp	80005514 <_vfprintf_r+0xf48>
8000550c:	72 0b       	ld.w	r11,r9[0x0]
8000550e:	14 97       	mov	r7,r10
80005510:	2f c9       	sub	r9,-4
80005512:	51 09       	stdsp	sp[0x40],r9
80005514:	50 1b       	stdsp	sp[0x4],r11
80005516:	30 0e       	mov	lr,0
80005518:	50 0e       	stdsp	sp[0x0],lr
8000551a:	1c 98       	mov	r8,lr
8000551c:	e0 8f 02 fe 	bral	80005b18 <_vfprintf_r+0x154c>
80005520:	50 a7       	stdsp	sp[0x28],r7
80005522:	50 80       	stdsp	sp[0x20],r0
80005524:	0c 97       	mov	r7,r6
80005526:	04 94       	mov	r4,r2
80005528:	06 96       	mov	r6,r3
8000552a:	02 92       	mov	r2,r1
8000552c:	40 93       	lddsp	r3,sp[0x24]
8000552e:	40 41       	lddsp	r1,sp[0x10]
80005530:	0e 99       	mov	r9,r7
80005532:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005536:	40 3c       	lddsp	r12,sp[0xc]
80005538:	58 0c       	cp.w	r12,0
8000553a:	c1 d0       	breq	80005574 <_vfprintf_r+0xfa8>
8000553c:	10 36       	cp.w	r6,r8
8000553e:	c0 64       	brge	8000554a <_vfprintf_r+0xf7e>
80005540:	fa cb f9 44 	sub	r11,sp,-1724
80005544:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005548:	c1 d8       	rjmp	80005582 <_vfprintf_r+0xfb6>
8000554a:	fa c8 f9 50 	sub	r8,sp,-1712
8000554e:	1a d8       	st.w	--sp,r8
80005550:	fa c8 fa b8 	sub	r8,sp,-1352
80005554:	1a d8       	st.w	--sp,r8
80005556:	fa c8 fb b4 	sub	r8,sp,-1100
8000555a:	1a d8       	st.w	--sp,r8
8000555c:	fa c9 ff b4 	sub	r9,sp,-76
80005560:	fa c8 f9 40 	sub	r8,sp,-1728
80005564:	04 9a       	mov	r10,r2
80005566:	0c 9b       	mov	r11,r6
80005568:	08 9c       	mov	r12,r4
8000556a:	fe b0 f6 93 	rcall	80004290 <get_arg>
8000556e:	2f dd       	sub	sp,-12
80005570:	78 09       	ld.w	r9,r12[0x0]
80005572:	c2 18       	rjmp	800055b4 <_vfprintf_r+0xfe8>
80005574:	2f f7       	sub	r7,-1
80005576:	10 39       	cp.w	r9,r8
80005578:	c0 84       	brge	80005588 <_vfprintf_r+0xfbc>
8000557a:	fa ca f9 44 	sub	r10,sp,-1724
8000557e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005582:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005586:	c1 78       	rjmp	800055b4 <_vfprintf_r+0xfe8>
80005588:	41 09       	lddsp	r9,sp[0x40]
8000558a:	59 f8       	cp.w	r8,31
8000558c:	e0 89 00 10 	brgt	800055ac <_vfprintf_r+0xfe0>
80005590:	f2 ca ff fc 	sub	r10,r9,-4
80005594:	51 0a       	stdsp	sp[0x40],r10
80005596:	fa c6 f9 44 	sub	r6,sp,-1724
8000559a:	72 09       	ld.w	r9,r9[0x0]
8000559c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800055a0:	f5 49 fd 88 	st.w	r10[-632],r9
800055a4:	2f f8       	sub	r8,-1
800055a6:	fb 48 06 b4 	st.w	sp[1716],r8
800055aa:	c0 58       	rjmp	800055b4 <_vfprintf_r+0xfe8>
800055ac:	f2 c8 ff fc 	sub	r8,r9,-4
800055b0:	51 08       	stdsp	sp[0x40],r8
800055b2:	72 09       	ld.w	r9,r9[0x0]
800055b4:	33 08       	mov	r8,48
800055b6:	fb 68 06 b8 	st.b	sp[1720],r8
800055ba:	37 88       	mov	r8,120
800055bc:	30 0e       	mov	lr,0
800055be:	fb 68 06 b9 	st.b	sp[1721],r8
800055c2:	4c ac       	lddpc	r12,800056e8 <_vfprintf_r+0x111c>
800055c4:	50 19       	stdsp	sp[0x4],r9
800055c6:	a1 b5       	sbr	r5,0x1
800055c8:	50 0e       	stdsp	sp[0x0],lr
800055ca:	50 dc       	stdsp	sp[0x34],r12
800055cc:	30 28       	mov	r8,2
800055ce:	37 80       	mov	r0,120
800055d0:	e0 8f 02 a4 	bral	80005b18 <_vfprintf_r+0x154c>
800055d4:	50 a7       	stdsp	sp[0x28],r7
800055d6:	50 80       	stdsp	sp[0x20],r0
800055d8:	10 90       	mov	r0,r8
800055da:	30 08       	mov	r8,0
800055dc:	fb 68 06 bb 	st.b	sp[1723],r8
800055e0:	0c 97       	mov	r7,r6
800055e2:	04 94       	mov	r4,r2
800055e4:	06 96       	mov	r6,r3
800055e6:	02 92       	mov	r2,r1
800055e8:	40 93       	lddsp	r3,sp[0x24]
800055ea:	40 41       	lddsp	r1,sp[0x10]
800055ec:	0e 99       	mov	r9,r7
800055ee:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055f2:	40 3b       	lddsp	r11,sp[0xc]
800055f4:	58 0b       	cp.w	r11,0
800055f6:	c1 d0       	breq	80005630 <_vfprintf_r+0x1064>
800055f8:	10 36       	cp.w	r6,r8
800055fa:	c0 64       	brge	80005606 <_vfprintf_r+0x103a>
800055fc:	fa ca f9 44 	sub	r10,sp,-1724
80005600:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005604:	c1 d8       	rjmp	8000563e <_vfprintf_r+0x1072>
80005606:	fa c8 f9 50 	sub	r8,sp,-1712
8000560a:	1a d8       	st.w	--sp,r8
8000560c:	fa c8 fa b8 	sub	r8,sp,-1352
80005610:	1a d8       	st.w	--sp,r8
80005612:	fa c8 fb b4 	sub	r8,sp,-1100
80005616:	0c 9b       	mov	r11,r6
80005618:	1a d8       	st.w	--sp,r8
8000561a:	04 9a       	mov	r10,r2
8000561c:	fa c8 f9 40 	sub	r8,sp,-1728
80005620:	fa c9 ff b4 	sub	r9,sp,-76
80005624:	08 9c       	mov	r12,r4
80005626:	fe b0 f6 35 	rcall	80004290 <get_arg>
8000562a:	2f dd       	sub	sp,-12
8000562c:	78 06       	ld.w	r6,r12[0x0]
8000562e:	c2 08       	rjmp	8000566e <_vfprintf_r+0x10a2>
80005630:	2f f7       	sub	r7,-1
80005632:	10 39       	cp.w	r9,r8
80005634:	c0 84       	brge	80005644 <_vfprintf_r+0x1078>
80005636:	fa c9 f9 44 	sub	r9,sp,-1724
8000563a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000563e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005642:	c1 68       	rjmp	8000566e <_vfprintf_r+0x10a2>
80005644:	41 09       	lddsp	r9,sp[0x40]
80005646:	59 f8       	cp.w	r8,31
80005648:	e0 89 00 10 	brgt	80005668 <_vfprintf_r+0x109c>
8000564c:	f2 ca ff fc 	sub	r10,r9,-4
80005650:	51 0a       	stdsp	sp[0x40],r10
80005652:	72 06       	ld.w	r6,r9[0x0]
80005654:	fa ce f9 44 	sub	lr,sp,-1724
80005658:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000565c:	f3 46 fd 88 	st.w	r9[-632],r6
80005660:	2f f8       	sub	r8,-1
80005662:	fb 48 06 b4 	st.w	sp[1716],r8
80005666:	c0 48       	rjmp	8000566e <_vfprintf_r+0x10a2>
80005668:	72 06       	ld.w	r6,r9[0x0]
8000566a:	2f c9       	sub	r9,-4
8000566c:	51 09       	stdsp	sp[0x40],r9
8000566e:	40 2c       	lddsp	r12,sp[0x8]
80005670:	58 0c       	cp.w	r12,0
80005672:	c1 05       	brlt	80005692 <_vfprintf_r+0x10c6>
80005674:	18 9a       	mov	r10,r12
80005676:	30 0b       	mov	r11,0
80005678:	0c 9c       	mov	r12,r6
8000567a:	e0 a0 14 63 	rcall	80007f40 <memchr>
8000567e:	e0 80 02 e0 	breq	80005c3e <_vfprintf_r+0x1672>
80005682:	f8 06 01 02 	sub	r2,r12,r6
80005686:	40 2b       	lddsp	r11,sp[0x8]
80005688:	16 32       	cp.w	r2,r11
8000568a:	e0 89 02 da 	brgt	80005c3e <_vfprintf_r+0x1672>
8000568e:	e0 8f 02 d5 	bral	80005c38 <_vfprintf_r+0x166c>
80005692:	30 0a       	mov	r10,0
80005694:	0c 9c       	mov	r12,r6
80005696:	50 2a       	stdsp	sp[0x8],r10
80005698:	fe b0 f5 4b 	rcall	8000412e <strlen>
8000569c:	18 92       	mov	r2,r12
8000569e:	e0 8f 02 d3 	bral	80005c44 <_vfprintf_r+0x1678>
800056a2:	50 a7       	stdsp	sp[0x28],r7
800056a4:	50 80       	stdsp	sp[0x20],r0
800056a6:	0c 97       	mov	r7,r6
800056a8:	04 94       	mov	r4,r2
800056aa:	06 96       	mov	r6,r3
800056ac:	02 92       	mov	r2,r1
800056ae:	40 93       	lddsp	r3,sp[0x24]
800056b0:	10 90       	mov	r0,r8
800056b2:	40 41       	lddsp	r1,sp[0x10]
800056b4:	a5 a5       	sbr	r5,0x4
800056b6:	c0 a8       	rjmp	800056ca <_vfprintf_r+0x10fe>
800056b8:	50 a7       	stdsp	sp[0x28],r7
800056ba:	50 80       	stdsp	sp[0x20],r0
800056bc:	0c 97       	mov	r7,r6
800056be:	04 94       	mov	r4,r2
800056c0:	06 96       	mov	r6,r3
800056c2:	02 92       	mov	r2,r1
800056c4:	40 93       	lddsp	r3,sp[0x24]
800056c6:	10 90       	mov	r0,r8
800056c8:	40 41       	lddsp	r1,sp[0x10]
800056ca:	ed b5 00 05 	bld	r5,0x5
800056ce:	c5 71       	brne	8000577c <_vfprintf_r+0x11b0>
800056d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056d4:	40 39       	lddsp	r9,sp[0xc]
800056d6:	58 09       	cp.w	r9,0
800056d8:	c2 20       	breq	8000571c <_vfprintf_r+0x1150>
800056da:	10 36       	cp.w	r6,r8
800056dc:	c0 84       	brge	800056ec <_vfprintf_r+0x1120>
800056de:	fa c8 f9 44 	sub	r8,sp,-1724
800056e2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800056e6:	c2 48       	rjmp	8000572e <_vfprintf_r+0x1162>
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	a2 d4       	st.b	r1[0x5],r4
800056ec:	fa c8 f9 50 	sub	r8,sp,-1712
800056f0:	1a d8       	st.w	--sp,r8
800056f2:	fa c8 fa b8 	sub	r8,sp,-1352
800056f6:	1a d8       	st.w	--sp,r8
800056f8:	fa c8 fb b4 	sub	r8,sp,-1100
800056fc:	1a d8       	st.w	--sp,r8
800056fe:	fa c8 f9 40 	sub	r8,sp,-1728
80005702:	fa c9 ff b4 	sub	r9,sp,-76
80005706:	04 9a       	mov	r10,r2
80005708:	0c 9b       	mov	r11,r6
8000570a:	08 9c       	mov	r12,r4
8000570c:	fe b0 f5 c2 	rcall	80004290 <get_arg>
80005710:	2f dd       	sub	sp,-12
80005712:	f8 e8 00 00 	ld.d	r8,r12[0]
80005716:	fa e9 00 00 	st.d	sp[0],r8
8000571a:	c2 e8       	rjmp	80005776 <_vfprintf_r+0x11aa>
8000571c:	ee ca ff ff 	sub	r10,r7,-1
80005720:	10 37       	cp.w	r7,r8
80005722:	c0 b4       	brge	80005738 <_vfprintf_r+0x116c>
80005724:	fa c8 f9 44 	sub	r8,sp,-1724
80005728:	14 97       	mov	r7,r10
8000572a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000572e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005732:	fa eb 00 00 	st.d	sp[0],r10
80005736:	c2 08       	rjmp	80005776 <_vfprintf_r+0x11aa>
80005738:	41 09       	lddsp	r9,sp[0x40]
8000573a:	59 f8       	cp.w	r8,31
8000573c:	e0 89 00 16 	brgt	80005768 <_vfprintf_r+0x119c>
80005740:	f2 e6 00 00 	ld.d	r6,r9[0]
80005744:	f2 cb ff f8 	sub	r11,r9,-8
80005748:	fa e7 00 00 	st.d	sp[0],r6
8000574c:	51 0b       	stdsp	sp[0x40],r11
8000574e:	fa c6 f9 44 	sub	r6,sp,-1724
80005752:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005756:	fa e6 00 00 	ld.d	r6,sp[0]
8000575a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000575e:	2f f8       	sub	r8,-1
80005760:	14 97       	mov	r7,r10
80005762:	fb 48 06 b4 	st.w	sp[1716],r8
80005766:	c0 88       	rjmp	80005776 <_vfprintf_r+0x11aa>
80005768:	f2 e6 00 00 	ld.d	r6,r9[0]
8000576c:	2f 89       	sub	r9,-8
8000576e:	fa e7 00 00 	st.d	sp[0],r6
80005772:	51 09       	stdsp	sp[0x40],r9
80005774:	14 97       	mov	r7,r10
80005776:	30 18       	mov	r8,1
80005778:	e0 8f 01 d0 	bral	80005b18 <_vfprintf_r+0x154c>
8000577c:	ed b5 00 04 	bld	r5,0x4
80005780:	c1 61       	brne	800057ac <_vfprintf_r+0x11e0>
80005782:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005786:	40 3e       	lddsp	lr,sp[0xc]
80005788:	58 0e       	cp.w	lr,0
8000578a:	c0 80       	breq	8000579a <_vfprintf_r+0x11ce>
8000578c:	10 36       	cp.w	r6,r8
8000578e:	c6 74       	brge	8000585c <_vfprintf_r+0x1290>
80005790:	fa cc f9 44 	sub	r12,sp,-1724
80005794:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005798:	c8 08       	rjmp	80005898 <_vfprintf_r+0x12cc>
8000579a:	ee ca ff ff 	sub	r10,r7,-1
8000579e:	10 37       	cp.w	r7,r8
800057a0:	c7 f4       	brge	8000589e <_vfprintf_r+0x12d2>
800057a2:	fa cb f9 44 	sub	r11,sp,-1724
800057a6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800057aa:	c7 68       	rjmp	80005896 <_vfprintf_r+0x12ca>
800057ac:	ed b5 00 06 	bld	r5,0x6
800057b0:	c4 a1       	brne	80005844 <_vfprintf_r+0x1278>
800057b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800057b6:	40 3c       	lddsp	r12,sp[0xc]
800057b8:	58 0c       	cp.w	r12,0
800057ba:	c1 d0       	breq	800057f4 <_vfprintf_r+0x1228>
800057bc:	10 36       	cp.w	r6,r8
800057be:	c0 64       	brge	800057ca <_vfprintf_r+0x11fe>
800057c0:	fa cb f9 44 	sub	r11,sp,-1724
800057c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800057c8:	c1 f8       	rjmp	80005806 <_vfprintf_r+0x123a>
800057ca:	fa c8 f9 50 	sub	r8,sp,-1712
800057ce:	1a d8       	st.w	--sp,r8
800057d0:	fa c8 fa b8 	sub	r8,sp,-1352
800057d4:	1a d8       	st.w	--sp,r8
800057d6:	fa c8 fb b4 	sub	r8,sp,-1100
800057da:	1a d8       	st.w	--sp,r8
800057dc:	fa c8 f9 40 	sub	r8,sp,-1728
800057e0:	fa c9 ff b4 	sub	r9,sp,-76
800057e4:	04 9a       	mov	r10,r2
800057e6:	0c 9b       	mov	r11,r6
800057e8:	08 9c       	mov	r12,r4
800057ea:	fe b0 f5 53 	rcall	80004290 <get_arg>
800057ee:	2f dd       	sub	sp,-12
800057f0:	98 18       	ld.sh	r8,r12[0x2]
800057f2:	c2 68       	rjmp	8000583e <_vfprintf_r+0x1272>
800057f4:	ee ca ff ff 	sub	r10,r7,-1
800057f8:	10 37       	cp.w	r7,r8
800057fa:	c0 94       	brge	8000580c <_vfprintf_r+0x1240>
800057fc:	fa c9 f9 44 	sub	r9,sp,-1724
80005800:	14 97       	mov	r7,r10
80005802:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005806:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000580a:	c1 a8       	rjmp	8000583e <_vfprintf_r+0x1272>
8000580c:	41 09       	lddsp	r9,sp[0x40]
8000580e:	59 f8       	cp.w	r8,31
80005810:	e0 89 00 13 	brgt	80005836 <_vfprintf_r+0x126a>
80005814:	f2 cb ff fc 	sub	r11,r9,-4
80005818:	51 0b       	stdsp	sp[0x40],r11
8000581a:	72 09       	ld.w	r9,r9[0x0]
8000581c:	fa c6 f9 44 	sub	r6,sp,-1724
80005820:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005824:	2f f8       	sub	r8,-1
80005826:	f7 49 fd 88 	st.w	r11[-632],r9
8000582a:	fb 48 06 b4 	st.w	sp[1716],r8
8000582e:	14 97       	mov	r7,r10
80005830:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005834:	c0 58       	rjmp	8000583e <_vfprintf_r+0x1272>
80005836:	92 18       	ld.sh	r8,r9[0x2]
80005838:	14 97       	mov	r7,r10
8000583a:	2f c9       	sub	r9,-4
8000583c:	51 09       	stdsp	sp[0x40],r9
8000583e:	5c 78       	castu.h	r8
80005840:	50 18       	stdsp	sp[0x4],r8
80005842:	c4 68       	rjmp	800058ce <_vfprintf_r+0x1302>
80005844:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005848:	40 3c       	lddsp	r12,sp[0xc]
8000584a:	58 0c       	cp.w	r12,0
8000584c:	c1 d0       	breq	80005886 <_vfprintf_r+0x12ba>
8000584e:	10 36       	cp.w	r6,r8
80005850:	c0 64       	brge	8000585c <_vfprintf_r+0x1290>
80005852:	fa cb f9 44 	sub	r11,sp,-1724
80005856:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000585a:	c1 f8       	rjmp	80005898 <_vfprintf_r+0x12cc>
8000585c:	fa c8 f9 50 	sub	r8,sp,-1712
80005860:	1a d8       	st.w	--sp,r8
80005862:	fa c8 fa b8 	sub	r8,sp,-1352
80005866:	0c 9b       	mov	r11,r6
80005868:	1a d8       	st.w	--sp,r8
8000586a:	fa c8 fb b4 	sub	r8,sp,-1100
8000586e:	04 9a       	mov	r10,r2
80005870:	1a d8       	st.w	--sp,r8
80005872:	08 9c       	mov	r12,r4
80005874:	fa c8 f9 40 	sub	r8,sp,-1728
80005878:	fa c9 ff b4 	sub	r9,sp,-76
8000587c:	fe b0 f5 0a 	rcall	80004290 <get_arg>
80005880:	2f dd       	sub	sp,-12
80005882:	78 0b       	ld.w	r11,r12[0x0]
80005884:	c2 48       	rjmp	800058cc <_vfprintf_r+0x1300>
80005886:	ee ca ff ff 	sub	r10,r7,-1
8000588a:	10 37       	cp.w	r7,r8
8000588c:	c0 94       	brge	8000589e <_vfprintf_r+0x12d2>
8000588e:	fa c9 f9 44 	sub	r9,sp,-1724
80005892:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005896:	14 97       	mov	r7,r10
80005898:	ec fb fd 88 	ld.w	r11,r6[-632]
8000589c:	c1 88       	rjmp	800058cc <_vfprintf_r+0x1300>
8000589e:	41 09       	lddsp	r9,sp[0x40]
800058a0:	59 f8       	cp.w	r8,31
800058a2:	e0 89 00 11 	brgt	800058c4 <_vfprintf_r+0x12f8>
800058a6:	f2 cb ff fc 	sub	r11,r9,-4
800058aa:	51 0b       	stdsp	sp[0x40],r11
800058ac:	fa c6 f9 44 	sub	r6,sp,-1724
800058b0:	72 0b       	ld.w	r11,r9[0x0]
800058b2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800058b6:	f3 4b fd 88 	st.w	r9[-632],r11
800058ba:	2f f8       	sub	r8,-1
800058bc:	14 97       	mov	r7,r10
800058be:	fb 48 06 b4 	st.w	sp[1716],r8
800058c2:	c0 58       	rjmp	800058cc <_vfprintf_r+0x1300>
800058c4:	72 0b       	ld.w	r11,r9[0x0]
800058c6:	14 97       	mov	r7,r10
800058c8:	2f c9       	sub	r9,-4
800058ca:	51 09       	stdsp	sp[0x40],r9
800058cc:	50 1b       	stdsp	sp[0x4],r11
800058ce:	30 0e       	mov	lr,0
800058d0:	30 18       	mov	r8,1
800058d2:	50 0e       	stdsp	sp[0x0],lr
800058d4:	c2 29       	rjmp	80005b18 <_vfprintf_r+0x154c>
800058d6:	50 a7       	stdsp	sp[0x28],r7
800058d8:	50 80       	stdsp	sp[0x20],r0
800058da:	0c 97       	mov	r7,r6
800058dc:	04 94       	mov	r4,r2
800058de:	06 96       	mov	r6,r3
800058e0:	02 92       	mov	r2,r1
800058e2:	4d 3c       	lddpc	r12,80005a2c <_vfprintf_r+0x1460>
800058e4:	40 93       	lddsp	r3,sp[0x24]
800058e6:	10 90       	mov	r0,r8
800058e8:	40 41       	lddsp	r1,sp[0x10]
800058ea:	50 dc       	stdsp	sp[0x34],r12
800058ec:	ed b5 00 05 	bld	r5,0x5
800058f0:	c5 51       	brne	8000599a <_vfprintf_r+0x13ce>
800058f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800058f6:	40 3b       	lddsp	r11,sp[0xc]
800058f8:	58 0b       	cp.w	r11,0
800058fa:	c2 20       	breq	8000593e <_vfprintf_r+0x1372>
800058fc:	10 36       	cp.w	r6,r8
800058fe:	c0 a4       	brge	80005912 <_vfprintf_r+0x1346>
80005900:	fa ca f9 44 	sub	r10,sp,-1724
80005904:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005908:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000590c:	fa e9 00 00 	st.d	sp[0],r8
80005910:	cf 38       	rjmp	80005af6 <_vfprintf_r+0x152a>
80005912:	fa c8 f9 50 	sub	r8,sp,-1712
80005916:	1a d8       	st.w	--sp,r8
80005918:	fa c8 fa b8 	sub	r8,sp,-1352
8000591c:	04 9a       	mov	r10,r2
8000591e:	1a d8       	st.w	--sp,r8
80005920:	0c 9b       	mov	r11,r6
80005922:	fa c8 fb b4 	sub	r8,sp,-1100
80005926:	08 9c       	mov	r12,r4
80005928:	1a d8       	st.w	--sp,r8
8000592a:	fa c8 f9 40 	sub	r8,sp,-1728
8000592e:	fa c9 ff b4 	sub	r9,sp,-76
80005932:	fe b0 f4 af 	rcall	80004290 <get_arg>
80005936:	2f dd       	sub	sp,-12
80005938:	f8 ea 00 00 	ld.d	r10,r12[0]
8000593c:	c0 c8       	rjmp	80005954 <_vfprintf_r+0x1388>
8000593e:	ee ca ff ff 	sub	r10,r7,-1
80005942:	10 37       	cp.w	r7,r8
80005944:	c0 b4       	brge	8000595a <_vfprintf_r+0x138e>
80005946:	fa c9 f9 44 	sub	r9,sp,-1724
8000594a:	14 97       	mov	r7,r10
8000594c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005950:	ec ea fd 88 	ld.d	r10,r6[-632]
80005954:	fa eb 00 00 	st.d	sp[0],r10
80005958:	cc f8       	rjmp	80005af6 <_vfprintf_r+0x152a>
8000595a:	41 09       	lddsp	r9,sp[0x40]
8000595c:	59 f8       	cp.w	r8,31
8000595e:	e0 89 00 16 	brgt	8000598a <_vfprintf_r+0x13be>
80005962:	f2 e6 00 00 	ld.d	r6,r9[0]
80005966:	f2 cb ff f8 	sub	r11,r9,-8
8000596a:	fa e7 00 00 	st.d	sp[0],r6
8000596e:	51 0b       	stdsp	sp[0x40],r11
80005970:	fa c6 f9 44 	sub	r6,sp,-1724
80005974:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005978:	fa e6 00 00 	ld.d	r6,sp[0]
8000597c:	f2 e7 fd 88 	st.d	r9[-632],r6
80005980:	2f f8       	sub	r8,-1
80005982:	14 97       	mov	r7,r10
80005984:	fb 48 06 b4 	st.w	sp[1716],r8
80005988:	cb 78       	rjmp	80005af6 <_vfprintf_r+0x152a>
8000598a:	f2 e6 00 00 	ld.d	r6,r9[0]
8000598e:	2f 89       	sub	r9,-8
80005990:	fa e7 00 00 	st.d	sp[0],r6
80005994:	51 09       	stdsp	sp[0x40],r9
80005996:	14 97       	mov	r7,r10
80005998:	ca f8       	rjmp	80005af6 <_vfprintf_r+0x152a>
8000599a:	ed b5 00 04 	bld	r5,0x4
8000599e:	c1 71       	brne	800059cc <_vfprintf_r+0x1400>
800059a0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059a4:	40 3e       	lddsp	lr,sp[0xc]
800059a6:	58 0e       	cp.w	lr,0
800059a8:	c0 80       	breq	800059b8 <_vfprintf_r+0x13ec>
800059aa:	10 36       	cp.w	r6,r8
800059ac:	c6 a4       	brge	80005a80 <_vfprintf_r+0x14b4>
800059ae:	fa cc f9 44 	sub	r12,sp,-1724
800059b2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800059b6:	c8 38       	rjmp	80005abc <_vfprintf_r+0x14f0>
800059b8:	ee ca ff ff 	sub	r10,r7,-1
800059bc:	10 37       	cp.w	r7,r8
800059be:	e0 84 00 82 	brge	80005ac2 <_vfprintf_r+0x14f6>
800059c2:	fa cb f9 44 	sub	r11,sp,-1724
800059c6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059ca:	c7 88       	rjmp	80005aba <_vfprintf_r+0x14ee>
800059cc:	ed b5 00 06 	bld	r5,0x6
800059d0:	c4 c1       	brne	80005a68 <_vfprintf_r+0x149c>
800059d2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059d6:	40 3c       	lddsp	r12,sp[0xc]
800059d8:	58 0c       	cp.w	r12,0
800059da:	c1 d0       	breq	80005a14 <_vfprintf_r+0x1448>
800059dc:	10 36       	cp.w	r6,r8
800059de:	c0 64       	brge	800059ea <_vfprintf_r+0x141e>
800059e0:	fa cb f9 44 	sub	r11,sp,-1724
800059e4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059e8:	c1 f8       	rjmp	80005a26 <_vfprintf_r+0x145a>
800059ea:	fa c8 f9 50 	sub	r8,sp,-1712
800059ee:	1a d8       	st.w	--sp,r8
800059f0:	fa c8 fa b8 	sub	r8,sp,-1352
800059f4:	1a d8       	st.w	--sp,r8
800059f6:	fa c8 fb b4 	sub	r8,sp,-1100
800059fa:	1a d8       	st.w	--sp,r8
800059fc:	fa c8 f9 40 	sub	r8,sp,-1728
80005a00:	fa c9 ff b4 	sub	r9,sp,-76
80005a04:	04 9a       	mov	r10,r2
80005a06:	0c 9b       	mov	r11,r6
80005a08:	08 9c       	mov	r12,r4
80005a0a:	fe b0 f4 43 	rcall	80004290 <get_arg>
80005a0e:	2f dd       	sub	sp,-12
80005a10:	98 18       	ld.sh	r8,r12[0x2]
80005a12:	c2 88       	rjmp	80005a62 <_vfprintf_r+0x1496>
80005a14:	ee ca ff ff 	sub	r10,r7,-1
80005a18:	10 37       	cp.w	r7,r8
80005a1a:	c0 b4       	brge	80005a30 <_vfprintf_r+0x1464>
80005a1c:	fa c9 f9 44 	sub	r9,sp,-1724
80005a20:	14 97       	mov	r7,r10
80005a22:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a26:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005a2a:	c1 c8       	rjmp	80005a62 <_vfprintf_r+0x1496>
80005a2c:	80 00       	ld.sh	r0,r0[0x0]
80005a2e:	a2 d4       	st.b	r1[0x5],r4
80005a30:	41 09       	lddsp	r9,sp[0x40]
80005a32:	59 f8       	cp.w	r8,31
80005a34:	e0 89 00 13 	brgt	80005a5a <_vfprintf_r+0x148e>
80005a38:	f2 cb ff fc 	sub	r11,r9,-4
80005a3c:	51 0b       	stdsp	sp[0x40],r11
80005a3e:	72 09       	ld.w	r9,r9[0x0]
80005a40:	fa c6 f9 44 	sub	r6,sp,-1724
80005a44:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005a48:	2f f8       	sub	r8,-1
80005a4a:	f7 49 fd 88 	st.w	r11[-632],r9
80005a4e:	fb 48 06 b4 	st.w	sp[1716],r8
80005a52:	14 97       	mov	r7,r10
80005a54:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005a58:	c0 58       	rjmp	80005a62 <_vfprintf_r+0x1496>
80005a5a:	92 18       	ld.sh	r8,r9[0x2]
80005a5c:	14 97       	mov	r7,r10
80005a5e:	2f c9       	sub	r9,-4
80005a60:	51 09       	stdsp	sp[0x40],r9
80005a62:	5c 78       	castu.h	r8
80005a64:	50 18       	stdsp	sp[0x4],r8
80005a66:	c4 68       	rjmp	80005af2 <_vfprintf_r+0x1526>
80005a68:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a6c:	40 3c       	lddsp	r12,sp[0xc]
80005a6e:	58 0c       	cp.w	r12,0
80005a70:	c1 d0       	breq	80005aaa <_vfprintf_r+0x14de>
80005a72:	10 36       	cp.w	r6,r8
80005a74:	c0 64       	brge	80005a80 <_vfprintf_r+0x14b4>
80005a76:	fa cb f9 44 	sub	r11,sp,-1724
80005a7a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a7e:	c1 f8       	rjmp	80005abc <_vfprintf_r+0x14f0>
80005a80:	fa c8 f9 50 	sub	r8,sp,-1712
80005a84:	1a d8       	st.w	--sp,r8
80005a86:	fa c8 fa b8 	sub	r8,sp,-1352
80005a8a:	0c 9b       	mov	r11,r6
80005a8c:	1a d8       	st.w	--sp,r8
80005a8e:	fa c8 fb b4 	sub	r8,sp,-1100
80005a92:	04 9a       	mov	r10,r2
80005a94:	1a d8       	st.w	--sp,r8
80005a96:	08 9c       	mov	r12,r4
80005a98:	fa c8 f9 40 	sub	r8,sp,-1728
80005a9c:	fa c9 ff b4 	sub	r9,sp,-76
80005aa0:	fe b0 f3 f8 	rcall	80004290 <get_arg>
80005aa4:	2f dd       	sub	sp,-12
80005aa6:	78 0b       	ld.w	r11,r12[0x0]
80005aa8:	c2 48       	rjmp	80005af0 <_vfprintf_r+0x1524>
80005aaa:	ee ca ff ff 	sub	r10,r7,-1
80005aae:	10 37       	cp.w	r7,r8
80005ab0:	c0 94       	brge	80005ac2 <_vfprintf_r+0x14f6>
80005ab2:	fa c9 f9 44 	sub	r9,sp,-1724
80005ab6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005aba:	14 97       	mov	r7,r10
80005abc:	ec fb fd 88 	ld.w	r11,r6[-632]
80005ac0:	c1 88       	rjmp	80005af0 <_vfprintf_r+0x1524>
80005ac2:	41 09       	lddsp	r9,sp[0x40]
80005ac4:	59 f8       	cp.w	r8,31
80005ac6:	e0 89 00 11 	brgt	80005ae8 <_vfprintf_r+0x151c>
80005aca:	f2 cb ff fc 	sub	r11,r9,-4
80005ace:	51 0b       	stdsp	sp[0x40],r11
80005ad0:	fa c6 f9 44 	sub	r6,sp,-1724
80005ad4:	72 0b       	ld.w	r11,r9[0x0]
80005ad6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005ada:	f3 4b fd 88 	st.w	r9[-632],r11
80005ade:	2f f8       	sub	r8,-1
80005ae0:	14 97       	mov	r7,r10
80005ae2:	fb 48 06 b4 	st.w	sp[1716],r8
80005ae6:	c0 58       	rjmp	80005af0 <_vfprintf_r+0x1524>
80005ae8:	72 0b       	ld.w	r11,r9[0x0]
80005aea:	14 97       	mov	r7,r10
80005aec:	2f c9       	sub	r9,-4
80005aee:	51 09       	stdsp	sp[0x40],r9
80005af0:	50 1b       	stdsp	sp[0x4],r11
80005af2:	30 0e       	mov	lr,0
80005af4:	50 0e       	stdsp	sp[0x0],lr
80005af6:	40 08       	lddsp	r8,sp[0x0]
80005af8:	40 1c       	lddsp	r12,sp[0x4]
80005afa:	18 48       	or	r8,r12
80005afc:	5f 19       	srne	r9
80005afe:	0a 98       	mov	r8,r5
80005b00:	eb e9 00 09 	and	r9,r5,r9
80005b04:	a1 b8       	sbr	r8,0x1
80005b06:	58 09       	cp.w	r9,0
80005b08:	c0 70       	breq	80005b16 <_vfprintf_r+0x154a>
80005b0a:	10 95       	mov	r5,r8
80005b0c:	fb 60 06 b9 	st.b	sp[1721],r0
80005b10:	33 08       	mov	r8,48
80005b12:	fb 68 06 b8 	st.b	sp[1720],r8
80005b16:	30 28       	mov	r8,2
80005b18:	30 09       	mov	r9,0
80005b1a:	fb 69 06 bb 	st.b	sp[1723],r9
80005b1e:	0a 99       	mov	r9,r5
80005b20:	a7 d9       	cbr	r9,0x7
80005b22:	40 2b       	lddsp	r11,sp[0x8]
80005b24:	40 16       	lddsp	r6,sp[0x4]
80005b26:	58 0b       	cp.w	r11,0
80005b28:	5f 1a       	srne	r10
80005b2a:	f2 05 17 40 	movge	r5,r9
80005b2e:	fa c2 f9 78 	sub	r2,sp,-1672
80005b32:	40 09       	lddsp	r9,sp[0x0]
80005b34:	0c 49       	or	r9,r6
80005b36:	5f 19       	srne	r9
80005b38:	f5 e9 10 09 	or	r9,r10,r9
80005b3c:	c5 c0       	breq	80005bf4 <_vfprintf_r+0x1628>
80005b3e:	30 19       	mov	r9,1
80005b40:	f2 08 18 00 	cp.b	r8,r9
80005b44:	c0 60       	breq	80005b50 <_vfprintf_r+0x1584>
80005b46:	30 29       	mov	r9,2
80005b48:	f2 08 18 00 	cp.b	r8,r9
80005b4c:	c0 41       	brne	80005b54 <_vfprintf_r+0x1588>
80005b4e:	c3 c8       	rjmp	80005bc6 <_vfprintf_r+0x15fa>
80005b50:	04 96       	mov	r6,r2
80005b52:	c3 08       	rjmp	80005bb2 <_vfprintf_r+0x15e6>
80005b54:	04 96       	mov	r6,r2
80005b56:	fa e8 00 00 	ld.d	r8,sp[0]
80005b5a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005b5e:	2d 0a       	sub	r10,-48
80005b60:	0c fa       	st.b	--r6,r10
80005b62:	f0 0b 16 03 	lsr	r11,r8,0x3
80005b66:	f2 0c 16 03 	lsr	r12,r9,0x3
80005b6a:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005b6e:	18 99       	mov	r9,r12
80005b70:	16 98       	mov	r8,r11
80005b72:	58 08       	cp.w	r8,0
80005b74:	5c 29       	cpc	r9
80005b76:	cf 21       	brne	80005b5a <_vfprintf_r+0x158e>
80005b78:	fa e9 00 00 	st.d	sp[0],r8
80005b7c:	ed b5 00 00 	bld	r5,0x0
80005b80:	c4 51       	brne	80005c0a <_vfprintf_r+0x163e>
80005b82:	33 09       	mov	r9,48
80005b84:	f2 0a 18 00 	cp.b	r10,r9
80005b88:	c4 10       	breq	80005c0a <_vfprintf_r+0x163e>
80005b8a:	0c f9       	st.b	--r6,r9
80005b8c:	c3 f8       	rjmp	80005c0a <_vfprintf_r+0x163e>
80005b8e:	fa ea 00 00 	ld.d	r10,sp[0]
80005b92:	30 a8       	mov	r8,10
80005b94:	30 09       	mov	r9,0
80005b96:	e0 a0 1d 0f 	rcall	800095b4 <__avr32_umod64>
80005b9a:	30 a8       	mov	r8,10
80005b9c:	2d 0a       	sub	r10,-48
80005b9e:	30 09       	mov	r9,0
80005ba0:	ac 8a       	st.b	r6[0x0],r10
80005ba2:	fa ea 00 00 	ld.d	r10,sp[0]
80005ba6:	fe b0 f0 84 	rcall	80003cae <__avr32_udiv64>
80005baa:	16 99       	mov	r9,r11
80005bac:	14 98       	mov	r8,r10
80005bae:	fa e9 00 00 	st.d	sp[0],r8
80005bb2:	20 16       	sub	r6,1
80005bb4:	fa ea 00 00 	ld.d	r10,sp[0]
80005bb8:	58 9a       	cp.w	r10,9
80005bba:	5c 2b       	cpc	r11
80005bbc:	fe 9b ff e9 	brhi	80005b8e <_vfprintf_r+0x15c2>
80005bc0:	1b f8       	ld.ub	r8,sp[0x7]
80005bc2:	2d 08       	sub	r8,-48
80005bc4:	c2 08       	rjmp	80005c04 <_vfprintf_r+0x1638>
80005bc6:	04 96       	mov	r6,r2
80005bc8:	fa e8 00 00 	ld.d	r8,sp[0]
80005bcc:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005bd0:	40 de       	lddsp	lr,sp[0x34]
80005bd2:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005bd6:	0c fa       	st.b	--r6,r10
80005bd8:	f2 0b 16 04 	lsr	r11,r9,0x4
80005bdc:	f0 0a 16 04 	lsr	r10,r8,0x4
80005be0:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005be4:	16 99       	mov	r9,r11
80005be6:	14 98       	mov	r8,r10
80005be8:	58 08       	cp.w	r8,0
80005bea:	5c 29       	cpc	r9
80005bec:	cf 01       	brne	80005bcc <_vfprintf_r+0x1600>
80005bee:	fa e9 00 00 	st.d	sp[0],r8
80005bf2:	c0 c8       	rjmp	80005c0a <_vfprintf_r+0x163e>
80005bf4:	58 08       	cp.w	r8,0
80005bf6:	c0 91       	brne	80005c08 <_vfprintf_r+0x163c>
80005bf8:	ed b5 00 00 	bld	r5,0x0
80005bfc:	c0 61       	brne	80005c08 <_vfprintf_r+0x163c>
80005bfe:	fa c6 f9 79 	sub	r6,sp,-1671
80005c02:	33 08       	mov	r8,48
80005c04:	ac 88       	st.b	r6[0x0],r8
80005c06:	c0 28       	rjmp	80005c0a <_vfprintf_r+0x163e>
80005c08:	04 96       	mov	r6,r2
80005c0a:	0c 12       	sub	r2,r6
80005c0c:	c1 c8       	rjmp	80005c44 <_vfprintf_r+0x1678>
80005c0e:	50 a7       	stdsp	sp[0x28],r7
80005c10:	50 80       	stdsp	sp[0x20],r0
80005c12:	40 93       	lddsp	r3,sp[0x24]
80005c14:	0c 97       	mov	r7,r6
80005c16:	10 90       	mov	r0,r8
80005c18:	04 94       	mov	r4,r2
80005c1a:	40 41       	lddsp	r1,sp[0x10]
80005c1c:	58 08       	cp.w	r8,0
80005c1e:	e0 80 04 51 	breq	800064c0 <_vfprintf_r+0x1ef4>
80005c22:	fb 68 06 60 	st.b	sp[1632],r8
80005c26:	30 0c       	mov	r12,0
80005c28:	30 08       	mov	r8,0
80005c2a:	30 12       	mov	r2,1
80005c2c:	fb 68 06 bb 	st.b	sp[1723],r8
80005c30:	50 2c       	stdsp	sp[0x8],r12
80005c32:	fa c6 f9 a0 	sub	r6,sp,-1632
80005c36:	c0 78       	rjmp	80005c44 <_vfprintf_r+0x1678>
80005c38:	30 0b       	mov	r11,0
80005c3a:	50 2b       	stdsp	sp[0x8],r11
80005c3c:	c0 48       	rjmp	80005c44 <_vfprintf_r+0x1678>
80005c3e:	40 22       	lddsp	r2,sp[0x8]
80005c40:	30 0a       	mov	r10,0
80005c42:	50 2a       	stdsp	sp[0x8],r10
80005c44:	40 29       	lddsp	r9,sp[0x8]
80005c46:	e4 09 0c 49 	max	r9,r2,r9
80005c4a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005c4e:	50 39       	stdsp	sp[0xc],r9
80005c50:	0a 9e       	mov	lr,r5
80005c52:	30 09       	mov	r9,0
80005c54:	e2 1e 00 02 	andl	lr,0x2,COH
80005c58:	f2 08 18 00 	cp.b	r8,r9
80005c5c:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005c60:	f7 b8 01 ff 	subne	r8,-1
80005c64:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005c68:	0a 9b       	mov	r11,r5
80005c6a:	58 0e       	cp.w	lr,0
80005c6c:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005c70:	f7 bc 01 fe 	subne	r12,-2
80005c74:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005c78:	e2 1b 00 84 	andl	r11,0x84,COH
80005c7c:	50 fe       	stdsp	sp[0x3c],lr
80005c7e:	50 9b       	stdsp	sp[0x24],r11
80005c80:	c4 51       	brne	80005d0a <_vfprintf_r+0x173e>
80005c82:	40 8a       	lddsp	r10,sp[0x20]
80005c84:	40 39       	lddsp	r9,sp[0xc]
80005c86:	12 1a       	sub	r10,r9
80005c88:	50 4a       	stdsp	sp[0x10],r10
80005c8a:	58 0a       	cp.w	r10,0
80005c8c:	e0 89 00 1f 	brgt	80005cca <_vfprintf_r+0x16fe>
80005c90:	c3 d8       	rjmp	80005d0a <_vfprintf_r+0x173e>
80005c92:	2f 09       	sub	r9,-16
80005c94:	2f f8       	sub	r8,-1
80005c96:	4c ee       	lddpc	lr,80005dcc <_vfprintf_r+0x1800>
80005c98:	31 0c       	mov	r12,16
80005c9a:	fb 49 06 90 	st.w	sp[1680],r9
80005c9e:	87 0e       	st.w	r3[0x0],lr
80005ca0:	87 1c       	st.w	r3[0x4],r12
80005ca2:	fb 48 06 8c 	st.w	sp[1676],r8
80005ca6:	58 78       	cp.w	r8,7
80005ca8:	e0 89 00 04 	brgt	80005cb0 <_vfprintf_r+0x16e4>
80005cac:	2f 83       	sub	r3,-8
80005cae:	c0 b8       	rjmp	80005cc4 <_vfprintf_r+0x16f8>
80005cb0:	fa ca f9 78 	sub	r10,sp,-1672
80005cb4:	02 9b       	mov	r11,r1
80005cb6:	08 9c       	mov	r12,r4
80005cb8:	fe b0 f4 7c 	rcall	800045b0 <__sprint_r>
80005cbc:	e0 81 04 13 	brne	800064e2 <_vfprintf_r+0x1f16>
80005cc0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cc4:	40 4b       	lddsp	r11,sp[0x10]
80005cc6:	21 0b       	sub	r11,16
80005cc8:	50 4b       	stdsp	sp[0x10],r11
80005cca:	fa f9 06 90 	ld.w	r9,sp[1680]
80005cce:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cd2:	4b fa       	lddpc	r10,80005dcc <_vfprintf_r+0x1800>
80005cd4:	40 4e       	lddsp	lr,sp[0x10]
80005cd6:	59 0e       	cp.w	lr,16
80005cd8:	fe 99 ff dd 	brgt	80005c92 <_vfprintf_r+0x16c6>
80005cdc:	1c 09       	add	r9,lr
80005cde:	2f f8       	sub	r8,-1
80005ce0:	87 0a       	st.w	r3[0x0],r10
80005ce2:	fb 49 06 90 	st.w	sp[1680],r9
80005ce6:	87 1e       	st.w	r3[0x4],lr
80005ce8:	fb 48 06 8c 	st.w	sp[1676],r8
80005cec:	58 78       	cp.w	r8,7
80005cee:	e0 89 00 04 	brgt	80005cf6 <_vfprintf_r+0x172a>
80005cf2:	2f 83       	sub	r3,-8
80005cf4:	c0 b8       	rjmp	80005d0a <_vfprintf_r+0x173e>
80005cf6:	fa ca f9 78 	sub	r10,sp,-1672
80005cfa:	02 9b       	mov	r11,r1
80005cfc:	08 9c       	mov	r12,r4
80005cfe:	fe b0 f4 59 	rcall	800045b0 <__sprint_r>
80005d02:	e0 81 03 f0 	brne	800064e2 <_vfprintf_r+0x1f16>
80005d06:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d0a:	30 09       	mov	r9,0
80005d0c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005d10:	f2 08 18 00 	cp.b	r8,r9
80005d14:	c1 f0       	breq	80005d52 <_vfprintf_r+0x1786>
80005d16:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d1a:	fa c9 f9 45 	sub	r9,sp,-1723
80005d1e:	2f f8       	sub	r8,-1
80005d20:	87 09       	st.w	r3[0x0],r9
80005d22:	fb 48 06 90 	st.w	sp[1680],r8
80005d26:	30 19       	mov	r9,1
80005d28:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d2c:	87 19       	st.w	r3[0x4],r9
80005d2e:	2f f8       	sub	r8,-1
80005d30:	fb 48 06 8c 	st.w	sp[1676],r8
80005d34:	58 78       	cp.w	r8,7
80005d36:	e0 89 00 04 	brgt	80005d3e <_vfprintf_r+0x1772>
80005d3a:	2f 83       	sub	r3,-8
80005d3c:	c0 b8       	rjmp	80005d52 <_vfprintf_r+0x1786>
80005d3e:	fa ca f9 78 	sub	r10,sp,-1672
80005d42:	02 9b       	mov	r11,r1
80005d44:	08 9c       	mov	r12,r4
80005d46:	fe b0 f4 35 	rcall	800045b0 <__sprint_r>
80005d4a:	e0 81 03 cc 	brne	800064e2 <_vfprintf_r+0x1f16>
80005d4e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d52:	40 fc       	lddsp	r12,sp[0x3c]
80005d54:	58 0c       	cp.w	r12,0
80005d56:	c1 f0       	breq	80005d94 <_vfprintf_r+0x17c8>
80005d58:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d5c:	fa c9 f9 48 	sub	r9,sp,-1720
80005d60:	2f e8       	sub	r8,-2
80005d62:	87 09       	st.w	r3[0x0],r9
80005d64:	fb 48 06 90 	st.w	sp[1680],r8
80005d68:	30 29       	mov	r9,2
80005d6a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d6e:	87 19       	st.w	r3[0x4],r9
80005d70:	2f f8       	sub	r8,-1
80005d72:	fb 48 06 8c 	st.w	sp[1676],r8
80005d76:	58 78       	cp.w	r8,7
80005d78:	e0 89 00 04 	brgt	80005d80 <_vfprintf_r+0x17b4>
80005d7c:	2f 83       	sub	r3,-8
80005d7e:	c0 b8       	rjmp	80005d94 <_vfprintf_r+0x17c8>
80005d80:	fa ca f9 78 	sub	r10,sp,-1672
80005d84:	02 9b       	mov	r11,r1
80005d86:	08 9c       	mov	r12,r4
80005d88:	fe b0 f4 14 	rcall	800045b0 <__sprint_r>
80005d8c:	e0 81 03 ab 	brne	800064e2 <_vfprintf_r+0x1f16>
80005d90:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d94:	40 9b       	lddsp	r11,sp[0x24]
80005d96:	e0 4b 00 80 	cp.w	r11,128
80005d9a:	c4 a1       	brne	80005e2e <_vfprintf_r+0x1862>
80005d9c:	40 8a       	lddsp	r10,sp[0x20]
80005d9e:	40 39       	lddsp	r9,sp[0xc]
80005da0:	12 1a       	sub	r10,r9
80005da2:	50 4a       	stdsp	sp[0x10],r10
80005da4:	58 0a       	cp.w	r10,0
80005da6:	e0 89 00 24 	brgt	80005dee <_vfprintf_r+0x1822>
80005daa:	c4 28       	rjmp	80005e2e <_vfprintf_r+0x1862>
80005dac:	2f 09       	sub	r9,-16
80005dae:	2f f8       	sub	r8,-1
80005db0:	48 8e       	lddpc	lr,80005dd0 <_vfprintf_r+0x1804>
80005db2:	31 0c       	mov	r12,16
80005db4:	fb 49 06 90 	st.w	sp[1680],r9
80005db8:	87 0e       	st.w	r3[0x0],lr
80005dba:	87 1c       	st.w	r3[0x4],r12
80005dbc:	fb 48 06 8c 	st.w	sp[1676],r8
80005dc0:	58 78       	cp.w	r8,7
80005dc2:	e0 89 00 09 	brgt	80005dd4 <_vfprintf_r+0x1808>
80005dc6:	2f 83       	sub	r3,-8
80005dc8:	c1 08       	rjmp	80005de8 <_vfprintf_r+0x181c>
80005dca:	d7 03       	nop
80005dcc:	80 00       	ld.sh	r0,r0[0x0]
80005dce:	a2 ec       	st.b	r1[0x6],r12
80005dd0:	80 00       	ld.sh	r0,r0[0x0]
80005dd2:	a2 fc       	st.b	r1[0x7],r12
80005dd4:	fa ca f9 78 	sub	r10,sp,-1672
80005dd8:	02 9b       	mov	r11,r1
80005dda:	08 9c       	mov	r12,r4
80005ddc:	fe b0 f3 ea 	rcall	800045b0 <__sprint_r>
80005de0:	e0 81 03 81 	brne	800064e2 <_vfprintf_r+0x1f16>
80005de4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005de8:	40 4b       	lddsp	r11,sp[0x10]
80005dea:	21 0b       	sub	r11,16
80005dec:	50 4b       	stdsp	sp[0x10],r11
80005dee:	fa f9 06 90 	ld.w	r9,sp[1680]
80005df2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005df6:	4c 6a       	lddpc	r10,80005f0c <_vfprintf_r+0x1940>
80005df8:	40 4e       	lddsp	lr,sp[0x10]
80005dfa:	59 0e       	cp.w	lr,16
80005dfc:	fe 99 ff d8 	brgt	80005dac <_vfprintf_r+0x17e0>
80005e00:	1c 09       	add	r9,lr
80005e02:	2f f8       	sub	r8,-1
80005e04:	87 0a       	st.w	r3[0x0],r10
80005e06:	fb 49 06 90 	st.w	sp[1680],r9
80005e0a:	87 1e       	st.w	r3[0x4],lr
80005e0c:	fb 48 06 8c 	st.w	sp[1676],r8
80005e10:	58 78       	cp.w	r8,7
80005e12:	e0 89 00 04 	brgt	80005e1a <_vfprintf_r+0x184e>
80005e16:	2f 83       	sub	r3,-8
80005e18:	c0 b8       	rjmp	80005e2e <_vfprintf_r+0x1862>
80005e1a:	fa ca f9 78 	sub	r10,sp,-1672
80005e1e:	02 9b       	mov	r11,r1
80005e20:	08 9c       	mov	r12,r4
80005e22:	fe b0 f3 c7 	rcall	800045b0 <__sprint_r>
80005e26:	e0 81 03 5e 	brne	800064e2 <_vfprintf_r+0x1f16>
80005e2a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e2e:	40 2c       	lddsp	r12,sp[0x8]
80005e30:	04 1c       	sub	r12,r2
80005e32:	50 2c       	stdsp	sp[0x8],r12
80005e34:	58 0c       	cp.w	r12,0
80005e36:	e0 89 00 1f 	brgt	80005e74 <_vfprintf_r+0x18a8>
80005e3a:	c3 d8       	rjmp	80005eb4 <_vfprintf_r+0x18e8>
80005e3c:	2f 09       	sub	r9,-16
80005e3e:	2f f8       	sub	r8,-1
80005e40:	4b 3b       	lddpc	r11,80005f0c <_vfprintf_r+0x1940>
80005e42:	31 0a       	mov	r10,16
80005e44:	fb 49 06 90 	st.w	sp[1680],r9
80005e48:	87 0b       	st.w	r3[0x0],r11
80005e4a:	87 1a       	st.w	r3[0x4],r10
80005e4c:	fb 48 06 8c 	st.w	sp[1676],r8
80005e50:	58 78       	cp.w	r8,7
80005e52:	e0 89 00 04 	brgt	80005e5a <_vfprintf_r+0x188e>
80005e56:	2f 83       	sub	r3,-8
80005e58:	c0 b8       	rjmp	80005e6e <_vfprintf_r+0x18a2>
80005e5a:	fa ca f9 78 	sub	r10,sp,-1672
80005e5e:	02 9b       	mov	r11,r1
80005e60:	08 9c       	mov	r12,r4
80005e62:	fe b0 f3 a7 	rcall	800045b0 <__sprint_r>
80005e66:	e0 81 03 3e 	brne	800064e2 <_vfprintf_r+0x1f16>
80005e6a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e6e:	40 29       	lddsp	r9,sp[0x8]
80005e70:	21 09       	sub	r9,16
80005e72:	50 29       	stdsp	sp[0x8],r9
80005e74:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e78:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e7c:	4a 4a       	lddpc	r10,80005f0c <_vfprintf_r+0x1940>
80005e7e:	40 2e       	lddsp	lr,sp[0x8]
80005e80:	59 0e       	cp.w	lr,16
80005e82:	fe 99 ff dd 	brgt	80005e3c <_vfprintf_r+0x1870>
80005e86:	1c 09       	add	r9,lr
80005e88:	2f f8       	sub	r8,-1
80005e8a:	87 0a       	st.w	r3[0x0],r10
80005e8c:	fb 49 06 90 	st.w	sp[1680],r9
80005e90:	87 1e       	st.w	r3[0x4],lr
80005e92:	fb 48 06 8c 	st.w	sp[1676],r8
80005e96:	58 78       	cp.w	r8,7
80005e98:	e0 89 00 04 	brgt	80005ea0 <_vfprintf_r+0x18d4>
80005e9c:	2f 83       	sub	r3,-8
80005e9e:	c0 b8       	rjmp	80005eb4 <_vfprintf_r+0x18e8>
80005ea0:	fa ca f9 78 	sub	r10,sp,-1672
80005ea4:	02 9b       	mov	r11,r1
80005ea6:	08 9c       	mov	r12,r4
80005ea8:	fe b0 f3 84 	rcall	800045b0 <__sprint_r>
80005eac:	e0 81 03 1b 	brne	800064e2 <_vfprintf_r+0x1f16>
80005eb0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005eb4:	ed b5 00 08 	bld	r5,0x8
80005eb8:	c0 b0       	breq	80005ece <_vfprintf_r+0x1902>
80005eba:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ebe:	87 12       	st.w	r3[0x4],r2
80005ec0:	87 06       	st.w	r3[0x0],r6
80005ec2:	f0 02 00 02 	add	r2,r8,r2
80005ec6:	fb 42 06 90 	st.w	sp[1680],r2
80005eca:	e0 8f 01 d5 	bral	80006274 <_vfprintf_r+0x1ca8>
80005ece:	e0 40 00 65 	cp.w	r0,101
80005ed2:	e0 8a 01 d7 	brle	80006280 <_vfprintf_r+0x1cb4>
80005ed6:	30 08       	mov	r8,0
80005ed8:	30 09       	mov	r9,0
80005eda:	40 5b       	lddsp	r11,sp[0x14]
80005edc:	40 7a       	lddsp	r10,sp[0x1c]
80005ede:	e0 a0 19 64 	rcall	800091a6 <__avr32_f64_cmp_eq>
80005ee2:	c7 a0       	breq	80005fd6 <_vfprintf_r+0x1a0a>
80005ee4:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ee8:	48 a9       	lddpc	r9,80005f10 <_vfprintf_r+0x1944>
80005eea:	2f f8       	sub	r8,-1
80005eec:	87 09       	st.w	r3[0x0],r9
80005eee:	fb 48 06 90 	st.w	sp[1680],r8
80005ef2:	30 19       	mov	r9,1
80005ef4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ef8:	87 19       	st.w	r3[0x4],r9
80005efa:	2f f8       	sub	r8,-1
80005efc:	fb 48 06 8c 	st.w	sp[1676],r8
80005f00:	58 78       	cp.w	r8,7
80005f02:	e0 89 00 09 	brgt	80005f14 <_vfprintf_r+0x1948>
80005f06:	2f 83       	sub	r3,-8
80005f08:	c1 08       	rjmp	80005f28 <_vfprintf_r+0x195c>
80005f0a:	d7 03       	nop
80005f0c:	80 00       	ld.sh	r0,r0[0x0]
80005f0e:	a2 fc       	st.b	r1[0x7],r12
80005f10:	80 00       	ld.sh	r0,r0[0x0]
80005f12:	a2 e8       	st.b	r1[0x6],r8
80005f14:	fa ca f9 78 	sub	r10,sp,-1672
80005f18:	02 9b       	mov	r11,r1
80005f1a:	08 9c       	mov	r12,r4
80005f1c:	fe b0 f3 4a 	rcall	800045b0 <__sprint_r>
80005f20:	e0 81 02 e1 	brne	800064e2 <_vfprintf_r+0x1f16>
80005f24:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f28:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005f2c:	40 6c       	lddsp	r12,sp[0x18]
80005f2e:	18 38       	cp.w	r8,r12
80005f30:	c0 55       	brlt	80005f3a <_vfprintf_r+0x196e>
80005f32:	ed b5 00 00 	bld	r5,0x0
80005f36:	e0 81 02 69 	brne	80006408 <_vfprintf_r+0x1e3c>
80005f3a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f3e:	2f f8       	sub	r8,-1
80005f40:	40 cb       	lddsp	r11,sp[0x30]
80005f42:	fb 48 06 90 	st.w	sp[1680],r8
80005f46:	30 19       	mov	r9,1
80005f48:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f4c:	87 0b       	st.w	r3[0x0],r11
80005f4e:	2f f8       	sub	r8,-1
80005f50:	87 19       	st.w	r3[0x4],r9
80005f52:	fb 48 06 8c 	st.w	sp[1676],r8
80005f56:	58 78       	cp.w	r8,7
80005f58:	e0 89 00 04 	brgt	80005f60 <_vfprintf_r+0x1994>
80005f5c:	2f 83       	sub	r3,-8
80005f5e:	c0 b8       	rjmp	80005f74 <_vfprintf_r+0x19a8>
80005f60:	fa ca f9 78 	sub	r10,sp,-1672
80005f64:	02 9b       	mov	r11,r1
80005f66:	08 9c       	mov	r12,r4
80005f68:	fe b0 f3 24 	rcall	800045b0 <__sprint_r>
80005f6c:	e0 81 02 bb 	brne	800064e2 <_vfprintf_r+0x1f16>
80005f70:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f74:	40 66       	lddsp	r6,sp[0x18]
80005f76:	20 16       	sub	r6,1
80005f78:	58 06       	cp.w	r6,0
80005f7a:	e0 89 00 1d 	brgt	80005fb4 <_vfprintf_r+0x19e8>
80005f7e:	e0 8f 02 45 	bral	80006408 <_vfprintf_r+0x1e3c>
80005f82:	2f 09       	sub	r9,-16
80005f84:	2f f8       	sub	r8,-1
80005f86:	fb 49 06 90 	st.w	sp[1680],r9
80005f8a:	87 02       	st.w	r3[0x0],r2
80005f8c:	87 10       	st.w	r3[0x4],r0
80005f8e:	fb 48 06 8c 	st.w	sp[1676],r8
80005f92:	58 78       	cp.w	r8,7
80005f94:	e0 89 00 04 	brgt	80005f9c <_vfprintf_r+0x19d0>
80005f98:	2f 83       	sub	r3,-8
80005f9a:	c0 b8       	rjmp	80005fb0 <_vfprintf_r+0x19e4>
80005f9c:	fa ca f9 78 	sub	r10,sp,-1672
80005fa0:	02 9b       	mov	r11,r1
80005fa2:	08 9c       	mov	r12,r4
80005fa4:	fe b0 f3 06 	rcall	800045b0 <__sprint_r>
80005fa8:	e0 81 02 9d 	brne	800064e2 <_vfprintf_r+0x1f16>
80005fac:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fb0:	21 06       	sub	r6,16
80005fb2:	c0 38       	rjmp	80005fb8 <_vfprintf_r+0x19ec>
80005fb4:	4d 22       	lddpc	r2,800060fc <_vfprintf_r+0x1b30>
80005fb6:	31 00       	mov	r0,16
80005fb8:	fa f9 06 90 	ld.w	r9,sp[1680]
80005fbc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fc0:	4c fa       	lddpc	r10,800060fc <_vfprintf_r+0x1b30>
80005fc2:	59 06       	cp.w	r6,16
80005fc4:	fe 99 ff df 	brgt	80005f82 <_vfprintf_r+0x19b6>
80005fc8:	0c 09       	add	r9,r6
80005fca:	87 0a       	st.w	r3[0x0],r10
80005fcc:	fb 49 06 90 	st.w	sp[1680],r9
80005fd0:	2f f8       	sub	r8,-1
80005fd2:	87 16       	st.w	r3[0x4],r6
80005fd4:	c5 39       	rjmp	8000627a <_vfprintf_r+0x1cae>
80005fd6:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005fda:	58 0a       	cp.w	r10,0
80005fdc:	e0 89 00 94 	brgt	80006104 <_vfprintf_r+0x1b38>
80005fe0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fe4:	4c 79       	lddpc	r9,80006100 <_vfprintf_r+0x1b34>
80005fe6:	2f f8       	sub	r8,-1
80005fe8:	87 09       	st.w	r3[0x0],r9
80005fea:	fb 48 06 90 	st.w	sp[1680],r8
80005fee:	30 19       	mov	r9,1
80005ff0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ff4:	87 19       	st.w	r3[0x4],r9
80005ff6:	2f f8       	sub	r8,-1
80005ff8:	fb 48 06 8c 	st.w	sp[1676],r8
80005ffc:	58 78       	cp.w	r8,7
80005ffe:	e0 89 00 04 	brgt	80006006 <_vfprintf_r+0x1a3a>
80006002:	2f 83       	sub	r3,-8
80006004:	c0 b8       	rjmp	8000601a <_vfprintf_r+0x1a4e>
80006006:	fa ca f9 78 	sub	r10,sp,-1672
8000600a:	02 9b       	mov	r11,r1
8000600c:	08 9c       	mov	r12,r4
8000600e:	fe b0 f2 d1 	rcall	800045b0 <__sprint_r>
80006012:	e0 81 02 68 	brne	800064e2 <_vfprintf_r+0x1f16>
80006016:	fa c3 f9 e0 	sub	r3,sp,-1568
8000601a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000601e:	58 08       	cp.w	r8,0
80006020:	c0 81       	brne	80006030 <_vfprintf_r+0x1a64>
80006022:	40 6a       	lddsp	r10,sp[0x18]
80006024:	58 0a       	cp.w	r10,0
80006026:	c0 51       	brne	80006030 <_vfprintf_r+0x1a64>
80006028:	ed b5 00 00 	bld	r5,0x0
8000602c:	e0 81 01 ee 	brne	80006408 <_vfprintf_r+0x1e3c>
80006030:	40 c9       	lddsp	r9,sp[0x30]
80006032:	fa f8 06 90 	ld.w	r8,sp[1680]
80006036:	2f f8       	sub	r8,-1
80006038:	87 09       	st.w	r3[0x0],r9
8000603a:	fb 48 06 90 	st.w	sp[1680],r8
8000603e:	30 19       	mov	r9,1
80006040:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006044:	87 19       	st.w	r3[0x4],r9
80006046:	2f f8       	sub	r8,-1
80006048:	fb 48 06 8c 	st.w	sp[1676],r8
8000604c:	58 78       	cp.w	r8,7
8000604e:	e0 89 00 04 	brgt	80006056 <_vfprintf_r+0x1a8a>
80006052:	2f 83       	sub	r3,-8
80006054:	c0 b8       	rjmp	8000606a <_vfprintf_r+0x1a9e>
80006056:	fa ca f9 78 	sub	r10,sp,-1672
8000605a:	02 9b       	mov	r11,r1
8000605c:	08 9c       	mov	r12,r4
8000605e:	fe b0 f2 a9 	rcall	800045b0 <__sprint_r>
80006062:	e0 81 02 40 	brne	800064e2 <_vfprintf_r+0x1f16>
80006066:	fa c3 f9 e0 	sub	r3,sp,-1568
8000606a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000606e:	5c 32       	neg	r2
80006070:	58 02       	cp.w	r2,0
80006072:	e0 89 00 1d 	brgt	800060ac <_vfprintf_r+0x1ae0>
80006076:	c3 b8       	rjmp	800060ec <_vfprintf_r+0x1b20>
80006078:	2f 09       	sub	r9,-16
8000607a:	2f f8       	sub	r8,-1
8000607c:	31 0e       	mov	lr,16
8000607e:	fb 49 06 90 	st.w	sp[1680],r9
80006082:	87 00       	st.w	r3[0x0],r0
80006084:	87 1e       	st.w	r3[0x4],lr
80006086:	fb 48 06 8c 	st.w	sp[1676],r8
8000608a:	58 78       	cp.w	r8,7
8000608c:	e0 89 00 04 	brgt	80006094 <_vfprintf_r+0x1ac8>
80006090:	2f 83       	sub	r3,-8
80006092:	c0 b8       	rjmp	800060a8 <_vfprintf_r+0x1adc>
80006094:	fa ca f9 78 	sub	r10,sp,-1672
80006098:	02 9b       	mov	r11,r1
8000609a:	08 9c       	mov	r12,r4
8000609c:	fe b0 f2 8a 	rcall	800045b0 <__sprint_r>
800060a0:	e0 81 02 21 	brne	800064e2 <_vfprintf_r+0x1f16>
800060a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800060a8:	21 02       	sub	r2,16
800060aa:	c0 28       	rjmp	800060ae <_vfprintf_r+0x1ae2>
800060ac:	49 40       	lddpc	r0,800060fc <_vfprintf_r+0x1b30>
800060ae:	fa f9 06 90 	ld.w	r9,sp[1680]
800060b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060b6:	49 2a       	lddpc	r10,800060fc <_vfprintf_r+0x1b30>
800060b8:	59 02       	cp.w	r2,16
800060ba:	fe 99 ff df 	brgt	80006078 <_vfprintf_r+0x1aac>
800060be:	04 09       	add	r9,r2
800060c0:	2f f8       	sub	r8,-1
800060c2:	87 0a       	st.w	r3[0x0],r10
800060c4:	fb 49 06 90 	st.w	sp[1680],r9
800060c8:	87 12       	st.w	r3[0x4],r2
800060ca:	fb 48 06 8c 	st.w	sp[1676],r8
800060ce:	58 78       	cp.w	r8,7
800060d0:	e0 89 00 04 	brgt	800060d8 <_vfprintf_r+0x1b0c>
800060d4:	2f 83       	sub	r3,-8
800060d6:	c0 b8       	rjmp	800060ec <_vfprintf_r+0x1b20>
800060d8:	fa ca f9 78 	sub	r10,sp,-1672
800060dc:	02 9b       	mov	r11,r1
800060de:	08 9c       	mov	r12,r4
800060e0:	fe b0 f2 68 	rcall	800045b0 <__sprint_r>
800060e4:	e0 81 01 ff 	brne	800064e2 <_vfprintf_r+0x1f16>
800060e8:	fa c3 f9 e0 	sub	r3,sp,-1568
800060ec:	40 6c       	lddsp	r12,sp[0x18]
800060ee:	fa f8 06 90 	ld.w	r8,sp[1680]
800060f2:	87 06       	st.w	r3[0x0],r6
800060f4:	87 1c       	st.w	r3[0x4],r12
800060f6:	18 08       	add	r8,r12
800060f8:	cb c8       	rjmp	80006270 <_vfprintf_r+0x1ca4>
800060fa:	d7 03       	nop
800060fc:	80 00       	ld.sh	r0,r0[0x0]
800060fe:	a2 fc       	st.b	r1[0x7],r12
80006100:	80 00       	ld.sh	r0,r0[0x0]
80006102:	a2 e8       	st.b	r1[0x6],r8
80006104:	fa f9 06 90 	ld.w	r9,sp[1680]
80006108:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000610c:	40 6b       	lddsp	r11,sp[0x18]
8000610e:	16 3a       	cp.w	r10,r11
80006110:	c6 d5       	brlt	800061ea <_vfprintf_r+0x1c1e>
80006112:	16 09       	add	r9,r11
80006114:	2f f8       	sub	r8,-1
80006116:	87 06       	st.w	r3[0x0],r6
80006118:	fb 49 06 90 	st.w	sp[1680],r9
8000611c:	87 1b       	st.w	r3[0x4],r11
8000611e:	fb 48 06 8c 	st.w	sp[1676],r8
80006122:	58 78       	cp.w	r8,7
80006124:	e0 89 00 04 	brgt	8000612c <_vfprintf_r+0x1b60>
80006128:	2f 83       	sub	r3,-8
8000612a:	c0 b8       	rjmp	80006140 <_vfprintf_r+0x1b74>
8000612c:	fa ca f9 78 	sub	r10,sp,-1672
80006130:	02 9b       	mov	r11,r1
80006132:	08 9c       	mov	r12,r4
80006134:	fe b0 f2 3e 	rcall	800045b0 <__sprint_r>
80006138:	e0 81 01 d5 	brne	800064e2 <_vfprintf_r+0x1f16>
8000613c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006140:	fa f6 06 ac 	ld.w	r6,sp[1708]
80006144:	40 6a       	lddsp	r10,sp[0x18]
80006146:	14 16       	sub	r6,r10
80006148:	58 06       	cp.w	r6,0
8000614a:	e0 89 00 1c 	brgt	80006182 <_vfprintf_r+0x1bb6>
8000614e:	c3 b8       	rjmp	800061c4 <_vfprintf_r+0x1bf8>
80006150:	2f 09       	sub	r9,-16
80006152:	2f f8       	sub	r8,-1
80006154:	fb 49 06 90 	st.w	sp[1680],r9
80006158:	87 02       	st.w	r3[0x0],r2
8000615a:	87 10       	st.w	r3[0x4],r0
8000615c:	fb 48 06 8c 	st.w	sp[1676],r8
80006160:	58 78       	cp.w	r8,7
80006162:	e0 89 00 04 	brgt	8000616a <_vfprintf_r+0x1b9e>
80006166:	2f 83       	sub	r3,-8
80006168:	c0 b8       	rjmp	8000617e <_vfprintf_r+0x1bb2>
8000616a:	fa ca f9 78 	sub	r10,sp,-1672
8000616e:	02 9b       	mov	r11,r1
80006170:	08 9c       	mov	r12,r4
80006172:	fe b0 f2 1f 	rcall	800045b0 <__sprint_r>
80006176:	e0 81 01 b6 	brne	800064e2 <_vfprintf_r+0x1f16>
8000617a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000617e:	21 06       	sub	r6,16
80006180:	c0 38       	rjmp	80006186 <_vfprintf_r+0x1bba>
80006182:	4d c2       	lddpc	r2,800062f0 <_vfprintf_r+0x1d24>
80006184:	31 00       	mov	r0,16
80006186:	fa f9 06 90 	ld.w	r9,sp[1680]
8000618a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000618e:	4d 9a       	lddpc	r10,800062f0 <_vfprintf_r+0x1d24>
80006190:	59 06       	cp.w	r6,16
80006192:	fe 99 ff df 	brgt	80006150 <_vfprintf_r+0x1b84>
80006196:	0c 09       	add	r9,r6
80006198:	2f f8       	sub	r8,-1
8000619a:	87 0a       	st.w	r3[0x0],r10
8000619c:	fb 49 06 90 	st.w	sp[1680],r9
800061a0:	87 16       	st.w	r3[0x4],r6
800061a2:	fb 48 06 8c 	st.w	sp[1676],r8
800061a6:	58 78       	cp.w	r8,7
800061a8:	e0 89 00 04 	brgt	800061b0 <_vfprintf_r+0x1be4>
800061ac:	2f 83       	sub	r3,-8
800061ae:	c0 b8       	rjmp	800061c4 <_vfprintf_r+0x1bf8>
800061b0:	fa ca f9 78 	sub	r10,sp,-1672
800061b4:	02 9b       	mov	r11,r1
800061b6:	08 9c       	mov	r12,r4
800061b8:	fe b0 f1 fc 	rcall	800045b0 <__sprint_r>
800061bc:	e0 81 01 93 	brne	800064e2 <_vfprintf_r+0x1f16>
800061c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800061c4:	ed b5 00 00 	bld	r5,0x0
800061c8:	e0 81 01 20 	brne	80006408 <_vfprintf_r+0x1e3c>
800061cc:	40 c9       	lddsp	r9,sp[0x30]
800061ce:	fa f8 06 90 	ld.w	r8,sp[1680]
800061d2:	2f f8       	sub	r8,-1
800061d4:	87 09       	st.w	r3[0x0],r9
800061d6:	fb 48 06 90 	st.w	sp[1680],r8
800061da:	30 19       	mov	r9,1
800061dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061e0:	87 19       	st.w	r3[0x4],r9
800061e2:	2f f8       	sub	r8,-1
800061e4:	fb 48 06 8c 	st.w	sp[1676],r8
800061e8:	c0 29       	rjmp	800063ec <_vfprintf_r+0x1e20>
800061ea:	14 09       	add	r9,r10
800061ec:	2f f8       	sub	r8,-1
800061ee:	fb 49 06 90 	st.w	sp[1680],r9
800061f2:	87 06       	st.w	r3[0x0],r6
800061f4:	87 1a       	st.w	r3[0x4],r10
800061f6:	fb 48 06 8c 	st.w	sp[1676],r8
800061fa:	58 78       	cp.w	r8,7
800061fc:	e0 89 00 04 	brgt	80006204 <_vfprintf_r+0x1c38>
80006200:	2f 83       	sub	r3,-8
80006202:	c0 b8       	rjmp	80006218 <_vfprintf_r+0x1c4c>
80006204:	fa ca f9 78 	sub	r10,sp,-1672
80006208:	02 9b       	mov	r11,r1
8000620a:	08 9c       	mov	r12,r4
8000620c:	fe b0 f1 d2 	rcall	800045b0 <__sprint_r>
80006210:	e0 81 01 69 	brne	800064e2 <_vfprintf_r+0x1f16>
80006214:	fa c3 f9 e0 	sub	r3,sp,-1568
80006218:	40 c8       	lddsp	r8,sp[0x30]
8000621a:	87 08       	st.w	r3[0x0],r8
8000621c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006220:	2f f8       	sub	r8,-1
80006222:	30 19       	mov	r9,1
80006224:	fb 48 06 90 	st.w	sp[1680],r8
80006228:	87 19       	st.w	r3[0x4],r9
8000622a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000622e:	2f f8       	sub	r8,-1
80006230:	fb 48 06 8c 	st.w	sp[1676],r8
80006234:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006238:	58 78       	cp.w	r8,7
8000623a:	e0 89 00 04 	brgt	80006242 <_vfprintf_r+0x1c76>
8000623e:	2f 83       	sub	r3,-8
80006240:	c0 b8       	rjmp	80006256 <_vfprintf_r+0x1c8a>
80006242:	fa ca f9 78 	sub	r10,sp,-1672
80006246:	02 9b       	mov	r11,r1
80006248:	08 9c       	mov	r12,r4
8000624a:	fe b0 f1 b3 	rcall	800045b0 <__sprint_r>
8000624e:	e0 81 01 4a 	brne	800064e2 <_vfprintf_r+0x1f16>
80006252:	fa c3 f9 e0 	sub	r3,sp,-1568
80006256:	04 06       	add	r6,r2
80006258:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000625c:	87 06       	st.w	r3[0x0],r6
8000625e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006262:	40 66       	lddsp	r6,sp[0x18]
80006264:	40 6e       	lddsp	lr,sp[0x18]
80006266:	10 16       	sub	r6,r8
80006268:	f2 08 01 08 	sub	r8,r9,r8
8000626c:	87 16       	st.w	r3[0x4],r6
8000626e:	1c 08       	add	r8,lr
80006270:	fb 48 06 90 	st.w	sp[1680],r8
80006274:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006278:	2f f8       	sub	r8,-1
8000627a:	fb 48 06 8c 	st.w	sp[1676],r8
8000627e:	cb 78       	rjmp	800063ec <_vfprintf_r+0x1e20>
80006280:	40 6c       	lddsp	r12,sp[0x18]
80006282:	58 1c       	cp.w	r12,1
80006284:	e0 89 00 06 	brgt	80006290 <_vfprintf_r+0x1cc4>
80006288:	ed b5 00 00 	bld	r5,0x0
8000628c:	e0 81 00 85 	brne	80006396 <_vfprintf_r+0x1dca>
80006290:	fa f8 06 90 	ld.w	r8,sp[1680]
80006294:	2f f8       	sub	r8,-1
80006296:	30 19       	mov	r9,1
80006298:	fb 48 06 90 	st.w	sp[1680],r8
8000629c:	87 06       	st.w	r3[0x0],r6
8000629e:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062a2:	87 19       	st.w	r3[0x4],r9
800062a4:	2f f8       	sub	r8,-1
800062a6:	fb 48 06 8c 	st.w	sp[1676],r8
800062aa:	58 78       	cp.w	r8,7
800062ac:	e0 89 00 04 	brgt	800062b4 <_vfprintf_r+0x1ce8>
800062b0:	2f 83       	sub	r3,-8
800062b2:	c0 b8       	rjmp	800062c8 <_vfprintf_r+0x1cfc>
800062b4:	fa ca f9 78 	sub	r10,sp,-1672
800062b8:	02 9b       	mov	r11,r1
800062ba:	08 9c       	mov	r12,r4
800062bc:	fe b0 f1 7a 	rcall	800045b0 <__sprint_r>
800062c0:	e0 81 01 11 	brne	800064e2 <_vfprintf_r+0x1f16>
800062c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800062c8:	fa f8 06 90 	ld.w	r8,sp[1680]
800062cc:	2f f8       	sub	r8,-1
800062ce:	40 cb       	lddsp	r11,sp[0x30]
800062d0:	fb 48 06 90 	st.w	sp[1680],r8
800062d4:	30 19       	mov	r9,1
800062d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062da:	87 0b       	st.w	r3[0x0],r11
800062dc:	2f f8       	sub	r8,-1
800062de:	87 19       	st.w	r3[0x4],r9
800062e0:	fb 48 06 8c 	st.w	sp[1676],r8
800062e4:	58 78       	cp.w	r8,7
800062e6:	e0 89 00 07 	brgt	800062f4 <_vfprintf_r+0x1d28>
800062ea:	2f 83       	sub	r3,-8
800062ec:	c0 e8       	rjmp	80006308 <_vfprintf_r+0x1d3c>
800062ee:	d7 03       	nop
800062f0:	80 00       	ld.sh	r0,r0[0x0]
800062f2:	a2 fc       	st.b	r1[0x7],r12
800062f4:	fa ca f9 78 	sub	r10,sp,-1672
800062f8:	02 9b       	mov	r11,r1
800062fa:	08 9c       	mov	r12,r4
800062fc:	fe b0 f1 5a 	rcall	800045b0 <__sprint_r>
80006300:	e0 81 00 f1 	brne	800064e2 <_vfprintf_r+0x1f16>
80006304:	fa c3 f9 e0 	sub	r3,sp,-1568
80006308:	30 08       	mov	r8,0
8000630a:	30 09       	mov	r9,0
8000630c:	40 5b       	lddsp	r11,sp[0x14]
8000630e:	40 7a       	lddsp	r10,sp[0x1c]
80006310:	e0 a0 17 4b 	rcall	800091a6 <__avr32_f64_cmp_eq>
80006314:	40 68       	lddsp	r8,sp[0x18]
80006316:	20 18       	sub	r8,1
80006318:	58 0c       	cp.w	r12,0
8000631a:	c0 d1       	brne	80006334 <_vfprintf_r+0x1d68>
8000631c:	2f f6       	sub	r6,-1
8000631e:	87 18       	st.w	r3[0x4],r8
80006320:	87 06       	st.w	r3[0x0],r6
80006322:	fa f6 06 90 	ld.w	r6,sp[1680]
80006326:	10 06       	add	r6,r8
80006328:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000632c:	fb 46 06 90 	st.w	sp[1680],r6
80006330:	2f f8       	sub	r8,-1
80006332:	c2 f8       	rjmp	80006390 <_vfprintf_r+0x1dc4>
80006334:	10 96       	mov	r6,r8
80006336:	58 08       	cp.w	r8,0
80006338:	e0 89 00 1c 	brgt	80006370 <_vfprintf_r+0x1da4>
8000633c:	c4 98       	rjmp	800063ce <_vfprintf_r+0x1e02>
8000633e:	2f 09       	sub	r9,-16
80006340:	2f f8       	sub	r8,-1
80006342:	fb 49 06 90 	st.w	sp[1680],r9
80006346:	87 02       	st.w	r3[0x0],r2
80006348:	87 10       	st.w	r3[0x4],r0
8000634a:	fb 48 06 8c 	st.w	sp[1676],r8
8000634e:	58 78       	cp.w	r8,7
80006350:	e0 89 00 04 	brgt	80006358 <_vfprintf_r+0x1d8c>
80006354:	2f 83       	sub	r3,-8
80006356:	c0 b8       	rjmp	8000636c <_vfprintf_r+0x1da0>
80006358:	fa ca f9 78 	sub	r10,sp,-1672
8000635c:	02 9b       	mov	r11,r1
8000635e:	08 9c       	mov	r12,r4
80006360:	fe b0 f1 28 	rcall	800045b0 <__sprint_r>
80006364:	e0 81 00 bf 	brne	800064e2 <_vfprintf_r+0x1f16>
80006368:	fa c3 f9 e0 	sub	r3,sp,-1568
8000636c:	21 06       	sub	r6,16
8000636e:	c0 38       	rjmp	80006374 <_vfprintf_r+0x1da8>
80006370:	4d 22       	lddpc	r2,800064b8 <_vfprintf_r+0x1eec>
80006372:	31 00       	mov	r0,16
80006374:	fa f9 06 90 	ld.w	r9,sp[1680]
80006378:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000637c:	4c fa       	lddpc	r10,800064b8 <_vfprintf_r+0x1eec>
8000637e:	59 06       	cp.w	r6,16
80006380:	fe 99 ff df 	brgt	8000633e <_vfprintf_r+0x1d72>
80006384:	0c 09       	add	r9,r6
80006386:	87 0a       	st.w	r3[0x0],r10
80006388:	fb 49 06 90 	st.w	sp[1680],r9
8000638c:	2f f8       	sub	r8,-1
8000638e:	87 16       	st.w	r3[0x4],r6
80006390:	fb 48 06 8c 	st.w	sp[1676],r8
80006394:	c0 e8       	rjmp	800063b0 <_vfprintf_r+0x1de4>
80006396:	fa f8 06 90 	ld.w	r8,sp[1680]
8000639a:	2f f8       	sub	r8,-1
8000639c:	30 19       	mov	r9,1
8000639e:	fb 48 06 90 	st.w	sp[1680],r8
800063a2:	87 06       	st.w	r3[0x0],r6
800063a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063a8:	87 19       	st.w	r3[0x4],r9
800063aa:	2f f8       	sub	r8,-1
800063ac:	fb 48 06 8c 	st.w	sp[1676],r8
800063b0:	58 78       	cp.w	r8,7
800063b2:	e0 89 00 04 	brgt	800063ba <_vfprintf_r+0x1dee>
800063b6:	2f 83       	sub	r3,-8
800063b8:	c0 b8       	rjmp	800063ce <_vfprintf_r+0x1e02>
800063ba:	fa ca f9 78 	sub	r10,sp,-1672
800063be:	02 9b       	mov	r11,r1
800063c0:	08 9c       	mov	r12,r4
800063c2:	fe b0 f0 f7 	rcall	800045b0 <__sprint_r>
800063c6:	e0 81 00 8e 	brne	800064e2 <_vfprintf_r+0x1f16>
800063ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800063ce:	40 ea       	lddsp	r10,sp[0x38]
800063d0:	fa f8 06 90 	ld.w	r8,sp[1680]
800063d4:	14 08       	add	r8,r10
800063d6:	fa c9 f9 64 	sub	r9,sp,-1692
800063da:	fb 48 06 90 	st.w	sp[1680],r8
800063de:	87 1a       	st.w	r3[0x4],r10
800063e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063e4:	87 09       	st.w	r3[0x0],r9
800063e6:	2f f8       	sub	r8,-1
800063e8:	fb 48 06 8c 	st.w	sp[1676],r8
800063ec:	58 78       	cp.w	r8,7
800063ee:	e0 89 00 04 	brgt	800063f6 <_vfprintf_r+0x1e2a>
800063f2:	2f 83       	sub	r3,-8
800063f4:	c0 a8       	rjmp	80006408 <_vfprintf_r+0x1e3c>
800063f6:	fa ca f9 78 	sub	r10,sp,-1672
800063fa:	02 9b       	mov	r11,r1
800063fc:	08 9c       	mov	r12,r4
800063fe:	fe b0 f0 d9 	rcall	800045b0 <__sprint_r>
80006402:	c7 01       	brne	800064e2 <_vfprintf_r+0x1f16>
80006404:	fa c3 f9 e0 	sub	r3,sp,-1568
80006408:	e2 15 00 04 	andl	r5,0x4,COH
8000640c:	c3 d0       	breq	80006486 <_vfprintf_r+0x1eba>
8000640e:	40 86       	lddsp	r6,sp[0x20]
80006410:	40 39       	lddsp	r9,sp[0xc]
80006412:	12 16       	sub	r6,r9
80006414:	58 06       	cp.w	r6,0
80006416:	e0 89 00 1a 	brgt	8000644a <_vfprintf_r+0x1e7e>
8000641a:	c3 68       	rjmp	80006486 <_vfprintf_r+0x1eba>
8000641c:	2f 09       	sub	r9,-16
8000641e:	2f f8       	sub	r8,-1
80006420:	fb 49 06 90 	st.w	sp[1680],r9
80006424:	87 05       	st.w	r3[0x0],r5
80006426:	87 12       	st.w	r3[0x4],r2
80006428:	fb 48 06 8c 	st.w	sp[1676],r8
8000642c:	58 78       	cp.w	r8,7
8000642e:	e0 89 00 04 	brgt	80006436 <_vfprintf_r+0x1e6a>
80006432:	2f 83       	sub	r3,-8
80006434:	c0 98       	rjmp	80006446 <_vfprintf_r+0x1e7a>
80006436:	00 9a       	mov	r10,r0
80006438:	02 9b       	mov	r11,r1
8000643a:	08 9c       	mov	r12,r4
8000643c:	fe b0 f0 ba 	rcall	800045b0 <__sprint_r>
80006440:	c5 11       	brne	800064e2 <_vfprintf_r+0x1f16>
80006442:	fa c3 f9 e0 	sub	r3,sp,-1568
80006446:	21 06       	sub	r6,16
80006448:	c0 58       	rjmp	80006452 <_vfprintf_r+0x1e86>
8000644a:	49 d5       	lddpc	r5,800064bc <_vfprintf_r+0x1ef0>
8000644c:	31 02       	mov	r2,16
8000644e:	fa c0 f9 78 	sub	r0,sp,-1672
80006452:	fa f9 06 90 	ld.w	r9,sp[1680]
80006456:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000645a:	49 9a       	lddpc	r10,800064bc <_vfprintf_r+0x1ef0>
8000645c:	59 06       	cp.w	r6,16
8000645e:	fe 99 ff df 	brgt	8000641c <_vfprintf_r+0x1e50>
80006462:	0c 09       	add	r9,r6
80006464:	2f f8       	sub	r8,-1
80006466:	87 0a       	st.w	r3[0x0],r10
80006468:	87 16       	st.w	r3[0x4],r6
8000646a:	fb 49 06 90 	st.w	sp[1680],r9
8000646e:	fb 48 06 8c 	st.w	sp[1676],r8
80006472:	58 78       	cp.w	r8,7
80006474:	e0 8a 00 09 	brle	80006486 <_vfprintf_r+0x1eba>
80006478:	fa ca f9 78 	sub	r10,sp,-1672
8000647c:	02 9b       	mov	r11,r1
8000647e:	08 9c       	mov	r12,r4
80006480:	fe b0 f0 98 	rcall	800045b0 <__sprint_r>
80006484:	c2 f1       	brne	800064e2 <_vfprintf_r+0x1f16>
80006486:	40 bc       	lddsp	r12,sp[0x2c]
80006488:	40 36       	lddsp	r6,sp[0xc]
8000648a:	40 8e       	lddsp	lr,sp[0x20]
8000648c:	ec 0e 0c 48 	max	r8,r6,lr
80006490:	10 0c       	add	r12,r8
80006492:	50 bc       	stdsp	sp[0x2c],r12
80006494:	fa f8 06 90 	ld.w	r8,sp[1680]
80006498:	58 08       	cp.w	r8,0
8000649a:	c0 80       	breq	800064aa <_vfprintf_r+0x1ede>
8000649c:	fa ca f9 78 	sub	r10,sp,-1672
800064a0:	02 9b       	mov	r11,r1
800064a2:	08 9c       	mov	r12,r4
800064a4:	fe b0 f0 86 	rcall	800045b0 <__sprint_r>
800064a8:	c1 d1       	brne	800064e2 <_vfprintf_r+0x1f16>
800064aa:	30 0b       	mov	r11,0
800064ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800064b0:	fb 4b 06 8c 	st.w	sp[1676],r11
800064b4:	fe 9f f1 17 	bral	800046e2 <_vfprintf_r+0x116>
800064b8:	80 00       	ld.sh	r0,r0[0x0]
800064ba:	a2 fc       	st.b	r1[0x7],r12
800064bc:	80 00       	ld.sh	r0,r0[0x0]
800064be:	a2 ec       	st.b	r1[0x6],r12
800064c0:	08 95       	mov	r5,r4
800064c2:	fa f8 06 90 	ld.w	r8,sp[1680]
800064c6:	58 08       	cp.w	r8,0
800064c8:	c0 80       	breq	800064d8 <_vfprintf_r+0x1f0c>
800064ca:	08 9c       	mov	r12,r4
800064cc:	fa ca f9 78 	sub	r10,sp,-1672
800064d0:	02 9b       	mov	r11,r1
800064d2:	fe b0 f0 6f 	rcall	800045b0 <__sprint_r>
800064d6:	c0 61       	brne	800064e2 <_vfprintf_r+0x1f16>
800064d8:	30 08       	mov	r8,0
800064da:	fb 48 06 8c 	st.w	sp[1676],r8
800064de:	c0 28       	rjmp	800064e2 <_vfprintf_r+0x1f16>
800064e0:	40 41       	lddsp	r1,sp[0x10]
800064e2:	82 68       	ld.sh	r8,r1[0xc]
800064e4:	ed b8 00 06 	bld	r8,0x6
800064e8:	c0 31       	brne	800064ee <_vfprintf_r+0x1f22>
800064ea:	3f fa       	mov	r10,-1
800064ec:	50 ba       	stdsp	sp[0x2c],r10
800064ee:	40 bc       	lddsp	r12,sp[0x2c]
800064f0:	fe 3d f9 44 	sub	sp,-1724
800064f4:	d8 32       	popm	r0-r7,pc
800064f6:	d7 03       	nop

800064f8 <__swsetup_r>:
800064f8:	d4 21       	pushm	r4-r7,lr
800064fa:	4b 38       	lddpc	r8,800065c4 <__swsetup_r+0xcc>
800064fc:	18 96       	mov	r6,r12
800064fe:	16 97       	mov	r7,r11
80006500:	70 0c       	ld.w	r12,r8[0x0]
80006502:	58 0c       	cp.w	r12,0
80006504:	c0 60       	breq	80006510 <__swsetup_r+0x18>
80006506:	78 68       	ld.w	r8,r12[0x18]
80006508:	58 08       	cp.w	r8,0
8000650a:	c0 31       	brne	80006510 <__swsetup_r+0x18>
8000650c:	e0 a0 07 c0 	rcall	8000748c <__sinit>
80006510:	4a e8       	lddpc	r8,800065c8 <__swsetup_r+0xd0>
80006512:	10 37       	cp.w	r7,r8
80006514:	c0 51       	brne	8000651e <__swsetup_r+0x26>
80006516:	4a c8       	lddpc	r8,800065c4 <__swsetup_r+0xcc>
80006518:	70 08       	ld.w	r8,r8[0x0]
8000651a:	70 07       	ld.w	r7,r8[0x0]
8000651c:	c0 e8       	rjmp	80006538 <__swsetup_r+0x40>
8000651e:	4a c8       	lddpc	r8,800065cc <__swsetup_r+0xd4>
80006520:	10 37       	cp.w	r7,r8
80006522:	c0 51       	brne	8000652c <__swsetup_r+0x34>
80006524:	4a 88       	lddpc	r8,800065c4 <__swsetup_r+0xcc>
80006526:	70 08       	ld.w	r8,r8[0x0]
80006528:	70 17       	ld.w	r7,r8[0x4]
8000652a:	c0 78       	rjmp	80006538 <__swsetup_r+0x40>
8000652c:	4a 98       	lddpc	r8,800065d0 <__swsetup_r+0xd8>
8000652e:	10 37       	cp.w	r7,r8
80006530:	c0 41       	brne	80006538 <__swsetup_r+0x40>
80006532:	4a 58       	lddpc	r8,800065c4 <__swsetup_r+0xcc>
80006534:	70 08       	ld.w	r8,r8[0x0]
80006536:	70 27       	ld.w	r7,r8[0x8]
80006538:	8e 68       	ld.sh	r8,r7[0xc]
8000653a:	ed b8 00 03 	bld	r8,0x3
8000653e:	c1 e0       	breq	8000657a <__swsetup_r+0x82>
80006540:	ed b8 00 04 	bld	r8,0x4
80006544:	c3 e1       	brne	800065c0 <__swsetup_r+0xc8>
80006546:	ed b8 00 02 	bld	r8,0x2
8000654a:	c1 51       	brne	80006574 <__swsetup_r+0x7c>
8000654c:	6e db       	ld.w	r11,r7[0x34]
8000654e:	58 0b       	cp.w	r11,0
80006550:	c0 a0       	breq	80006564 <__swsetup_r+0x6c>
80006552:	ee c8 ff bc 	sub	r8,r7,-68
80006556:	10 3b       	cp.w	r11,r8
80006558:	c0 40       	breq	80006560 <__swsetup_r+0x68>
8000655a:	0c 9c       	mov	r12,r6
8000655c:	e0 a0 08 34 	rcall	800075c4 <_free_r>
80006560:	30 08       	mov	r8,0
80006562:	8f d8       	st.w	r7[0x34],r8
80006564:	8e 68       	ld.sh	r8,r7[0xc]
80006566:	e0 18 ff db 	andl	r8,0xffdb
8000656a:	ae 68       	st.h	r7[0xc],r8
8000656c:	30 08       	mov	r8,0
8000656e:	8f 18       	st.w	r7[0x4],r8
80006570:	6e 48       	ld.w	r8,r7[0x10]
80006572:	8f 08       	st.w	r7[0x0],r8
80006574:	8e 68       	ld.sh	r8,r7[0xc]
80006576:	a3 b8       	sbr	r8,0x3
80006578:	ae 68       	st.h	r7[0xc],r8
8000657a:	6e 48       	ld.w	r8,r7[0x10]
8000657c:	58 08       	cp.w	r8,0
8000657e:	c0 b1       	brne	80006594 <__swsetup_r+0x9c>
80006580:	8e 68       	ld.sh	r8,r7[0xc]
80006582:	e2 18 02 80 	andl	r8,0x280,COH
80006586:	e0 48 02 00 	cp.w	r8,512
8000658a:	c0 50       	breq	80006594 <__swsetup_r+0x9c>
8000658c:	0c 9c       	mov	r12,r6
8000658e:	0e 9b       	mov	r11,r7
80006590:	e0 a0 0a 5c 	rcall	80007a48 <__smakebuf_r>
80006594:	8e 69       	ld.sh	r9,r7[0xc]
80006596:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000659a:	c0 70       	breq	800065a8 <__swsetup_r+0xb0>
8000659c:	30 08       	mov	r8,0
8000659e:	8f 28       	st.w	r7[0x8],r8
800065a0:	6e 58       	ld.w	r8,r7[0x14]
800065a2:	5c 38       	neg	r8
800065a4:	8f 68       	st.w	r7[0x18],r8
800065a6:	c0 68       	rjmp	800065b2 <__swsetup_r+0xba>
800065a8:	ed b9 00 01 	bld	r9,0x1
800065ac:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800065b0:	8f 28       	st.w	r7[0x8],r8
800065b2:	6e 48       	ld.w	r8,r7[0x10]
800065b4:	58 08       	cp.w	r8,0
800065b6:	c0 61       	brne	800065c2 <__swsetup_r+0xca>
800065b8:	8e 68       	ld.sh	r8,r7[0xc]
800065ba:	ed b8 00 07 	bld	r8,0x7
800065be:	c0 21       	brne	800065c2 <__swsetup_r+0xca>
800065c0:	dc 2a       	popm	r4-r7,pc,r12=-1
800065c2:	d8 2a       	popm	r4-r7,pc,r12=0
800065c4:	00 00       	add	r0,r0
800065c6:	00 fc       	st.b	--r0,r12
800065c8:	80 00       	ld.sh	r0,r0[0x0]
800065ca:	a4 1c       	st.h	r2[0x2],r12
800065cc:	80 00       	ld.sh	r0,r0[0x0]
800065ce:	a4 3c       	st.h	r2[0x6],r12
800065d0:	80 00       	ld.sh	r0,r0[0x0]
800065d2:	a4 5c       	st.h	r2[0xa],r12

800065d4 <quorem>:
800065d4:	d4 31       	pushm	r0-r7,lr
800065d6:	20 2d       	sub	sp,8
800065d8:	18 97       	mov	r7,r12
800065da:	78 48       	ld.w	r8,r12[0x10]
800065dc:	76 46       	ld.w	r6,r11[0x10]
800065de:	0c 38       	cp.w	r8,r6
800065e0:	c0 34       	brge	800065e6 <quorem+0x12>
800065e2:	30 0c       	mov	r12,0
800065e4:	c8 58       	rjmp	800066ee <quorem+0x11a>
800065e6:	ec c2 ff fc 	sub	r2,r6,-4
800065ea:	f6 c3 ff ec 	sub	r3,r11,-20
800065ee:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800065f2:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800065f6:	2f f9       	sub	r9,-1
800065f8:	20 16       	sub	r6,1
800065fa:	f8 09 0d 08 	divu	r8,r12,r9
800065fe:	f6 02 00 22 	add	r2,r11,r2<<0x2
80006602:	ee c4 ff ec 	sub	r4,r7,-20
80006606:	10 95       	mov	r5,r8
80006608:	58 08       	cp.w	r8,0
8000660a:	c4 10       	breq	8000668c <quorem+0xb8>
8000660c:	30 09       	mov	r9,0
8000660e:	06 9a       	mov	r10,r3
80006610:	08 98       	mov	r8,r4
80006612:	12 91       	mov	r1,r9
80006614:	50 0b       	stdsp	sp[0x0],r11
80006616:	70 0e       	ld.w	lr,r8[0x0]
80006618:	b1 8e       	lsr	lr,0x10
8000661a:	50 1e       	stdsp	sp[0x4],lr
8000661c:	15 0e       	ld.w	lr,r10++
8000661e:	fc 00 16 10 	lsr	r0,lr,0x10
80006622:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80006626:	ea 0e 03 41 	mac	r1,r5,lr
8000662a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000662e:	b1 81       	lsr	r1,0x10
80006630:	40 1b       	lddsp	r11,sp[0x4]
80006632:	ea 00 02 40 	mul	r0,r5,r0
80006636:	e2 00 00 00 	add	r0,r1,r0
8000663a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000663e:	02 1b       	sub	r11,r1
80006640:	50 1b       	stdsp	sp[0x4],r11
80006642:	70 0b       	ld.w	r11,r8[0x0]
80006644:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006648:	02 09       	add	r9,r1
8000664a:	f2 0e 01 0e 	sub	lr,r9,lr
8000664e:	b0 1e       	st.h	r8[0x2],lr
80006650:	fc 09 14 10 	asr	r9,lr,0x10
80006654:	40 1e       	lddsp	lr,sp[0x4]
80006656:	fc 09 00 09 	add	r9,lr,r9
8000665a:	b0 09       	st.h	r8[0x0],r9
8000665c:	e0 01 16 10 	lsr	r1,r0,0x10
80006660:	2f c8       	sub	r8,-4
80006662:	b1 49       	asr	r9,0x10
80006664:	04 3a       	cp.w	r10,r2
80006666:	fe 98 ff d8 	brls	80006616 <quorem+0x42>
8000666a:	40 0b       	lddsp	r11,sp[0x0]
8000666c:	58 0c       	cp.w	r12,0
8000666e:	c0 f1       	brne	8000668c <quorem+0xb8>
80006670:	ec c8 ff fb 	sub	r8,r6,-5
80006674:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006678:	c0 28       	rjmp	8000667c <quorem+0xa8>
8000667a:	20 16       	sub	r6,1
8000667c:	20 48       	sub	r8,4
8000667e:	08 38       	cp.w	r8,r4
80006680:	e0 88 00 05 	brls	8000668a <quorem+0xb6>
80006684:	70 09       	ld.w	r9,r8[0x0]
80006686:	58 09       	cp.w	r9,0
80006688:	cf 90       	breq	8000667a <quorem+0xa6>
8000668a:	8f 46       	st.w	r7[0x10],r6
8000668c:	0e 9c       	mov	r12,r7
8000668e:	e0 a0 0c fc 	rcall	80008086 <__mcmp>
80006692:	c2 d5       	brlt	800066ec <quorem+0x118>
80006694:	2f f5       	sub	r5,-1
80006696:	08 98       	mov	r8,r4
80006698:	30 09       	mov	r9,0
8000669a:	07 0b       	ld.w	r11,r3++
8000669c:	f6 0a 16 10 	lsr	r10,r11,0x10
800066a0:	70 0c       	ld.w	r12,r8[0x0]
800066a2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800066a6:	f8 0e 16 10 	lsr	lr,r12,0x10
800066aa:	14 1e       	sub	lr,r10
800066ac:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800066b0:	16 1a       	sub	r10,r11
800066b2:	12 0a       	add	r10,r9
800066b4:	b0 1a       	st.h	r8[0x2],r10
800066b6:	b1 4a       	asr	r10,0x10
800066b8:	fc 0a 00 09 	add	r9,lr,r10
800066bc:	b0 09       	st.h	r8[0x0],r9
800066be:	2f c8       	sub	r8,-4
800066c0:	b1 49       	asr	r9,0x10
800066c2:	04 33       	cp.w	r3,r2
800066c4:	fe 98 ff eb 	brls	8000669a <quorem+0xc6>
800066c8:	ec c8 ff fb 	sub	r8,r6,-5
800066cc:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800066d0:	58 09       	cp.w	r9,0
800066d2:	c0 d1       	brne	800066ec <quorem+0x118>
800066d4:	ee 08 00 28 	add	r8,r7,r8<<0x2
800066d8:	c0 28       	rjmp	800066dc <quorem+0x108>
800066da:	20 16       	sub	r6,1
800066dc:	20 48       	sub	r8,4
800066de:	08 38       	cp.w	r8,r4
800066e0:	e0 88 00 05 	brls	800066ea <quorem+0x116>
800066e4:	70 09       	ld.w	r9,r8[0x0]
800066e6:	58 09       	cp.w	r9,0
800066e8:	cf 90       	breq	800066da <quorem+0x106>
800066ea:	8f 46       	st.w	r7[0x10],r6
800066ec:	0a 9c       	mov	r12,r5
800066ee:	2f ed       	sub	sp,-8
800066f0:	d8 32       	popm	r0-r7,pc
800066f2:	d7 03       	nop

800066f4 <_dtoa_r>:
800066f4:	d4 31       	pushm	r0-r7,lr
800066f6:	21 ad       	sub	sp,104
800066f8:	fa c4 ff 74 	sub	r4,sp,-140
800066fc:	18 97       	mov	r7,r12
800066fe:	16 95       	mov	r5,r11
80006700:	68 2c       	ld.w	r12,r4[0x8]
80006702:	50 c9       	stdsp	sp[0x30],r9
80006704:	68 16       	ld.w	r6,r4[0x4]
80006706:	68 09       	ld.w	r9,r4[0x0]
80006708:	50 e8       	stdsp	sp[0x38],r8
8000670a:	14 94       	mov	r4,r10
8000670c:	51 2c       	stdsp	sp[0x48],r12
8000670e:	fa e5 00 08 	st.d	sp[8],r4
80006712:	51 59       	stdsp	sp[0x54],r9
80006714:	6e 95       	ld.w	r5,r7[0x24]
80006716:	58 05       	cp.w	r5,0
80006718:	c0 91       	brne	8000672a <_dtoa_r+0x36>
8000671a:	31 0c       	mov	r12,16
8000671c:	e0 a0 09 f4 	rcall	80007b04 <malloc>
80006720:	99 35       	st.w	r12[0xc],r5
80006722:	8f 9c       	st.w	r7[0x24],r12
80006724:	99 15       	st.w	r12[0x4],r5
80006726:	99 25       	st.w	r12[0x8],r5
80006728:	99 05       	st.w	r12[0x0],r5
8000672a:	6e 99       	ld.w	r9,r7[0x24]
8000672c:	72 08       	ld.w	r8,r9[0x0]
8000672e:	58 08       	cp.w	r8,0
80006730:	c0 f0       	breq	8000674e <_dtoa_r+0x5a>
80006732:	72 1a       	ld.w	r10,r9[0x4]
80006734:	91 1a       	st.w	r8[0x4],r10
80006736:	30 1a       	mov	r10,1
80006738:	72 19       	ld.w	r9,r9[0x4]
8000673a:	f4 09 09 49 	lsl	r9,r10,r9
8000673e:	10 9b       	mov	r11,r8
80006740:	91 29       	st.w	r8[0x8],r9
80006742:	0e 9c       	mov	r12,r7
80006744:	e0 a0 0c ba 	rcall	800080b8 <_Bfree>
80006748:	6e 98       	ld.w	r8,r7[0x24]
8000674a:	30 09       	mov	r9,0
8000674c:	91 09       	st.w	r8[0x0],r9
8000674e:	40 28       	lddsp	r8,sp[0x8]
80006750:	10 94       	mov	r4,r8
80006752:	58 08       	cp.w	r8,0
80006754:	c0 64       	brge	80006760 <_dtoa_r+0x6c>
80006756:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000675a:	50 28       	stdsp	sp[0x8],r8
8000675c:	30 18       	mov	r8,1
8000675e:	c0 28       	rjmp	80006762 <_dtoa_r+0x6e>
80006760:	30 08       	mov	r8,0
80006762:	8d 08       	st.w	r6[0x0],r8
80006764:	fc 1c 7f f0 	movh	r12,0x7ff0
80006768:	40 26       	lddsp	r6,sp[0x8]
8000676a:	0c 98       	mov	r8,r6
8000676c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006770:	18 38       	cp.w	r8,r12
80006772:	c1 e1       	brne	800067ae <_dtoa_r+0xba>
80006774:	e0 68 27 0f 	mov	r8,9999
80006778:	41 5b       	lddsp	r11,sp[0x54]
8000677a:	97 08       	st.w	r11[0x0],r8
8000677c:	40 3a       	lddsp	r10,sp[0xc]
8000677e:	58 0a       	cp.w	r10,0
80006780:	c0 61       	brne	8000678c <_dtoa_r+0x98>
80006782:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80006786:	c0 31       	brne	8000678c <_dtoa_r+0x98>
80006788:	4a cc       	lddpc	r12,80006838 <_dtoa_r+0x144>
8000678a:	c0 28       	rjmp	8000678e <_dtoa_r+0x9a>
8000678c:	4a cc       	lddpc	r12,8000683c <_dtoa_r+0x148>
8000678e:	41 29       	lddsp	r9,sp[0x48]
80006790:	58 09       	cp.w	r9,0
80006792:	e0 80 05 9e 	breq	800072ce <_dtoa_r+0xbda>
80006796:	f8 c8 ff fd 	sub	r8,r12,-3
8000679a:	f8 c9 ff f8 	sub	r9,r12,-8
8000679e:	11 8b       	ld.ub	r11,r8[0x0]
800067a0:	30 0a       	mov	r10,0
800067a2:	41 25       	lddsp	r5,sp[0x48]
800067a4:	f4 0b 18 00 	cp.b	r11,r10
800067a8:	f2 08 17 10 	movne	r8,r9
800067ac:	c1 58       	rjmp	800067d6 <_dtoa_r+0xe2>
800067ae:	fa ea 00 08 	ld.d	r10,sp[8]
800067b2:	30 08       	mov	r8,0
800067b4:	fa eb 00 3c 	st.d	sp[60],r10
800067b8:	30 09       	mov	r9,0
800067ba:	e0 a0 14 f6 	rcall	800091a6 <__avr32_f64_cmp_eq>
800067be:	c0 f0       	breq	800067dc <_dtoa_r+0xe8>
800067c0:	30 18       	mov	r8,1
800067c2:	41 5a       	lddsp	r10,sp[0x54]
800067c4:	95 08       	st.w	r10[0x0],r8
800067c6:	49 fc       	lddpc	r12,80006840 <_dtoa_r+0x14c>
800067c8:	41 29       	lddsp	r9,sp[0x48]
800067ca:	f8 08 00 08 	add	r8,r12,r8
800067ce:	58 09       	cp.w	r9,0
800067d0:	e0 80 05 7f 	breq	800072ce <_dtoa_r+0xbda>
800067d4:	12 95       	mov	r5,r9
800067d6:	8b 08       	st.w	r5[0x0],r8
800067d8:	e0 8f 05 7b 	bral	800072ce <_dtoa_r+0xbda>
800067dc:	fa c8 ff 9c 	sub	r8,sp,-100
800067e0:	fa c9 ff a0 	sub	r9,sp,-96
800067e4:	fa ea 00 3c 	ld.d	r10,sp[60]
800067e8:	0e 9c       	mov	r12,r7
800067ea:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800067ee:	e0 a0 0c b7 	rcall	8000815c <__d2b>
800067f2:	18 93       	mov	r3,r12
800067f4:	58 05       	cp.w	r5,0
800067f6:	c0 d0       	breq	80006810 <_dtoa_r+0x11c>
800067f8:	fa ea 00 3c 	ld.d	r10,sp[60]
800067fc:	30 04       	mov	r4,0
800067fe:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006802:	ea c5 03 ff 	sub	r5,r5,1023
80006806:	10 9b       	mov	r11,r8
80006808:	51 74       	stdsp	sp[0x5c],r4
8000680a:	ea 1b 3f f0 	orh	r11,0x3ff0
8000680e:	c2 a8       	rjmp	80006862 <_dtoa_r+0x16e>
80006810:	41 88       	lddsp	r8,sp[0x60]
80006812:	41 9c       	lddsp	r12,sp[0x64]
80006814:	10 0c       	add	r12,r8
80006816:	f8 c5 fb ce 	sub	r5,r12,-1074
8000681a:	e0 45 00 20 	cp.w	r5,32
8000681e:	e0 8a 00 13 	brle	80006844 <_dtoa_r+0x150>
80006822:	f8 cc fb ee 	sub	r12,r12,-1042
80006826:	40 3b       	lddsp	r11,sp[0xc]
80006828:	ea 08 11 40 	rsub	r8,r5,64
8000682c:	f6 0c 0a 4c 	lsr	r12,r11,r12
80006830:	ec 08 09 46 	lsl	r6,r6,r8
80006834:	0c 4c       	or	r12,r6
80006836:	c0 c8       	rjmp	8000684e <_dtoa_r+0x15a>
80006838:	80 00       	ld.sh	r0,r0[0x0]
8000683a:	a4 0c       	st.h	r2[0x0],r12
8000683c:	80 00       	ld.sh	r0,r0[0x0]
8000683e:	a4 18       	st.h	r2[0x2],r8
80006840:	80 00       	ld.sh	r0,r0[0x0]
80006842:	a2 e8       	st.b	r1[0x6],r8
80006844:	ea 0c 11 20 	rsub	r12,r5,32
80006848:	40 3a       	lddsp	r10,sp[0xc]
8000684a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000684e:	e0 a0 14 38 	rcall	800090be <__avr32_u32_to_f64>
80006852:	fc 18 fe 10 	movh	r8,0xfe10
80006856:	30 19       	mov	r9,1
80006858:	ea c5 04 33 	sub	r5,r5,1075
8000685c:	f0 0b 00 0b 	add	r11,r8,r11
80006860:	51 79       	stdsp	sp[0x5c],r9
80006862:	30 08       	mov	r8,0
80006864:	fc 19 3f f8 	movh	r9,0x3ff8
80006868:	e0 a0 12 c0 	rcall	80008de8 <__avr32_f64_sub>
8000686c:	e0 68 43 61 	mov	r8,17249
80006870:	ea 18 63 6f 	orh	r8,0x636f
80006874:	e0 69 87 a7 	mov	r9,34727
80006878:	ea 19 3f d2 	orh	r9,0x3fd2
8000687c:	e0 a0 11 ca 	rcall	80008c10 <__avr32_f64_mul>
80006880:	e0 68 c8 b3 	mov	r8,51379
80006884:	ea 18 8b 60 	orh	r8,0x8b60
80006888:	e0 69 8a 28 	mov	r9,35368
8000688c:	ea 19 3f c6 	orh	r9,0x3fc6
80006890:	e0 a0 13 7a 	rcall	80008f84 <__avr32_f64_add>
80006894:	0a 9c       	mov	r12,r5
80006896:	14 90       	mov	r0,r10
80006898:	16 91       	mov	r1,r11
8000689a:	e0 a0 14 16 	rcall	800090c6 <__avr32_s32_to_f64>
8000689e:	e0 68 79 fb 	mov	r8,31227
800068a2:	ea 18 50 9f 	orh	r8,0x509f
800068a6:	e0 69 44 13 	mov	r9,17427
800068aa:	ea 19 3f d3 	orh	r9,0x3fd3
800068ae:	e0 a0 11 b1 	rcall	80008c10 <__avr32_f64_mul>
800068b2:	14 98       	mov	r8,r10
800068b4:	16 99       	mov	r9,r11
800068b6:	00 9a       	mov	r10,r0
800068b8:	02 9b       	mov	r11,r1
800068ba:	e0 a0 13 65 	rcall	80008f84 <__avr32_f64_add>
800068be:	14 90       	mov	r0,r10
800068c0:	16 91       	mov	r1,r11
800068c2:	e0 a0 13 eb 	rcall	80009098 <__avr32_f64_to_s32>
800068c6:	30 08       	mov	r8,0
800068c8:	18 96       	mov	r6,r12
800068ca:	30 09       	mov	r9,0
800068cc:	00 9a       	mov	r10,r0
800068ce:	02 9b       	mov	r11,r1
800068d0:	e0 a0 14 b2 	rcall	80009234 <__avr32_f64_cmp_lt>
800068d4:	c0 c0       	breq	800068ec <_dtoa_r+0x1f8>
800068d6:	0c 9c       	mov	r12,r6
800068d8:	e0 a0 13 f7 	rcall	800090c6 <__avr32_s32_to_f64>
800068dc:	14 98       	mov	r8,r10
800068de:	16 99       	mov	r9,r11
800068e0:	00 9a       	mov	r10,r0
800068e2:	02 9b       	mov	r11,r1
800068e4:	e0 a0 14 61 	rcall	800091a6 <__avr32_f64_cmp_eq>
800068e8:	f7 b6 00 01 	subeq	r6,1
800068ec:	59 66       	cp.w	r6,22
800068ee:	e0 88 00 05 	brls	800068f8 <_dtoa_r+0x204>
800068f2:	30 18       	mov	r8,1
800068f4:	51 48       	stdsp	sp[0x50],r8
800068f6:	c1 28       	rjmp	8000691a <_dtoa_r+0x226>
800068f8:	4c 08       	lddpc	r8,800069f8 <_dtoa_r+0x304>
800068fa:	fa ea 00 3c 	ld.d	r10,sp[60]
800068fe:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006902:	e0 a0 14 99 	rcall	80009234 <__avr32_f64_cmp_lt>
80006906:	f9 b4 00 00 	moveq	r4,0
8000690a:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000690e:	f7 b6 01 01 	subne	r6,1
80006912:	f9 bc 01 00 	movne	r12,0
80006916:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000691a:	41 90       	lddsp	r0,sp[0x64]
8000691c:	20 10       	sub	r0,1
8000691e:	0a 10       	sub	r0,r5
80006920:	c0 46       	brmi	80006928 <_dtoa_r+0x234>
80006922:	50 40       	stdsp	sp[0x10],r0
80006924:	30 00       	mov	r0,0
80006926:	c0 48       	rjmp	8000692e <_dtoa_r+0x23a>
80006928:	30 0b       	mov	r11,0
8000692a:	5c 30       	neg	r0
8000692c:	50 4b       	stdsp	sp[0x10],r11
8000692e:	ec 02 11 00 	rsub	r2,r6,0
80006932:	58 06       	cp.w	r6,0
80006934:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80006938:	f5 d6 e4 0a 	addge	r10,r10,r6
8000693c:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006940:	fb f6 4a 11 	st.wge	sp[0x44],r6
80006944:	f9 b2 04 00 	movge	r2,0
80006948:	e1 d6 e5 10 	sublt	r0,r0,r6
8000694c:	f9 b9 05 00 	movlt	r9,0
80006950:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80006954:	40 c8       	lddsp	r8,sp[0x30]
80006956:	58 98       	cp.w	r8,9
80006958:	e0 8b 00 20 	brhi	80006998 <_dtoa_r+0x2a4>
8000695c:	58 58       	cp.w	r8,5
8000695e:	f9 b4 0a 01 	movle	r4,1
80006962:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006966:	f7 b5 09 04 	subgt	r5,4
8000696a:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000696e:	f9 b4 09 00 	movgt	r4,0
80006972:	40 cc       	lddsp	r12,sp[0x30]
80006974:	58 3c       	cp.w	r12,3
80006976:	c2 d0       	breq	800069d0 <_dtoa_r+0x2dc>
80006978:	e0 89 00 05 	brgt	80006982 <_dtoa_r+0x28e>
8000697c:	58 2c       	cp.w	r12,2
8000697e:	c1 01       	brne	8000699e <_dtoa_r+0x2aa>
80006980:	c1 88       	rjmp	800069b0 <_dtoa_r+0x2bc>
80006982:	40 cb       	lddsp	r11,sp[0x30]
80006984:	58 4b       	cp.w	r11,4
80006986:	c0 60       	breq	80006992 <_dtoa_r+0x29e>
80006988:	58 5b       	cp.w	r11,5
8000698a:	c0 a1       	brne	8000699e <_dtoa_r+0x2aa>
8000698c:	30 1a       	mov	r10,1
8000698e:	50 da       	stdsp	sp[0x34],r10
80006990:	c2 28       	rjmp	800069d4 <_dtoa_r+0x2e0>
80006992:	30 19       	mov	r9,1
80006994:	50 d9       	stdsp	sp[0x34],r9
80006996:	c0 f8       	rjmp	800069b4 <_dtoa_r+0x2c0>
80006998:	30 08       	mov	r8,0
8000699a:	30 14       	mov	r4,1
8000699c:	50 c8       	stdsp	sp[0x30],r8
8000699e:	3f f5       	mov	r5,-1
800069a0:	30 1c       	mov	r12,1
800069a2:	30 0b       	mov	r11,0
800069a4:	50 95       	stdsp	sp[0x24],r5
800069a6:	50 dc       	stdsp	sp[0x34],r12
800069a8:	0a 91       	mov	r1,r5
800069aa:	31 28       	mov	r8,18
800069ac:	50 eb       	stdsp	sp[0x38],r11
800069ae:	c2 08       	rjmp	800069ee <_dtoa_r+0x2fa>
800069b0:	30 0a       	mov	r10,0
800069b2:	50 da       	stdsp	sp[0x34],r10
800069b4:	40 e9       	lddsp	r9,sp[0x38]
800069b6:	58 09       	cp.w	r9,0
800069b8:	e0 89 00 07 	brgt	800069c6 <_dtoa_r+0x2d2>
800069bc:	30 18       	mov	r8,1
800069be:	50 98       	stdsp	sp[0x24],r8
800069c0:	10 91       	mov	r1,r8
800069c2:	50 e8       	stdsp	sp[0x38],r8
800069c4:	c1 58       	rjmp	800069ee <_dtoa_r+0x2fa>
800069c6:	40 e5       	lddsp	r5,sp[0x38]
800069c8:	50 95       	stdsp	sp[0x24],r5
800069ca:	0a 91       	mov	r1,r5
800069cc:	0a 98       	mov	r8,r5
800069ce:	c1 08       	rjmp	800069ee <_dtoa_r+0x2fa>
800069d0:	30 0c       	mov	r12,0
800069d2:	50 dc       	stdsp	sp[0x34],r12
800069d4:	40 eb       	lddsp	r11,sp[0x38]
800069d6:	ec 0b 00 0b 	add	r11,r6,r11
800069da:	50 9b       	stdsp	sp[0x24],r11
800069dc:	16 98       	mov	r8,r11
800069de:	2f f8       	sub	r8,-1
800069e0:	58 08       	cp.w	r8,0
800069e2:	e0 89 00 05 	brgt	800069ec <_dtoa_r+0x2f8>
800069e6:	10 91       	mov	r1,r8
800069e8:	30 18       	mov	r8,1
800069ea:	c0 28       	rjmp	800069ee <_dtoa_r+0x2fa>
800069ec:	10 91       	mov	r1,r8
800069ee:	30 09       	mov	r9,0
800069f0:	6e 9a       	ld.w	r10,r7[0x24]
800069f2:	95 19       	st.w	r10[0x4],r9
800069f4:	30 49       	mov	r9,4
800069f6:	c0 78       	rjmp	80006a04 <_dtoa_r+0x310>
800069f8:	80 00       	ld.sh	r0,r0[0x0]
800069fa:	a4 c8       	st.b	r2[0x4],r8
800069fc:	6a 1a       	ld.w	r10,r5[0x4]
800069fe:	a1 79       	lsl	r9,0x1
80006a00:	2f fa       	sub	r10,-1
80006a02:	8b 1a       	st.w	r5[0x4],r10
80006a04:	6e 95       	ld.w	r5,r7[0x24]
80006a06:	f2 ca ff ec 	sub	r10,r9,-20
80006a0a:	10 3a       	cp.w	r10,r8
80006a0c:	fe 98 ff f8 	brls	800069fc <_dtoa_r+0x308>
80006a10:	6a 1b       	ld.w	r11,r5[0x4]
80006a12:	0e 9c       	mov	r12,r7
80006a14:	e0 a0 0b 6c 	rcall	800080ec <_Balloc>
80006a18:	58 e1       	cp.w	r1,14
80006a1a:	5f 88       	srls	r8
80006a1c:	8b 0c       	st.w	r5[0x0],r12
80006a1e:	f1 e4 00 04 	and	r4,r8,r4
80006a22:	6e 98       	ld.w	r8,r7[0x24]
80006a24:	70 08       	ld.w	r8,r8[0x0]
80006a26:	50 88       	stdsp	sp[0x20],r8
80006a28:	e0 80 01 82 	breq	80006d2c <_dtoa_r+0x638>
80006a2c:	58 06       	cp.w	r6,0
80006a2e:	e0 8a 00 40 	brle	80006aae <_dtoa_r+0x3ba>
80006a32:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80006a36:	4c b8       	lddpc	r8,80006b60 <_dtoa_r+0x46c>
80006a38:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006a3c:	fa e5 00 18 	st.d	sp[24],r4
80006a40:	ec 04 14 04 	asr	r4,r6,0x4
80006a44:	ed b4 00 04 	bld	r4,0x4
80006a48:	c0 30       	breq	80006a4e <_dtoa_r+0x35a>
80006a4a:	30 25       	mov	r5,2
80006a4c:	c0 f8       	rjmp	80006a6a <_dtoa_r+0x376>
80006a4e:	4c 68       	lddpc	r8,80006b64 <_dtoa_r+0x470>
80006a50:	f0 e8 00 20 	ld.d	r8,r8[32]
80006a54:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a58:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006a5c:	e0 a0 14 20 	rcall	8000929c <__avr32_f64_div>
80006a60:	30 35       	mov	r5,3
80006a62:	14 98       	mov	r8,r10
80006a64:	16 99       	mov	r9,r11
80006a66:	fa e9 00 08 	st.d	sp[8],r8
80006a6a:	4b fc       	lddpc	r12,80006b64 <_dtoa_r+0x470>
80006a6c:	50 a3       	stdsp	sp[0x28],r3
80006a6e:	0c 93       	mov	r3,r6
80006a70:	18 96       	mov	r6,r12
80006a72:	c0 f8       	rjmp	80006a90 <_dtoa_r+0x39c>
80006a74:	fa ea 00 18 	ld.d	r10,sp[24]
80006a78:	ed b4 00 00 	bld	r4,0x0
80006a7c:	c0 81       	brne	80006a8c <_dtoa_r+0x398>
80006a7e:	ec e8 00 00 	ld.d	r8,r6[0]
80006a82:	2f f5       	sub	r5,-1
80006a84:	e0 a0 10 c6 	rcall	80008c10 <__avr32_f64_mul>
80006a88:	fa eb 00 18 	st.d	sp[24],r10
80006a8c:	a1 54       	asr	r4,0x1
80006a8e:	2f 86       	sub	r6,-8
80006a90:	58 04       	cp.w	r4,0
80006a92:	cf 11       	brne	80006a74 <_dtoa_r+0x380>
80006a94:	fa e8 00 18 	ld.d	r8,sp[24]
80006a98:	fa ea 00 08 	ld.d	r10,sp[8]
80006a9c:	06 96       	mov	r6,r3
80006a9e:	e0 a0 13 ff 	rcall	8000929c <__avr32_f64_div>
80006aa2:	40 a3       	lddsp	r3,sp[0x28]
80006aa4:	14 98       	mov	r8,r10
80006aa6:	16 99       	mov	r9,r11
80006aa8:	fa e9 00 08 	st.d	sp[8],r8
80006aac:	c2 d8       	rjmp	80006b06 <_dtoa_r+0x412>
80006aae:	ec 08 11 00 	rsub	r8,r6,0
80006ab2:	c0 31       	brne	80006ab8 <_dtoa_r+0x3c4>
80006ab4:	30 25       	mov	r5,2
80006ab6:	c2 88       	rjmp	80006b06 <_dtoa_r+0x412>
80006ab8:	4a bc       	lddpc	r12,80006b64 <_dtoa_r+0x470>
80006aba:	f0 04 14 04 	asr	r4,r8,0x4
80006abe:	50 1c       	stdsp	sp[0x4],r12
80006ac0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006ac4:	4a 79       	lddpc	r9,80006b60 <_dtoa_r+0x46c>
80006ac6:	fa ea 00 3c 	ld.d	r10,sp[60]
80006aca:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006ace:	e0 a0 10 a1 	rcall	80008c10 <__avr32_f64_mul>
80006ad2:	40 1c       	lddsp	r12,sp[0x4]
80006ad4:	50 63       	stdsp	sp[0x18],r3
80006ad6:	30 25       	mov	r5,2
80006ad8:	0c 93       	mov	r3,r6
80006ada:	fa eb 00 08 	st.d	sp[8],r10
80006ade:	18 96       	mov	r6,r12
80006ae0:	c0 f8       	rjmp	80006afe <_dtoa_r+0x40a>
80006ae2:	fa ea 00 08 	ld.d	r10,sp[8]
80006ae6:	ed b4 00 00 	bld	r4,0x0
80006aea:	c0 81       	brne	80006afa <_dtoa_r+0x406>
80006aec:	ec e8 00 00 	ld.d	r8,r6[0]
80006af0:	2f f5       	sub	r5,-1
80006af2:	e0 a0 10 8f 	rcall	80008c10 <__avr32_f64_mul>
80006af6:	fa eb 00 08 	st.d	sp[8],r10
80006afa:	a1 54       	asr	r4,0x1
80006afc:	2f 86       	sub	r6,-8
80006afe:	58 04       	cp.w	r4,0
80006b00:	cf 11       	brne	80006ae2 <_dtoa_r+0x3ee>
80006b02:	06 96       	mov	r6,r3
80006b04:	40 63       	lddsp	r3,sp[0x18]
80006b06:	41 4a       	lddsp	r10,sp[0x50]
80006b08:	58 0a       	cp.w	r10,0
80006b0a:	c2 f0       	breq	80006b68 <_dtoa_r+0x474>
80006b0c:	fa e8 00 08 	ld.d	r8,sp[8]
80006b10:	58 01       	cp.w	r1,0
80006b12:	5f 94       	srgt	r4
80006b14:	fa e9 00 18 	st.d	sp[24],r8
80006b18:	30 08       	mov	r8,0
80006b1a:	fc 19 3f f0 	movh	r9,0x3ff0
80006b1e:	fa ea 00 18 	ld.d	r10,sp[24]
80006b22:	e0 a0 13 89 	rcall	80009234 <__avr32_f64_cmp_lt>
80006b26:	f9 bc 00 00 	moveq	r12,0
80006b2a:	f9 bc 01 01 	movne	r12,1
80006b2e:	e9 ec 00 0c 	and	r12,r4,r12
80006b32:	c1 b0       	breq	80006b68 <_dtoa_r+0x474>
80006b34:	40 98       	lddsp	r8,sp[0x24]
80006b36:	58 08       	cp.w	r8,0
80006b38:	e0 8a 00 f6 	brle	80006d24 <_dtoa_r+0x630>
80006b3c:	30 08       	mov	r8,0
80006b3e:	fc 19 40 24 	movh	r9,0x4024
80006b42:	ec c4 00 01 	sub	r4,r6,1
80006b46:	fa ea 00 18 	ld.d	r10,sp[24]
80006b4a:	2f f5       	sub	r5,-1
80006b4c:	50 64       	stdsp	sp[0x18],r4
80006b4e:	e0 a0 10 61 	rcall	80008c10 <__avr32_f64_mul>
80006b52:	40 94       	lddsp	r4,sp[0x24]
80006b54:	14 98       	mov	r8,r10
80006b56:	16 99       	mov	r9,r11
80006b58:	fa e9 00 08 	st.d	sp[8],r8
80006b5c:	c0 88       	rjmp	80006b6c <_dtoa_r+0x478>
80006b5e:	d7 03       	nop
80006b60:	80 00       	ld.sh	r0,r0[0x0]
80006b62:	a4 c8       	st.b	r2[0x4],r8
80006b64:	80 00       	ld.sh	r0,r0[0x0]
80006b66:	a5 90       	lsr	r0,0x5
80006b68:	50 66       	stdsp	sp[0x18],r6
80006b6a:	02 94       	mov	r4,r1
80006b6c:	0a 9c       	mov	r12,r5
80006b6e:	e0 a0 12 ac 	rcall	800090c6 <__avr32_s32_to_f64>
80006b72:	fa e8 00 08 	ld.d	r8,sp[8]
80006b76:	e0 a0 10 4d 	rcall	80008c10 <__avr32_f64_mul>
80006b7a:	30 08       	mov	r8,0
80006b7c:	fc 19 40 1c 	movh	r9,0x401c
80006b80:	e0 a0 12 02 	rcall	80008f84 <__avr32_f64_add>
80006b84:	14 98       	mov	r8,r10
80006b86:	16 99       	mov	r9,r11
80006b88:	fa e9 00 28 	st.d	sp[40],r8
80006b8c:	fc 18 fc c0 	movh	r8,0xfcc0
80006b90:	40 a5       	lddsp	r5,sp[0x28]
80006b92:	10 05       	add	r5,r8
80006b94:	50 a5       	stdsp	sp[0x28],r5
80006b96:	58 04       	cp.w	r4,0
80006b98:	c2 11       	brne	80006bda <_dtoa_r+0x4e6>
80006b9a:	fa ea 00 08 	ld.d	r10,sp[8]
80006b9e:	30 08       	mov	r8,0
80006ba0:	fc 19 40 14 	movh	r9,0x4014
80006ba4:	e0 a0 11 22 	rcall	80008de8 <__avr32_f64_sub>
80006ba8:	40 bc       	lddsp	r12,sp[0x2c]
80006baa:	fa eb 00 08 	st.d	sp[8],r10
80006bae:	14 98       	mov	r8,r10
80006bb0:	16 99       	mov	r9,r11
80006bb2:	18 9a       	mov	r10,r12
80006bb4:	0a 9b       	mov	r11,r5
80006bb6:	e0 a0 13 3f 	rcall	80009234 <__avr32_f64_cmp_lt>
80006bba:	e0 81 02 54 	brne	80007062 <_dtoa_r+0x96e>
80006bbe:	0a 98       	mov	r8,r5
80006bc0:	40 b9       	lddsp	r9,sp[0x2c]
80006bc2:	ee 18 80 00 	eorh	r8,0x8000
80006bc6:	fa ea 00 08 	ld.d	r10,sp[8]
80006bca:	10 95       	mov	r5,r8
80006bcc:	12 98       	mov	r8,r9
80006bce:	0a 99       	mov	r9,r5
80006bd0:	e0 a0 13 32 	rcall	80009234 <__avr32_f64_cmp_lt>
80006bd4:	e0 81 02 3e 	brne	80007050 <_dtoa_r+0x95c>
80006bd8:	ca 68       	rjmp	80006d24 <_dtoa_r+0x630>
80006bda:	4c e9       	lddpc	r9,80006d10 <_dtoa_r+0x61c>
80006bdc:	e8 c8 00 01 	sub	r8,r4,1
80006be0:	40 d5       	lddsp	r5,sp[0x34]
80006be2:	58 05       	cp.w	r5,0
80006be4:	c4 f0       	breq	80006c82 <_dtoa_r+0x58e>
80006be6:	30 0c       	mov	r12,0
80006be8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006bec:	51 3c       	stdsp	sp[0x4c],r12
80006bee:	30 0a       	mov	r10,0
80006bf0:	fc 1b 3f e0 	movh	r11,0x3fe0
80006bf4:	e0 a0 13 54 	rcall	8000929c <__avr32_f64_div>
80006bf8:	fa e8 00 28 	ld.d	r8,sp[40]
80006bfc:	40 85       	lddsp	r5,sp[0x20]
80006bfe:	e0 a0 10 f5 	rcall	80008de8 <__avr32_f64_sub>
80006c02:	fa eb 00 28 	st.d	sp[40],r10
80006c06:	fa ea 00 08 	ld.d	r10,sp[8]
80006c0a:	e0 a0 12 47 	rcall	80009098 <__avr32_f64_to_s32>
80006c0e:	51 6c       	stdsp	sp[0x58],r12
80006c10:	e0 a0 12 5b 	rcall	800090c6 <__avr32_s32_to_f64>
80006c14:	14 98       	mov	r8,r10
80006c16:	16 99       	mov	r9,r11
80006c18:	fa ea 00 08 	ld.d	r10,sp[8]
80006c1c:	e0 a0 10 e6 	rcall	80008de8 <__avr32_f64_sub>
80006c20:	fa eb 00 08 	st.d	sp[8],r10
80006c24:	41 68       	lddsp	r8,sp[0x58]
80006c26:	2d 08       	sub	r8,-48
80006c28:	0a c8       	st.b	r5++,r8
80006c2a:	41 39       	lddsp	r9,sp[0x4c]
80006c2c:	2f f9       	sub	r9,-1
80006c2e:	51 39       	stdsp	sp[0x4c],r9
80006c30:	fa e8 00 28 	ld.d	r8,sp[40]
80006c34:	e0 a0 13 00 	rcall	80009234 <__avr32_f64_cmp_lt>
80006c38:	e0 81 03 3a 	brne	800072ac <_dtoa_r+0xbb8>
80006c3c:	fa e8 00 08 	ld.d	r8,sp[8]
80006c40:	30 0a       	mov	r10,0
80006c42:	fc 1b 3f f0 	movh	r11,0x3ff0
80006c46:	e0 a0 10 d1 	rcall	80008de8 <__avr32_f64_sub>
80006c4a:	fa e8 00 28 	ld.d	r8,sp[40]
80006c4e:	e0 a0 12 f3 	rcall	80009234 <__avr32_f64_cmp_lt>
80006c52:	fa ea 00 28 	ld.d	r10,sp[40]
80006c56:	30 08       	mov	r8,0
80006c58:	fc 19 40 24 	movh	r9,0x4024
80006c5c:	e0 81 00 da 	brne	80006e10 <_dtoa_r+0x71c>
80006c60:	41 3c       	lddsp	r12,sp[0x4c]
80006c62:	08 3c       	cp.w	r12,r4
80006c64:	c6 04       	brge	80006d24 <_dtoa_r+0x630>
80006c66:	e0 a0 0f d5 	rcall	80008c10 <__avr32_f64_mul>
80006c6a:	30 08       	mov	r8,0
80006c6c:	fa eb 00 28 	st.d	sp[40],r10
80006c70:	fc 19 40 24 	movh	r9,0x4024
80006c74:	fa ea 00 08 	ld.d	r10,sp[8]
80006c78:	e0 a0 0f cc 	rcall	80008c10 <__avr32_f64_mul>
80006c7c:	fa eb 00 08 	st.d	sp[8],r10
80006c80:	cc 3b       	rjmp	80006c06 <_dtoa_r+0x512>
80006c82:	40 85       	lddsp	r5,sp[0x20]
80006c84:	08 05       	add	r5,r4
80006c86:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006c8a:	51 35       	stdsp	sp[0x4c],r5
80006c8c:	fa e8 00 28 	ld.d	r8,sp[40]
80006c90:	40 85       	lddsp	r5,sp[0x20]
80006c92:	e0 a0 0f bf 	rcall	80008c10 <__avr32_f64_mul>
80006c96:	fa eb 00 28 	st.d	sp[40],r10
80006c9a:	fa ea 00 08 	ld.d	r10,sp[8]
80006c9e:	e0 a0 11 fd 	rcall	80009098 <__avr32_f64_to_s32>
80006ca2:	51 6c       	stdsp	sp[0x58],r12
80006ca4:	e0 a0 12 11 	rcall	800090c6 <__avr32_s32_to_f64>
80006ca8:	14 98       	mov	r8,r10
80006caa:	16 99       	mov	r9,r11
80006cac:	fa ea 00 08 	ld.d	r10,sp[8]
80006cb0:	e0 a0 10 9c 	rcall	80008de8 <__avr32_f64_sub>
80006cb4:	fa eb 00 08 	st.d	sp[8],r10
80006cb8:	41 68       	lddsp	r8,sp[0x58]
80006cba:	2d 08       	sub	r8,-48
80006cbc:	0a c8       	st.b	r5++,r8
80006cbe:	41 3c       	lddsp	r12,sp[0x4c]
80006cc0:	18 35       	cp.w	r5,r12
80006cc2:	c2 91       	brne	80006d14 <_dtoa_r+0x620>
80006cc4:	30 08       	mov	r8,0
80006cc6:	fc 19 3f e0 	movh	r9,0x3fe0
80006cca:	fa ea 00 28 	ld.d	r10,sp[40]
80006cce:	e0 a0 11 5b 	rcall	80008f84 <__avr32_f64_add>
80006cd2:	40 85       	lddsp	r5,sp[0x20]
80006cd4:	fa e8 00 08 	ld.d	r8,sp[8]
80006cd8:	08 05       	add	r5,r4
80006cda:	e0 a0 12 ad 	rcall	80009234 <__avr32_f64_cmp_lt>
80006cde:	e0 81 00 99 	brne	80006e10 <_dtoa_r+0x71c>
80006ce2:	fa e8 00 28 	ld.d	r8,sp[40]
80006ce6:	30 0a       	mov	r10,0
80006ce8:	fc 1b 3f e0 	movh	r11,0x3fe0
80006cec:	e0 a0 10 7e 	rcall	80008de8 <__avr32_f64_sub>
80006cf0:	14 98       	mov	r8,r10
80006cf2:	16 99       	mov	r9,r11
80006cf4:	fa ea 00 08 	ld.d	r10,sp[8]
80006cf8:	e0 a0 12 9e 	rcall	80009234 <__avr32_f64_cmp_lt>
80006cfc:	c1 40       	breq	80006d24 <_dtoa_r+0x630>
80006cfe:	33 09       	mov	r9,48
80006d00:	0a 98       	mov	r8,r5
80006d02:	11 7a       	ld.ub	r10,--r8
80006d04:	f2 0a 18 00 	cp.b	r10,r9
80006d08:	e0 81 02 d2 	brne	800072ac <_dtoa_r+0xbb8>
80006d0c:	10 95       	mov	r5,r8
80006d0e:	cf 9b       	rjmp	80006d00 <_dtoa_r+0x60c>
80006d10:	80 00       	ld.sh	r0,r0[0x0]
80006d12:	a4 c8       	st.b	r2[0x4],r8
80006d14:	30 08       	mov	r8,0
80006d16:	fc 19 40 24 	movh	r9,0x4024
80006d1a:	e0 a0 0f 7b 	rcall	80008c10 <__avr32_f64_mul>
80006d1e:	fa eb 00 08 	st.d	sp[8],r10
80006d22:	cb cb       	rjmp	80006c9a <_dtoa_r+0x5a6>
80006d24:	fa ea 00 3c 	ld.d	r10,sp[60]
80006d28:	fa eb 00 08 	st.d	sp[8],r10
80006d2c:	58 e6       	cp.w	r6,14
80006d2e:	5f ab       	srle	r11
80006d30:	41 8a       	lddsp	r10,sp[0x60]
80006d32:	30 08       	mov	r8,0
80006d34:	f4 09 11 ff 	rsub	r9,r10,-1
80006d38:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006d3c:	f0 09 18 00 	cp.b	r9,r8
80006d40:	e0 80 00 81 	breq	80006e42 <_dtoa_r+0x74e>
80006d44:	40 ea       	lddsp	r10,sp[0x38]
80006d46:	58 01       	cp.w	r1,0
80006d48:	5f a9       	srle	r9
80006d4a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006d4e:	4c 9a       	lddpc	r10,80006e70 <_dtoa_r+0x77c>
80006d50:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006d54:	fa e5 00 10 	st.d	sp[16],r4
80006d58:	f0 09 18 00 	cp.b	r9,r8
80006d5c:	c1 40       	breq	80006d84 <_dtoa_r+0x690>
80006d5e:	58 01       	cp.w	r1,0
80006d60:	e0 81 01 78 	brne	80007050 <_dtoa_r+0x95c>
80006d64:	30 08       	mov	r8,0
80006d66:	fc 19 40 14 	movh	r9,0x4014
80006d6a:	08 9a       	mov	r10,r4
80006d6c:	0a 9b       	mov	r11,r5
80006d6e:	e0 a0 0f 51 	rcall	80008c10 <__avr32_f64_mul>
80006d72:	fa e8 00 08 	ld.d	r8,sp[8]
80006d76:	e0 a0 12 2b 	rcall	800091cc <__avr32_f64_cmp_ge>
80006d7a:	e0 81 01 6b 	brne	80007050 <_dtoa_r+0x95c>
80006d7e:	02 92       	mov	r2,r1
80006d80:	e0 8f 01 73 	bral	80007066 <_dtoa_r+0x972>
80006d84:	40 85       	lddsp	r5,sp[0x20]
80006d86:	30 14       	mov	r4,1
80006d88:	fa e8 00 10 	ld.d	r8,sp[16]
80006d8c:	fa ea 00 08 	ld.d	r10,sp[8]
80006d90:	e0 a0 12 86 	rcall	8000929c <__avr32_f64_div>
80006d94:	e0 a0 11 82 	rcall	80009098 <__avr32_f64_to_s32>
80006d98:	18 92       	mov	r2,r12
80006d9a:	e0 a0 11 96 	rcall	800090c6 <__avr32_s32_to_f64>
80006d9e:	fa e8 00 10 	ld.d	r8,sp[16]
80006da2:	e0 a0 0f 37 	rcall	80008c10 <__avr32_f64_mul>
80006da6:	14 98       	mov	r8,r10
80006da8:	16 99       	mov	r9,r11
80006daa:	fa ea 00 08 	ld.d	r10,sp[8]
80006dae:	e0 a0 10 1d 	rcall	80008de8 <__avr32_f64_sub>
80006db2:	fa eb 00 08 	st.d	sp[8],r10
80006db6:	e4 c8 ff d0 	sub	r8,r2,-48
80006dba:	0a c8       	st.b	r5++,r8
80006dbc:	fc 19 40 24 	movh	r9,0x4024
80006dc0:	30 08       	mov	r8,0
80006dc2:	02 34       	cp.w	r4,r1
80006dc4:	c3 31       	brne	80006e2a <_dtoa_r+0x736>
80006dc6:	fa e8 00 08 	ld.d	r8,sp[8]
80006dca:	e0 a0 10 dd 	rcall	80008f84 <__avr32_f64_add>
80006dce:	16 91       	mov	r1,r11
80006dd0:	14 90       	mov	r0,r10
80006dd2:	14 98       	mov	r8,r10
80006dd4:	02 99       	mov	r9,r1
80006dd6:	fa ea 00 10 	ld.d	r10,sp[16]
80006dda:	e0 a0 12 2d 	rcall	80009234 <__avr32_f64_cmp_lt>
80006dde:	c1 a1       	brne	80006e12 <_dtoa_r+0x71e>
80006de0:	fa e8 00 10 	ld.d	r8,sp[16]
80006de4:	00 9a       	mov	r10,r0
80006de6:	02 9b       	mov	r11,r1
80006de8:	e0 a0 11 df 	rcall	800091a6 <__avr32_f64_cmp_eq>
80006dec:	e0 80 02 5f 	breq	800072aa <_dtoa_r+0xbb6>
80006df0:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006df4:	c0 f1       	brne	80006e12 <_dtoa_r+0x71e>
80006df6:	e0 8f 02 5a 	bral	800072aa <_dtoa_r+0xbb6>
80006dfa:	40 8a       	lddsp	r10,sp[0x20]
80006dfc:	14 38       	cp.w	r8,r10
80006dfe:	c0 30       	breq	80006e04 <_dtoa_r+0x710>
80006e00:	10 95       	mov	r5,r8
80006e02:	c0 98       	rjmp	80006e14 <_dtoa_r+0x720>
80006e04:	33 08       	mov	r8,48
80006e06:	40 89       	lddsp	r9,sp[0x20]
80006e08:	2f f6       	sub	r6,-1
80006e0a:	b2 88       	st.b	r9[0x0],r8
80006e0c:	40 88       	lddsp	r8,sp[0x20]
80006e0e:	c0 88       	rjmp	80006e1e <_dtoa_r+0x72a>
80006e10:	40 66       	lddsp	r6,sp[0x18]
80006e12:	33 99       	mov	r9,57
80006e14:	0a 98       	mov	r8,r5
80006e16:	11 7a       	ld.ub	r10,--r8
80006e18:	f2 0a 18 00 	cp.b	r10,r9
80006e1c:	ce f0       	breq	80006dfa <_dtoa_r+0x706>
80006e1e:	50 66       	stdsp	sp[0x18],r6
80006e20:	11 89       	ld.ub	r9,r8[0x0]
80006e22:	2f f9       	sub	r9,-1
80006e24:	b0 89       	st.b	r8[0x0],r9
80006e26:	e0 8f 02 43 	bral	800072ac <_dtoa_r+0xbb8>
80006e2a:	e0 a0 0e f3 	rcall	80008c10 <__avr32_f64_mul>
80006e2e:	2f f4       	sub	r4,-1
80006e30:	fa eb 00 08 	st.d	sp[8],r10
80006e34:	30 08       	mov	r8,0
80006e36:	30 09       	mov	r9,0
80006e38:	e0 a0 11 b7 	rcall	800091a6 <__avr32_f64_cmp_eq>
80006e3c:	ca 60       	breq	80006d88 <_dtoa_r+0x694>
80006e3e:	e0 8f 02 36 	bral	800072aa <_dtoa_r+0xbb6>
80006e42:	40 d8       	lddsp	r8,sp[0x34]
80006e44:	58 08       	cp.w	r8,0
80006e46:	c0 51       	brne	80006e50 <_dtoa_r+0x75c>
80006e48:	04 98       	mov	r8,r2
80006e4a:	00 95       	mov	r5,r0
80006e4c:	40 d4       	lddsp	r4,sp[0x34]
80006e4e:	c3 88       	rjmp	80006ebe <_dtoa_r+0x7ca>
80006e50:	40 c5       	lddsp	r5,sp[0x30]
80006e52:	58 15       	cp.w	r5,1
80006e54:	e0 89 00 10 	brgt	80006e74 <_dtoa_r+0x780>
80006e58:	41 74       	lddsp	r4,sp[0x5c]
80006e5a:	58 04       	cp.w	r4,0
80006e5c:	c0 40       	breq	80006e64 <_dtoa_r+0x770>
80006e5e:	f4 c9 fb cd 	sub	r9,r10,-1075
80006e62:	c0 48       	rjmp	80006e6a <_dtoa_r+0x776>
80006e64:	41 99       	lddsp	r9,sp[0x64]
80006e66:	f2 09 11 36 	rsub	r9,r9,54
80006e6a:	04 98       	mov	r8,r2
80006e6c:	00 95       	mov	r5,r0
80006e6e:	c1 d8       	rjmp	80006ea8 <_dtoa_r+0x7b4>
80006e70:	80 00       	ld.sh	r0,r0[0x0]
80006e72:	a4 c8       	st.b	r2[0x4],r8
80006e74:	e2 c8 00 01 	sub	r8,r1,1
80006e78:	58 01       	cp.w	r1,0
80006e7a:	e0 05 17 40 	movge	r5,r0
80006e7e:	e2 09 17 40 	movge	r9,r1
80006e82:	e1 d1 e5 15 	sublt	r5,r0,r1
80006e86:	f9 b9 05 00 	movlt	r9,0
80006e8a:	10 32       	cp.w	r2,r8
80006e8c:	e5 d8 e4 18 	subge	r8,r2,r8
80006e90:	f1 d2 e5 18 	sublt	r8,r8,r2
80006e94:	e5 d8 e5 02 	addlt	r2,r2,r8
80006e98:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006e9c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006ea0:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006ea4:	f9 b8 05 00 	movlt	r8,0
80006ea8:	40 4b       	lddsp	r11,sp[0x10]
80006eaa:	12 0b       	add	r11,r9
80006eac:	50 08       	stdsp	sp[0x0],r8
80006eae:	50 4b       	stdsp	sp[0x10],r11
80006eb0:	12 00       	add	r0,r9
80006eb2:	30 1b       	mov	r11,1
80006eb4:	0e 9c       	mov	r12,r7
80006eb6:	e0 a0 0a cf 	rcall	80008454 <__i2b>
80006eba:	40 08       	lddsp	r8,sp[0x0]
80006ebc:	18 94       	mov	r4,r12
80006ebe:	40 4a       	lddsp	r10,sp[0x10]
80006ec0:	58 05       	cp.w	r5,0
80006ec2:	5f 99       	srgt	r9
80006ec4:	58 0a       	cp.w	r10,0
80006ec6:	5f 9a       	srgt	r10
80006ec8:	f5 e9 00 09 	and	r9,r10,r9
80006ecc:	c0 80       	breq	80006edc <_dtoa_r+0x7e8>
80006ece:	40 4c       	lddsp	r12,sp[0x10]
80006ed0:	f8 05 0d 49 	min	r9,r12,r5
80006ed4:	12 1c       	sub	r12,r9
80006ed6:	12 10       	sub	r0,r9
80006ed8:	50 4c       	stdsp	sp[0x10],r12
80006eda:	12 15       	sub	r5,r9
80006edc:	58 02       	cp.w	r2,0
80006ede:	e0 8a 00 27 	brle	80006f2c <_dtoa_r+0x838>
80006ee2:	40 db       	lddsp	r11,sp[0x34]
80006ee4:	58 0b       	cp.w	r11,0
80006ee6:	c1 d0       	breq	80006f20 <_dtoa_r+0x82c>
80006ee8:	58 08       	cp.w	r8,0
80006eea:	e0 8a 00 17 	brle	80006f18 <_dtoa_r+0x824>
80006eee:	10 9a       	mov	r10,r8
80006ef0:	50 08       	stdsp	sp[0x0],r8
80006ef2:	08 9b       	mov	r11,r4
80006ef4:	0e 9c       	mov	r12,r7
80006ef6:	e0 a0 0a f5 	rcall	800084e0 <__pow5mult>
80006efa:	06 9a       	mov	r10,r3
80006efc:	18 9b       	mov	r11,r12
80006efe:	18 94       	mov	r4,r12
80006f00:	0e 9c       	mov	r12,r7
80006f02:	e0 a0 0a 29 	rcall	80008354 <__multiply>
80006f06:	18 99       	mov	r9,r12
80006f08:	06 9b       	mov	r11,r3
80006f0a:	50 19       	stdsp	sp[0x4],r9
80006f0c:	0e 9c       	mov	r12,r7
80006f0e:	e0 a0 08 d5 	rcall	800080b8 <_Bfree>
80006f12:	40 19       	lddsp	r9,sp[0x4]
80006f14:	40 08       	lddsp	r8,sp[0x0]
80006f16:	12 93       	mov	r3,r9
80006f18:	e4 08 01 0a 	sub	r10,r2,r8
80006f1c:	c0 80       	breq	80006f2c <_dtoa_r+0x838>
80006f1e:	c0 28       	rjmp	80006f22 <_dtoa_r+0x82e>
80006f20:	04 9a       	mov	r10,r2
80006f22:	06 9b       	mov	r11,r3
80006f24:	0e 9c       	mov	r12,r7
80006f26:	e0 a0 0a dd 	rcall	800084e0 <__pow5mult>
80006f2a:	18 93       	mov	r3,r12
80006f2c:	30 1b       	mov	r11,1
80006f2e:	0e 9c       	mov	r12,r7
80006f30:	e0 a0 0a 92 	rcall	80008454 <__i2b>
80006f34:	41 1a       	lddsp	r10,sp[0x44]
80006f36:	18 92       	mov	r2,r12
80006f38:	58 0a       	cp.w	r10,0
80006f3a:	e0 8a 00 07 	brle	80006f48 <_dtoa_r+0x854>
80006f3e:	18 9b       	mov	r11,r12
80006f40:	0e 9c       	mov	r12,r7
80006f42:	e0 a0 0a cf 	rcall	800084e0 <__pow5mult>
80006f46:	18 92       	mov	r2,r12
80006f48:	40 c9       	lddsp	r9,sp[0x30]
80006f4a:	58 19       	cp.w	r9,1
80006f4c:	e0 89 00 14 	brgt	80006f74 <_dtoa_r+0x880>
80006f50:	40 38       	lddsp	r8,sp[0xc]
80006f52:	58 08       	cp.w	r8,0
80006f54:	c1 01       	brne	80006f74 <_dtoa_r+0x880>
80006f56:	40 29       	lddsp	r9,sp[0x8]
80006f58:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006f5c:	c0 c1       	brne	80006f74 <_dtoa_r+0x880>
80006f5e:	12 98       	mov	r8,r9
80006f60:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006f64:	c0 80       	breq	80006f74 <_dtoa_r+0x880>
80006f66:	40 4c       	lddsp	r12,sp[0x10]
80006f68:	30 1b       	mov	r11,1
80006f6a:	2f fc       	sub	r12,-1
80006f6c:	2f f0       	sub	r0,-1
80006f6e:	50 4c       	stdsp	sp[0x10],r12
80006f70:	50 6b       	stdsp	sp[0x18],r11
80006f72:	c0 38       	rjmp	80006f78 <_dtoa_r+0x884>
80006f74:	30 0a       	mov	r10,0
80006f76:	50 6a       	stdsp	sp[0x18],r10
80006f78:	41 19       	lddsp	r9,sp[0x44]
80006f7a:	58 09       	cp.w	r9,0
80006f7c:	c0 31       	brne	80006f82 <_dtoa_r+0x88e>
80006f7e:	30 1c       	mov	r12,1
80006f80:	c0 98       	rjmp	80006f92 <_dtoa_r+0x89e>
80006f82:	64 48       	ld.w	r8,r2[0x10]
80006f84:	2f c8       	sub	r8,-4
80006f86:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006f8a:	e0 a0 08 07 	rcall	80007f98 <__hi0bits>
80006f8e:	f8 0c 11 20 	rsub	r12,r12,32
80006f92:	40 4b       	lddsp	r11,sp[0x10]
80006f94:	f8 0b 00 08 	add	r8,r12,r11
80006f98:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006f9c:	c0 c0       	breq	80006fb4 <_dtoa_r+0x8c0>
80006f9e:	f0 08 11 20 	rsub	r8,r8,32
80006fa2:	58 48       	cp.w	r8,4
80006fa4:	e0 8a 00 06 	brle	80006fb0 <_dtoa_r+0x8bc>
80006fa8:	20 48       	sub	r8,4
80006faa:	10 0b       	add	r11,r8
80006fac:	50 4b       	stdsp	sp[0x10],r11
80006fae:	c0 78       	rjmp	80006fbc <_dtoa_r+0x8c8>
80006fb0:	58 48       	cp.w	r8,4
80006fb2:	c0 70       	breq	80006fc0 <_dtoa_r+0x8cc>
80006fb4:	40 4a       	lddsp	r10,sp[0x10]
80006fb6:	2e 48       	sub	r8,-28
80006fb8:	10 0a       	add	r10,r8
80006fba:	50 4a       	stdsp	sp[0x10],r10
80006fbc:	10 00       	add	r0,r8
80006fbe:	10 05       	add	r5,r8
80006fc0:	58 00       	cp.w	r0,0
80006fc2:	e0 8a 00 08 	brle	80006fd2 <_dtoa_r+0x8de>
80006fc6:	06 9b       	mov	r11,r3
80006fc8:	00 9a       	mov	r10,r0
80006fca:	0e 9c       	mov	r12,r7
80006fcc:	e0 a0 09 80 	rcall	800082cc <__lshift>
80006fd0:	18 93       	mov	r3,r12
80006fd2:	40 49       	lddsp	r9,sp[0x10]
80006fd4:	58 09       	cp.w	r9,0
80006fd6:	e0 8a 00 08 	brle	80006fe6 <_dtoa_r+0x8f2>
80006fda:	04 9b       	mov	r11,r2
80006fdc:	12 9a       	mov	r10,r9
80006fde:	0e 9c       	mov	r12,r7
80006fe0:	e0 a0 09 76 	rcall	800082cc <__lshift>
80006fe4:	18 92       	mov	r2,r12
80006fe6:	41 48       	lddsp	r8,sp[0x50]
80006fe8:	58 08       	cp.w	r8,0
80006fea:	c1 b0       	breq	80007020 <_dtoa_r+0x92c>
80006fec:	04 9b       	mov	r11,r2
80006fee:	06 9c       	mov	r12,r3
80006ff0:	e0 a0 08 4b 	rcall	80008086 <__mcmp>
80006ff4:	c1 64       	brge	80007020 <_dtoa_r+0x92c>
80006ff6:	06 9b       	mov	r11,r3
80006ff8:	30 09       	mov	r9,0
80006ffa:	30 aa       	mov	r10,10
80006ffc:	0e 9c       	mov	r12,r7
80006ffe:	e0 a0 0a 33 	rcall	80008464 <__multadd>
80007002:	20 16       	sub	r6,1
80007004:	18 93       	mov	r3,r12
80007006:	40 dc       	lddsp	r12,sp[0x34]
80007008:	58 0c       	cp.w	r12,0
8000700a:	c0 31       	brne	80007010 <_dtoa_r+0x91c>
8000700c:	40 91       	lddsp	r1,sp[0x24]
8000700e:	c0 98       	rjmp	80007020 <_dtoa_r+0x92c>
80007010:	08 9b       	mov	r11,r4
80007012:	40 91       	lddsp	r1,sp[0x24]
80007014:	30 09       	mov	r9,0
80007016:	30 aa       	mov	r10,10
80007018:	0e 9c       	mov	r12,r7
8000701a:	e0 a0 0a 25 	rcall	80008464 <__multadd>
8000701e:	18 94       	mov	r4,r12
80007020:	58 01       	cp.w	r1,0
80007022:	5f a9       	srle	r9
80007024:	40 cb       	lddsp	r11,sp[0x30]
80007026:	58 2b       	cp.w	r11,2
80007028:	5f 98       	srgt	r8
8000702a:	f3 e8 00 08 	and	r8,r9,r8
8000702e:	c2 50       	breq	80007078 <_dtoa_r+0x984>
80007030:	58 01       	cp.w	r1,0
80007032:	c1 11       	brne	80007054 <_dtoa_r+0x960>
80007034:	04 9b       	mov	r11,r2
80007036:	02 99       	mov	r9,r1
80007038:	30 5a       	mov	r10,5
8000703a:	0e 9c       	mov	r12,r7
8000703c:	e0 a0 0a 14 	rcall	80008464 <__multadd>
80007040:	18 92       	mov	r2,r12
80007042:	18 9b       	mov	r11,r12
80007044:	06 9c       	mov	r12,r3
80007046:	e0 a0 08 20 	rcall	80008086 <__mcmp>
8000704a:	e0 89 00 0f 	brgt	80007068 <_dtoa_r+0x974>
8000704e:	c0 38       	rjmp	80007054 <_dtoa_r+0x960>
80007050:	30 02       	mov	r2,0
80007052:	04 94       	mov	r4,r2
80007054:	40 ea       	lddsp	r10,sp[0x38]
80007056:	30 09       	mov	r9,0
80007058:	5c da       	com	r10
8000705a:	40 85       	lddsp	r5,sp[0x20]
8000705c:	50 6a       	stdsp	sp[0x18],r10
8000705e:	50 49       	stdsp	sp[0x10],r9
80007060:	c0 f9       	rjmp	8000727e <_dtoa_r+0xb8a>
80007062:	08 92       	mov	r2,r4
80007064:	40 66       	lddsp	r6,sp[0x18]
80007066:	04 94       	mov	r4,r2
80007068:	2f f6       	sub	r6,-1
8000706a:	50 66       	stdsp	sp[0x18],r6
8000706c:	33 18       	mov	r8,49
8000706e:	40 85       	lddsp	r5,sp[0x20]
80007070:	0a c8       	st.b	r5++,r8
80007072:	30 08       	mov	r8,0
80007074:	50 48       	stdsp	sp[0x10],r8
80007076:	c0 49       	rjmp	8000727e <_dtoa_r+0xb8a>
80007078:	40 dc       	lddsp	r12,sp[0x34]
8000707a:	58 0c       	cp.w	r12,0
8000707c:	e0 80 00 b5 	breq	800071e6 <_dtoa_r+0xaf2>
80007080:	58 05       	cp.w	r5,0
80007082:	e0 8a 00 08 	brle	80007092 <_dtoa_r+0x99e>
80007086:	08 9b       	mov	r11,r4
80007088:	0a 9a       	mov	r10,r5
8000708a:	0e 9c       	mov	r12,r7
8000708c:	e0 a0 09 20 	rcall	800082cc <__lshift>
80007090:	18 94       	mov	r4,r12
80007092:	40 6b       	lddsp	r11,sp[0x18]
80007094:	58 0b       	cp.w	r11,0
80007096:	c0 31       	brne	8000709c <_dtoa_r+0x9a8>
80007098:	08 9c       	mov	r12,r4
8000709a:	c1 38       	rjmp	800070c0 <_dtoa_r+0x9cc>
8000709c:	68 1b       	ld.w	r11,r4[0x4]
8000709e:	0e 9c       	mov	r12,r7
800070a0:	e0 a0 08 26 	rcall	800080ec <_Balloc>
800070a4:	68 4a       	ld.w	r10,r4[0x10]
800070a6:	18 95       	mov	r5,r12
800070a8:	e8 cb ff f4 	sub	r11,r4,-12
800070ac:	2f ea       	sub	r10,-2
800070ae:	2f 4c       	sub	r12,-12
800070b0:	a3 6a       	lsl	r10,0x2
800070b2:	fe b0 e7 37 	rcall	80003f20 <memcpy>
800070b6:	0a 9b       	mov	r11,r5
800070b8:	30 1a       	mov	r10,1
800070ba:	0e 9c       	mov	r12,r7
800070bc:	e0 a0 09 08 	rcall	800082cc <__lshift>
800070c0:	50 44       	stdsp	sp[0x10],r4
800070c2:	40 3a       	lddsp	r10,sp[0xc]
800070c4:	30 19       	mov	r9,1
800070c6:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800070ca:	18 94       	mov	r4,r12
800070cc:	50 da       	stdsp	sp[0x34],r10
800070ce:	40 85       	lddsp	r5,sp[0x20]
800070d0:	50 99       	stdsp	sp[0x24],r9
800070d2:	50 26       	stdsp	sp[0x8],r6
800070d4:	50 e1       	stdsp	sp[0x38],r1
800070d6:	04 9b       	mov	r11,r2
800070d8:	06 9c       	mov	r12,r3
800070da:	fe b0 fa 7d 	rcall	800065d4 <quorem>
800070de:	40 4b       	lddsp	r11,sp[0x10]
800070e0:	f8 c0 ff d0 	sub	r0,r12,-48
800070e4:	06 9c       	mov	r12,r3
800070e6:	e0 a0 07 d0 	rcall	80008086 <__mcmp>
800070ea:	08 9a       	mov	r10,r4
800070ec:	50 6c       	stdsp	sp[0x18],r12
800070ee:	04 9b       	mov	r11,r2
800070f0:	0e 9c       	mov	r12,r7
800070f2:	e0 a0 08 85 	rcall	800081fc <__mdiff>
800070f6:	18 91       	mov	r1,r12
800070f8:	78 38       	ld.w	r8,r12[0xc]
800070fa:	58 08       	cp.w	r8,0
800070fc:	c0 30       	breq	80007102 <_dtoa_r+0xa0e>
800070fe:	30 16       	mov	r6,1
80007100:	c0 68       	rjmp	8000710c <_dtoa_r+0xa18>
80007102:	18 9b       	mov	r11,r12
80007104:	06 9c       	mov	r12,r3
80007106:	e0 a0 07 c0 	rcall	80008086 <__mcmp>
8000710a:	18 96       	mov	r6,r12
8000710c:	0e 9c       	mov	r12,r7
8000710e:	02 9b       	mov	r11,r1
80007110:	e0 a0 07 d4 	rcall	800080b8 <_Bfree>
80007114:	40 cc       	lddsp	r12,sp[0x30]
80007116:	ed ec 10 08 	or	r8,r6,r12
8000711a:	c0 d1       	brne	80007134 <_dtoa_r+0xa40>
8000711c:	40 db       	lddsp	r11,sp[0x34]
8000711e:	58 0b       	cp.w	r11,0
80007120:	c0 a1       	brne	80007134 <_dtoa_r+0xa40>
80007122:	40 26       	lddsp	r6,sp[0x8]
80007124:	e0 40 00 39 	cp.w	r0,57
80007128:	c3 00       	breq	80007188 <_dtoa_r+0xa94>
8000712a:	40 6a       	lddsp	r10,sp[0x18]
8000712c:	58 0a       	cp.w	r10,0
8000712e:	e0 89 00 24 	brgt	80007176 <_dtoa_r+0xa82>
80007132:	c2 f8       	rjmp	80007190 <_dtoa_r+0xa9c>
80007134:	40 69       	lddsp	r9,sp[0x18]
80007136:	58 09       	cp.w	r9,0
80007138:	c0 85       	brlt	80007148 <_dtoa_r+0xa54>
8000713a:	12 98       	mov	r8,r9
8000713c:	40 cc       	lddsp	r12,sp[0x30]
8000713e:	18 48       	or	r8,r12
80007140:	c1 d1       	brne	8000717a <_dtoa_r+0xa86>
80007142:	40 db       	lddsp	r11,sp[0x34]
80007144:	58 0b       	cp.w	r11,0
80007146:	c1 a1       	brne	8000717a <_dtoa_r+0xa86>
80007148:	0c 99       	mov	r9,r6
8000714a:	40 26       	lddsp	r6,sp[0x8]
8000714c:	58 09       	cp.w	r9,0
8000714e:	e0 8a 00 21 	brle	80007190 <_dtoa_r+0xa9c>
80007152:	06 9b       	mov	r11,r3
80007154:	30 1a       	mov	r10,1
80007156:	0e 9c       	mov	r12,r7
80007158:	e0 a0 08 ba 	rcall	800082cc <__lshift>
8000715c:	04 9b       	mov	r11,r2
8000715e:	18 93       	mov	r3,r12
80007160:	e0 a0 07 93 	rcall	80008086 <__mcmp>
80007164:	e0 89 00 06 	brgt	80007170 <_dtoa_r+0xa7c>
80007168:	c1 41       	brne	80007190 <_dtoa_r+0xa9c>
8000716a:	ed b0 00 00 	bld	r0,0x0
8000716e:	c1 11       	brne	80007190 <_dtoa_r+0xa9c>
80007170:	e0 40 00 39 	cp.w	r0,57
80007174:	c0 a0       	breq	80007188 <_dtoa_r+0xa94>
80007176:	2f f0       	sub	r0,-1
80007178:	c0 c8       	rjmp	80007190 <_dtoa_r+0xa9c>
8000717a:	58 06       	cp.w	r6,0
8000717c:	e0 8a 00 0c 	brle	80007194 <_dtoa_r+0xaa0>
80007180:	40 26       	lddsp	r6,sp[0x8]
80007182:	e0 40 00 39 	cp.w	r0,57
80007186:	c0 41       	brne	8000718e <_dtoa_r+0xa9a>
80007188:	33 98       	mov	r8,57
8000718a:	0a c8       	st.b	r5++,r8
8000718c:	c6 78       	rjmp	8000725a <_dtoa_r+0xb66>
8000718e:	2f f0       	sub	r0,-1
80007190:	0a c0       	st.b	r5++,r0
80007192:	c7 58       	rjmp	8000727c <_dtoa_r+0xb88>
80007194:	0a c0       	st.b	r5++,r0
80007196:	40 9a       	lddsp	r10,sp[0x24]
80007198:	40 e9       	lddsp	r9,sp[0x38]
8000719a:	12 3a       	cp.w	r10,r9
8000719c:	c4 30       	breq	80007222 <_dtoa_r+0xb2e>
8000719e:	06 9b       	mov	r11,r3
800071a0:	30 09       	mov	r9,0
800071a2:	30 aa       	mov	r10,10
800071a4:	0e 9c       	mov	r12,r7
800071a6:	e0 a0 09 5f 	rcall	80008464 <__multadd>
800071aa:	40 48       	lddsp	r8,sp[0x10]
800071ac:	18 93       	mov	r3,r12
800071ae:	08 38       	cp.w	r8,r4
800071b0:	c0 91       	brne	800071c2 <_dtoa_r+0xace>
800071b2:	10 9b       	mov	r11,r8
800071b4:	30 09       	mov	r9,0
800071b6:	30 aa       	mov	r10,10
800071b8:	0e 9c       	mov	r12,r7
800071ba:	e0 a0 09 55 	rcall	80008464 <__multadd>
800071be:	50 4c       	stdsp	sp[0x10],r12
800071c0:	c0 e8       	rjmp	800071dc <_dtoa_r+0xae8>
800071c2:	40 4b       	lddsp	r11,sp[0x10]
800071c4:	30 09       	mov	r9,0
800071c6:	30 aa       	mov	r10,10
800071c8:	0e 9c       	mov	r12,r7
800071ca:	e0 a0 09 4d 	rcall	80008464 <__multadd>
800071ce:	08 9b       	mov	r11,r4
800071d0:	50 4c       	stdsp	sp[0x10],r12
800071d2:	30 09       	mov	r9,0
800071d4:	30 aa       	mov	r10,10
800071d6:	0e 9c       	mov	r12,r7
800071d8:	e0 a0 09 46 	rcall	80008464 <__multadd>
800071dc:	18 94       	mov	r4,r12
800071de:	40 9c       	lddsp	r12,sp[0x24]
800071e0:	2f fc       	sub	r12,-1
800071e2:	50 9c       	stdsp	sp[0x24],r12
800071e4:	c7 9b       	rjmp	800070d6 <_dtoa_r+0x9e2>
800071e6:	30 18       	mov	r8,1
800071e8:	06 90       	mov	r0,r3
800071ea:	40 85       	lddsp	r5,sp[0x20]
800071ec:	08 93       	mov	r3,r4
800071ee:	0c 94       	mov	r4,r6
800071f0:	10 96       	mov	r6,r8
800071f2:	04 9b       	mov	r11,r2
800071f4:	00 9c       	mov	r12,r0
800071f6:	fe b0 f9 ef 	rcall	800065d4 <quorem>
800071fa:	2d 0c       	sub	r12,-48
800071fc:	0a cc       	st.b	r5++,r12
800071fe:	02 36       	cp.w	r6,r1
80007200:	c0 a4       	brge	80007214 <_dtoa_r+0xb20>
80007202:	00 9b       	mov	r11,r0
80007204:	30 09       	mov	r9,0
80007206:	30 aa       	mov	r10,10
80007208:	0e 9c       	mov	r12,r7
8000720a:	2f f6       	sub	r6,-1
8000720c:	e0 a0 09 2c 	rcall	80008464 <__multadd>
80007210:	18 90       	mov	r0,r12
80007212:	cf 0b       	rjmp	800071f2 <_dtoa_r+0xafe>
80007214:	08 96       	mov	r6,r4
80007216:	30 0b       	mov	r11,0
80007218:	06 94       	mov	r4,r3
8000721a:	50 4b       	stdsp	sp[0x10],r11
8000721c:	00 93       	mov	r3,r0
8000721e:	18 90       	mov	r0,r12
80007220:	c0 28       	rjmp	80007224 <_dtoa_r+0xb30>
80007222:	40 26       	lddsp	r6,sp[0x8]
80007224:	06 9b       	mov	r11,r3
80007226:	30 1a       	mov	r10,1
80007228:	0e 9c       	mov	r12,r7
8000722a:	e0 a0 08 51 	rcall	800082cc <__lshift>
8000722e:	04 9b       	mov	r11,r2
80007230:	18 93       	mov	r3,r12
80007232:	e0 a0 07 2a 	rcall	80008086 <__mcmp>
80007236:	e0 89 00 12 	brgt	8000725a <_dtoa_r+0xb66>
8000723a:	c1 b1       	brne	80007270 <_dtoa_r+0xb7c>
8000723c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80007240:	c0 d1       	brne	8000725a <_dtoa_r+0xb66>
80007242:	c1 78       	rjmp	80007270 <_dtoa_r+0xb7c>
80007244:	40 89       	lddsp	r9,sp[0x20]
80007246:	12 38       	cp.w	r8,r9
80007248:	c0 30       	breq	8000724e <_dtoa_r+0xb5a>
8000724a:	10 95       	mov	r5,r8
8000724c:	c0 88       	rjmp	8000725c <_dtoa_r+0xb68>
8000724e:	2f f6       	sub	r6,-1
80007250:	50 66       	stdsp	sp[0x18],r6
80007252:	33 18       	mov	r8,49
80007254:	40 8c       	lddsp	r12,sp[0x20]
80007256:	b8 88       	st.b	r12[0x0],r8
80007258:	c1 38       	rjmp	8000727e <_dtoa_r+0xb8a>
8000725a:	33 9a       	mov	r10,57
8000725c:	0a 98       	mov	r8,r5
8000725e:	11 79       	ld.ub	r9,--r8
80007260:	f4 09 18 00 	cp.b	r9,r10
80007264:	cf 00       	breq	80007244 <_dtoa_r+0xb50>
80007266:	2f f9       	sub	r9,-1
80007268:	b0 89       	st.b	r8[0x0],r9
8000726a:	c0 98       	rjmp	8000727c <_dtoa_r+0xb88>
8000726c:	10 95       	mov	r5,r8
8000726e:	c0 28       	rjmp	80007272 <_dtoa_r+0xb7e>
80007270:	33 09       	mov	r9,48
80007272:	0a 98       	mov	r8,r5
80007274:	11 7a       	ld.ub	r10,--r8
80007276:	f2 0a 18 00 	cp.b	r10,r9
8000727a:	cf 90       	breq	8000726c <_dtoa_r+0xb78>
8000727c:	50 66       	stdsp	sp[0x18],r6
8000727e:	04 9b       	mov	r11,r2
80007280:	0e 9c       	mov	r12,r7
80007282:	e0 a0 07 1b 	rcall	800080b8 <_Bfree>
80007286:	58 04       	cp.w	r4,0
80007288:	c1 20       	breq	800072ac <_dtoa_r+0xbb8>
8000728a:	40 4b       	lddsp	r11,sp[0x10]
8000728c:	08 3b       	cp.w	r11,r4
8000728e:	5f 19       	srne	r9
80007290:	58 0b       	cp.w	r11,0
80007292:	5f 18       	srne	r8
80007294:	f3 e8 00 08 	and	r8,r9,r8
80007298:	c0 40       	breq	800072a0 <_dtoa_r+0xbac>
8000729a:	0e 9c       	mov	r12,r7
8000729c:	e0 a0 07 0e 	rcall	800080b8 <_Bfree>
800072a0:	08 9b       	mov	r11,r4
800072a2:	0e 9c       	mov	r12,r7
800072a4:	e0 a0 07 0a 	rcall	800080b8 <_Bfree>
800072a8:	c0 28       	rjmp	800072ac <_dtoa_r+0xbb8>
800072aa:	50 66       	stdsp	sp[0x18],r6
800072ac:	0e 9c       	mov	r12,r7
800072ae:	06 9b       	mov	r11,r3
800072b0:	e0 a0 07 04 	rcall	800080b8 <_Bfree>
800072b4:	30 08       	mov	r8,0
800072b6:	aa 88       	st.b	r5[0x0],r8
800072b8:	40 68       	lddsp	r8,sp[0x18]
800072ba:	41 5a       	lddsp	r10,sp[0x54]
800072bc:	2f f8       	sub	r8,-1
800072be:	41 29       	lddsp	r9,sp[0x48]
800072c0:	95 08       	st.w	r10[0x0],r8
800072c2:	40 8c       	lddsp	r12,sp[0x20]
800072c4:	58 09       	cp.w	r9,0
800072c6:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800072ca:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800072ce:	2e 6d       	sub	sp,-104
800072d0:	d8 32       	popm	r0-r7,pc
800072d2:	d7 03       	nop

800072d4 <_fflush_r>:
800072d4:	d4 21       	pushm	r4-r7,lr
800072d6:	16 97       	mov	r7,r11
800072d8:	18 96       	mov	r6,r12
800072da:	76 48       	ld.w	r8,r11[0x10]
800072dc:	58 08       	cp.w	r8,0
800072de:	c7 c0       	breq	800073d6 <_fflush_r+0x102>
800072e0:	58 0c       	cp.w	r12,0
800072e2:	c0 50       	breq	800072ec <_fflush_r+0x18>
800072e4:	78 68       	ld.w	r8,r12[0x18]
800072e6:	58 08       	cp.w	r8,0
800072e8:	c0 21       	brne	800072ec <_fflush_r+0x18>
800072ea:	cd 1c       	rcall	8000748c <__sinit>
800072ec:	4b b8       	lddpc	r8,800073d8 <_fflush_r+0x104>
800072ee:	10 37       	cp.w	r7,r8
800072f0:	c0 31       	brne	800072f6 <_fflush_r+0x22>
800072f2:	6c 07       	ld.w	r7,r6[0x0]
800072f4:	c0 a8       	rjmp	80007308 <_fflush_r+0x34>
800072f6:	4b a8       	lddpc	r8,800073dc <_fflush_r+0x108>
800072f8:	10 37       	cp.w	r7,r8
800072fa:	c0 31       	brne	80007300 <_fflush_r+0x2c>
800072fc:	6c 17       	ld.w	r7,r6[0x4]
800072fe:	c0 58       	rjmp	80007308 <_fflush_r+0x34>
80007300:	4b 88       	lddpc	r8,800073e0 <_fflush_r+0x10c>
80007302:	10 37       	cp.w	r7,r8
80007304:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007308:	8e 6a       	ld.sh	r10,r7[0xc]
8000730a:	14 98       	mov	r8,r10
8000730c:	ed ba 00 03 	bld	r10,0x3
80007310:	c4 20       	breq	80007394 <_fflush_r+0xc0>
80007312:	ab ba       	sbr	r10,0xb
80007314:	ae 6a       	st.h	r7[0xc],r10
80007316:	6e 18       	ld.w	r8,r7[0x4]
80007318:	58 08       	cp.w	r8,0
8000731a:	e0 89 00 06 	brgt	80007326 <_fflush_r+0x52>
8000731e:	6f 08       	ld.w	r8,r7[0x40]
80007320:	58 08       	cp.w	r8,0
80007322:	e0 8a 00 5a 	brle	800073d6 <_fflush_r+0x102>
80007326:	6e b8       	ld.w	r8,r7[0x2c]
80007328:	58 08       	cp.w	r8,0
8000732a:	c5 60       	breq	800073d6 <_fflush_r+0x102>
8000732c:	e2 1a 10 00 	andl	r10,0x1000,COH
80007330:	c0 30       	breq	80007336 <_fflush_r+0x62>
80007332:	6f 55       	ld.w	r5,r7[0x54]
80007334:	c0 f8       	rjmp	80007352 <_fflush_r+0x7e>
80007336:	30 19       	mov	r9,1
80007338:	6e 8b       	ld.w	r11,r7[0x20]
8000733a:	0c 9c       	mov	r12,r6
8000733c:	5d 18       	icall	r8
8000733e:	18 95       	mov	r5,r12
80007340:	5b fc       	cp.w	r12,-1
80007342:	c0 81       	brne	80007352 <_fflush_r+0x7e>
80007344:	6c 38       	ld.w	r8,r6[0xc]
80007346:	59 d8       	cp.w	r8,29
80007348:	c4 70       	breq	800073d6 <_fflush_r+0x102>
8000734a:	8e 68       	ld.sh	r8,r7[0xc]
8000734c:	a7 a8       	sbr	r8,0x6
8000734e:	ae 68       	st.h	r7[0xc],r8
80007350:	d8 22       	popm	r4-r7,pc
80007352:	8e 68       	ld.sh	r8,r7[0xc]
80007354:	ed b8 00 02 	bld	r8,0x2
80007358:	c0 91       	brne	8000736a <_fflush_r+0x96>
8000735a:	6e 18       	ld.w	r8,r7[0x4]
8000735c:	10 15       	sub	r5,r8
8000735e:	6e d8       	ld.w	r8,r7[0x34]
80007360:	58 08       	cp.w	r8,0
80007362:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80007366:	eb d8 e1 15 	subne	r5,r5,r8
8000736a:	6e b8       	ld.w	r8,r7[0x2c]
8000736c:	0c 9c       	mov	r12,r6
8000736e:	30 09       	mov	r9,0
80007370:	0a 9a       	mov	r10,r5
80007372:	6e 8b       	ld.w	r11,r7[0x20]
80007374:	5d 18       	icall	r8
80007376:	8e 68       	ld.sh	r8,r7[0xc]
80007378:	0a 3c       	cp.w	r12,r5
8000737a:	c2 61       	brne	800073c6 <_fflush_r+0xf2>
8000737c:	ab d8       	cbr	r8,0xb
8000737e:	30 0c       	mov	r12,0
80007380:	6e 49       	ld.w	r9,r7[0x10]
80007382:	ae 68       	st.h	r7[0xc],r8
80007384:	8f 1c       	st.w	r7[0x4],r12
80007386:	8f 09       	st.w	r7[0x0],r9
80007388:	ed b8 00 0c 	bld	r8,0xc
8000738c:	c2 51       	brne	800073d6 <_fflush_r+0x102>
8000738e:	ef 45 00 54 	st.w	r7[84],r5
80007392:	d8 22       	popm	r4-r7,pc
80007394:	6e 45       	ld.w	r5,r7[0x10]
80007396:	58 05       	cp.w	r5,0
80007398:	c1 f0       	breq	800073d6 <_fflush_r+0x102>
8000739a:	6e 04       	ld.w	r4,r7[0x0]
8000739c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800073a0:	8f 05       	st.w	r7[0x0],r5
800073a2:	f9 b8 01 00 	movne	r8,0
800073a6:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800073aa:	0a 14       	sub	r4,r5
800073ac:	8f 28       	st.w	r7[0x8],r8
800073ae:	c1 18       	rjmp	800073d0 <_fflush_r+0xfc>
800073b0:	08 99       	mov	r9,r4
800073b2:	0a 9a       	mov	r10,r5
800073b4:	6e a8       	ld.w	r8,r7[0x28]
800073b6:	6e 8b       	ld.w	r11,r7[0x20]
800073b8:	0c 9c       	mov	r12,r6
800073ba:	5d 18       	icall	r8
800073bc:	18 14       	sub	r4,r12
800073be:	58 0c       	cp.w	r12,0
800073c0:	e0 89 00 07 	brgt	800073ce <_fflush_r+0xfa>
800073c4:	8e 68       	ld.sh	r8,r7[0xc]
800073c6:	a7 a8       	sbr	r8,0x6
800073c8:	3f fc       	mov	r12,-1
800073ca:	ae 68       	st.h	r7[0xc],r8
800073cc:	d8 22       	popm	r4-r7,pc
800073ce:	18 05       	add	r5,r12
800073d0:	58 04       	cp.w	r4,0
800073d2:	fe 99 ff ef 	brgt	800073b0 <_fflush_r+0xdc>
800073d6:	d8 2a       	popm	r4-r7,pc,r12=0
800073d8:	80 00       	ld.sh	r0,r0[0x0]
800073da:	a4 1c       	st.h	r2[0x2],r12
800073dc:	80 00       	ld.sh	r0,r0[0x0]
800073de:	a4 3c       	st.h	r2[0x6],r12
800073e0:	80 00       	ld.sh	r0,r0[0x0]
800073e2:	a4 5c       	st.h	r2[0xa],r12

800073e4 <__sfp_lock_acquire>:
800073e4:	5e fc       	retal	r12

800073e6 <__sfp_lock_release>:
800073e6:	5e fc       	retal	r12

800073e8 <_cleanup_r>:
800073e8:	d4 01       	pushm	lr
800073ea:	fe cb e8 5e 	sub	r11,pc,-6050
800073ee:	e0 a0 03 03 	rcall	800079f4 <_fwalk>
800073f2:	d8 02       	popm	pc

800073f4 <__sfmoreglue>:
800073f4:	d4 21       	pushm	r4-r7,lr
800073f6:	16 95       	mov	r5,r11
800073f8:	f6 06 10 5c 	mul	r6,r11,92
800073fc:	ec cb ff f4 	sub	r11,r6,-12
80007400:	e0 a0 03 8a 	rcall	80007b14 <_malloc_r>
80007404:	18 97       	mov	r7,r12
80007406:	c0 90       	breq	80007418 <__sfmoreglue+0x24>
80007408:	99 15       	st.w	r12[0x4],r5
8000740a:	30 0b       	mov	r11,0
8000740c:	2f 4c       	sub	r12,-12
8000740e:	0c 9a       	mov	r10,r6
80007410:	8f 2c       	st.w	r7[0x8],r12
80007412:	8f 0b       	st.w	r7[0x0],r11
80007414:	fe b0 e6 2a 	rcall	80004068 <memset>
80007418:	0e 9c       	mov	r12,r7
8000741a:	d8 22       	popm	r4-r7,pc

8000741c <__sfp>:
8000741c:	d4 21       	pushm	r4-r7,lr
8000741e:	49 b8       	lddpc	r8,80007488 <__sfp+0x6c>
80007420:	18 96       	mov	r6,r12
80007422:	70 07       	ld.w	r7,r8[0x0]
80007424:	6e 68       	ld.w	r8,r7[0x18]
80007426:	58 08       	cp.w	r8,0
80007428:	c0 31       	brne	8000742e <__sfp+0x12>
8000742a:	0e 9c       	mov	r12,r7
8000742c:	c3 0c       	rcall	8000748c <__sinit>
8000742e:	ee c7 ff 28 	sub	r7,r7,-216
80007432:	30 05       	mov	r5,0
80007434:	6e 2c       	ld.w	r12,r7[0x8]
80007436:	6e 18       	ld.w	r8,r7[0x4]
80007438:	c0 68       	rjmp	80007444 <__sfp+0x28>
8000743a:	98 69       	ld.sh	r9,r12[0xc]
8000743c:	ea 09 19 00 	cp.h	r9,r5
80007440:	c1 10       	breq	80007462 <__sfp+0x46>
80007442:	2a 4c       	sub	r12,-92
80007444:	20 18       	sub	r8,1
80007446:	cf a7       	brpl	8000743a <__sfp+0x1e>
80007448:	6e 08       	ld.w	r8,r7[0x0]
8000744a:	58 08       	cp.w	r8,0
8000744c:	c0 61       	brne	80007458 <__sfp+0x3c>
8000744e:	30 4b       	mov	r11,4
80007450:	0c 9c       	mov	r12,r6
80007452:	cd 1f       	rcall	800073f4 <__sfmoreglue>
80007454:	8f 0c       	st.w	r7[0x0],r12
80007456:	c0 30       	breq	8000745c <__sfp+0x40>
80007458:	6e 07       	ld.w	r7,r7[0x0]
8000745a:	ce db       	rjmp	80007434 <__sfp+0x18>
8000745c:	30 c8       	mov	r8,12
8000745e:	8d 38       	st.w	r6[0xc],r8
80007460:	d8 22       	popm	r4-r7,pc
80007462:	30 08       	mov	r8,0
80007464:	f9 48 00 4c 	st.w	r12[76],r8
80007468:	99 08       	st.w	r12[0x0],r8
8000746a:	99 28       	st.w	r12[0x8],r8
8000746c:	99 18       	st.w	r12[0x4],r8
8000746e:	99 48       	st.w	r12[0x10],r8
80007470:	99 58       	st.w	r12[0x14],r8
80007472:	99 68       	st.w	r12[0x18],r8
80007474:	99 d8       	st.w	r12[0x34],r8
80007476:	99 e8       	st.w	r12[0x38],r8
80007478:	f9 48 00 48 	st.w	r12[72],r8
8000747c:	3f f8       	mov	r8,-1
8000747e:	b8 78       	st.h	r12[0xe],r8
80007480:	30 18       	mov	r8,1
80007482:	b8 68       	st.h	r12[0xc],r8
80007484:	d8 22       	popm	r4-r7,pc
80007486:	d7 03       	nop
80007488:	80 00       	ld.sh	r0,r0[0x0]
8000748a:	a0 34       	st.h	r0[0x6],r4

8000748c <__sinit>:
8000748c:	d4 21       	pushm	r4-r7,lr
8000748e:	18 96       	mov	r6,r12
80007490:	78 67       	ld.w	r7,r12[0x18]
80007492:	58 07       	cp.w	r7,0
80007494:	c4 91       	brne	80007526 <__sinit+0x9a>
80007496:	fe c8 00 ae 	sub	r8,pc,174
8000749a:	30 15       	mov	r5,1
8000749c:	99 a8       	st.w	r12[0x28],r8
8000749e:	f9 47 00 d8 	st.w	r12[216],r7
800074a2:	f9 47 00 dc 	st.w	r12[220],r7
800074a6:	f9 47 00 e0 	st.w	r12[224],r7
800074aa:	99 65       	st.w	r12[0x18],r5
800074ac:	cb 8f       	rcall	8000741c <__sfp>
800074ae:	8d 0c       	st.w	r6[0x0],r12
800074b0:	0c 9c       	mov	r12,r6
800074b2:	cb 5f       	rcall	8000741c <__sfp>
800074b4:	8d 1c       	st.w	r6[0x4],r12
800074b6:	0c 9c       	mov	r12,r6
800074b8:	cb 2f       	rcall	8000741c <__sfp>
800074ba:	6c 09       	ld.w	r9,r6[0x0]
800074bc:	30 48       	mov	r8,4
800074be:	93 07       	st.w	r9[0x0],r7
800074c0:	b2 68       	st.h	r9[0xc],r8
800074c2:	93 17       	st.w	r9[0x4],r7
800074c4:	93 27       	st.w	r9[0x8],r7
800074c6:	6c 18       	ld.w	r8,r6[0x4]
800074c8:	b2 77       	st.h	r9[0xe],r7
800074ca:	93 47       	st.w	r9[0x10],r7
800074cc:	93 57       	st.w	r9[0x14],r7
800074ce:	93 67       	st.w	r9[0x18],r7
800074d0:	93 89       	st.w	r9[0x20],r9
800074d2:	91 07       	st.w	r8[0x0],r7
800074d4:	91 17       	st.w	r8[0x4],r7
800074d6:	91 27       	st.w	r8[0x8],r7
800074d8:	fe ce eb e8 	sub	lr,pc,-5144
800074dc:	fe cb ec 18 	sub	r11,pc,-5096
800074e0:	93 9e       	st.w	r9[0x24],lr
800074e2:	93 ab       	st.w	r9[0x28],r11
800074e4:	fe ca ec 40 	sub	r10,pc,-5056
800074e8:	fe c4 ec 4c 	sub	r4,pc,-5044
800074ec:	93 ba       	st.w	r9[0x2c],r10
800074ee:	93 c4       	st.w	r9[0x30],r4
800074f0:	30 99       	mov	r9,9
800074f2:	b0 69       	st.h	r8[0xc],r9
800074f4:	b0 75       	st.h	r8[0xe],r5
800074f6:	91 c4       	st.w	r8[0x30],r4
800074f8:	91 47       	st.w	r8[0x10],r7
800074fa:	91 57       	st.w	r8[0x14],r7
800074fc:	91 67       	st.w	r8[0x18],r7
800074fe:	91 88       	st.w	r8[0x20],r8
80007500:	91 9e       	st.w	r8[0x24],lr
80007502:	91 ab       	st.w	r8[0x28],r11
80007504:	91 ba       	st.w	r8[0x2c],r10
80007506:	8d 2c       	st.w	r6[0x8],r12
80007508:	31 28       	mov	r8,18
8000750a:	99 07       	st.w	r12[0x0],r7
8000750c:	b8 68       	st.h	r12[0xc],r8
8000750e:	99 17       	st.w	r12[0x4],r7
80007510:	99 27       	st.w	r12[0x8],r7
80007512:	30 28       	mov	r8,2
80007514:	b8 78       	st.h	r12[0xe],r8
80007516:	99 c4       	st.w	r12[0x30],r4
80007518:	99 67       	st.w	r12[0x18],r7
8000751a:	99 9e       	st.w	r12[0x24],lr
8000751c:	99 ab       	st.w	r12[0x28],r11
8000751e:	99 ba       	st.w	r12[0x2c],r10
80007520:	99 47       	st.w	r12[0x10],r7
80007522:	99 57       	st.w	r12[0x14],r7
80007524:	99 8c       	st.w	r12[0x20],r12
80007526:	d8 22       	popm	r4-r7,pc

80007528 <_malloc_trim_r>:
80007528:	d4 21       	pushm	r4-r7,lr
8000752a:	16 95       	mov	r5,r11
8000752c:	18 97       	mov	r7,r12
8000752e:	e0 a0 05 33 	rcall	80007f94 <__malloc_lock>
80007532:	4a 24       	lddpc	r4,800075b8 <_malloc_trim_r+0x90>
80007534:	68 28       	ld.w	r8,r4[0x8]
80007536:	70 16       	ld.w	r6,r8[0x4]
80007538:	e0 16 ff fc 	andl	r6,0xfffc
8000753c:	ec c8 ff 91 	sub	r8,r6,-111
80007540:	f0 05 01 05 	sub	r5,r8,r5
80007544:	e0 15 ff 80 	andl	r5,0xff80
80007548:	ea c5 00 80 	sub	r5,r5,128
8000754c:	e0 45 00 7f 	cp.w	r5,127
80007550:	e0 8a 00 23 	brle	80007596 <_malloc_trim_r+0x6e>
80007554:	30 0b       	mov	r11,0
80007556:	0e 9c       	mov	r12,r7
80007558:	e0 a0 09 92 	rcall	8000887c <_sbrk_r>
8000755c:	68 28       	ld.w	r8,r4[0x8]
8000755e:	0c 08       	add	r8,r6
80007560:	10 3c       	cp.w	r12,r8
80007562:	c1 a1       	brne	80007596 <_malloc_trim_r+0x6e>
80007564:	ea 0b 11 00 	rsub	r11,r5,0
80007568:	0e 9c       	mov	r12,r7
8000756a:	e0 a0 09 89 	rcall	8000887c <_sbrk_r>
8000756e:	5b fc       	cp.w	r12,-1
80007570:	c1 71       	brne	8000759e <_malloc_trim_r+0x76>
80007572:	30 0b       	mov	r11,0
80007574:	0e 9c       	mov	r12,r7
80007576:	e0 a0 09 83 	rcall	8000887c <_sbrk_r>
8000757a:	68 28       	ld.w	r8,r4[0x8]
8000757c:	f8 08 01 09 	sub	r9,r12,r8
80007580:	58 f9       	cp.w	r9,15
80007582:	e0 8a 00 0a 	brle	80007596 <_malloc_trim_r+0x6e>
80007586:	a1 a9       	sbr	r9,0x0
80007588:	91 19       	st.w	r8[0x4],r9
8000758a:	48 d8       	lddpc	r8,800075bc <_malloc_trim_r+0x94>
8000758c:	70 09       	ld.w	r9,r8[0x0]
8000758e:	48 d8       	lddpc	r8,800075c0 <_malloc_trim_r+0x98>
80007590:	f8 09 01 09 	sub	r9,r12,r9
80007594:	91 09       	st.w	r8[0x0],r9
80007596:	0e 9c       	mov	r12,r7
80007598:	e0 a0 04 ff 	rcall	80007f96 <__malloc_unlock>
8000759c:	d8 2a       	popm	r4-r7,pc,r12=0
8000759e:	68 28       	ld.w	r8,r4[0x8]
800075a0:	0a 16       	sub	r6,r5
800075a2:	a1 a6       	sbr	r6,0x0
800075a4:	91 16       	st.w	r8[0x4],r6
800075a6:	48 78       	lddpc	r8,800075c0 <_malloc_trim_r+0x98>
800075a8:	70 09       	ld.w	r9,r8[0x0]
800075aa:	0a 19       	sub	r9,r5
800075ac:	0e 9c       	mov	r12,r7
800075ae:	91 09       	st.w	r8[0x0],r9
800075b0:	e0 a0 04 f3 	rcall	80007f96 <__malloc_unlock>
800075b4:	da 2a       	popm	r4-r7,pc,r12=1
800075b6:	d7 03       	nop
800075b8:	00 00       	add	r0,r0
800075ba:	01 00       	ld.w	r0,r0++
800075bc:	00 00       	add	r0,r0
800075be:	05 0c       	ld.w	r12,r2++
800075c0:	00 00       	add	r0,r0
800075c2:	06 10       	sub	r0,r3

800075c4 <_free_r>:
800075c4:	d4 21       	pushm	r4-r7,lr
800075c6:	16 96       	mov	r6,r11
800075c8:	18 97       	mov	r7,r12
800075ca:	58 0b       	cp.w	r11,0
800075cc:	e0 80 00 c2 	breq	80007750 <_free_r+0x18c>
800075d0:	e0 a0 04 e2 	rcall	80007f94 <__malloc_lock>
800075d4:	20 86       	sub	r6,8
800075d6:	4c ba       	lddpc	r10,80007700 <_free_r+0x13c>
800075d8:	6c 18       	ld.w	r8,r6[0x4]
800075da:	74 2e       	ld.w	lr,r10[0x8]
800075dc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800075e0:	a1 c8       	cbr	r8,0x0
800075e2:	ec 08 00 09 	add	r9,r6,r8
800075e6:	72 1b       	ld.w	r11,r9[0x4]
800075e8:	e0 1b ff fc 	andl	r11,0xfffc
800075ec:	1c 39       	cp.w	r9,lr
800075ee:	c1 c1       	brne	80007626 <_free_r+0x62>
800075f0:	f6 08 00 08 	add	r8,r11,r8
800075f4:	58 0c       	cp.w	r12,0
800075f6:	c0 81       	brne	80007606 <_free_r+0x42>
800075f8:	6c 09       	ld.w	r9,r6[0x0]
800075fa:	12 16       	sub	r6,r9
800075fc:	12 08       	add	r8,r9
800075fe:	6c 3b       	ld.w	r11,r6[0xc]
80007600:	6c 29       	ld.w	r9,r6[0x8]
80007602:	97 29       	st.w	r11[0x8],r9
80007604:	93 3b       	st.w	r9[0xc],r11
80007606:	10 99       	mov	r9,r8
80007608:	95 26       	st.w	r10[0x8],r6
8000760a:	a1 a9       	sbr	r9,0x0
8000760c:	8d 19       	st.w	r6[0x4],r9
8000760e:	4b e9       	lddpc	r9,80007704 <_free_r+0x140>
80007610:	72 09       	ld.w	r9,r9[0x0]
80007612:	12 38       	cp.w	r8,r9
80007614:	c0 53       	brcs	8000761e <_free_r+0x5a>
80007616:	4b d8       	lddpc	r8,80007708 <_free_r+0x144>
80007618:	0e 9c       	mov	r12,r7
8000761a:	70 0b       	ld.w	r11,r8[0x0]
8000761c:	c8 6f       	rcall	80007528 <_malloc_trim_r>
8000761e:	0e 9c       	mov	r12,r7
80007620:	e0 a0 04 bb 	rcall	80007f96 <__malloc_unlock>
80007624:	d8 22       	popm	r4-r7,pc
80007626:	93 1b       	st.w	r9[0x4],r11
80007628:	58 0c       	cp.w	r12,0
8000762a:	c0 30       	breq	80007630 <_free_r+0x6c>
8000762c:	30 0c       	mov	r12,0
8000762e:	c1 08       	rjmp	8000764e <_free_r+0x8a>
80007630:	6c 0e       	ld.w	lr,r6[0x0]
80007632:	f4 c5 ff f8 	sub	r5,r10,-8
80007636:	1c 16       	sub	r6,lr
80007638:	1c 08       	add	r8,lr
8000763a:	6c 2e       	ld.w	lr,r6[0x8]
8000763c:	0a 3e       	cp.w	lr,r5
8000763e:	f9 bc 00 01 	moveq	r12,1
80007642:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007646:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000764a:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000764e:	f2 0b 00 0e 	add	lr,r9,r11
80007652:	7c 1e       	ld.w	lr,lr[0x4]
80007654:	ed be 00 00 	bld	lr,0x0
80007658:	c1 30       	breq	8000767e <_free_r+0xba>
8000765a:	16 08       	add	r8,r11
8000765c:	58 0c       	cp.w	r12,0
8000765e:	c0 c1       	brne	80007676 <_free_r+0xb2>
80007660:	4a 8e       	lddpc	lr,80007700 <_free_r+0x13c>
80007662:	72 2b       	ld.w	r11,r9[0x8]
80007664:	2f 8e       	sub	lr,-8
80007666:	1c 3b       	cp.w	r11,lr
80007668:	c0 71       	brne	80007676 <_free_r+0xb2>
8000766a:	97 36       	st.w	r11[0xc],r6
8000766c:	97 26       	st.w	r11[0x8],r6
8000766e:	8d 2b       	st.w	r6[0x8],r11
80007670:	8d 3b       	st.w	r6[0xc],r11
80007672:	30 1c       	mov	r12,1
80007674:	c0 58       	rjmp	8000767e <_free_r+0xba>
80007676:	72 2b       	ld.w	r11,r9[0x8]
80007678:	72 39       	ld.w	r9,r9[0xc]
8000767a:	93 2b       	st.w	r9[0x8],r11
8000767c:	97 39       	st.w	r11[0xc],r9
8000767e:	10 99       	mov	r9,r8
80007680:	ec 08 09 08 	st.w	r6[r8],r8
80007684:	a1 a9       	sbr	r9,0x0
80007686:	8d 19       	st.w	r6[0x4],r9
80007688:	58 0c       	cp.w	r12,0
8000768a:	c6 01       	brne	8000774a <_free_r+0x186>
8000768c:	e0 48 01 ff 	cp.w	r8,511
80007690:	e0 8b 00 13 	brhi	800076b6 <_free_r+0xf2>
80007694:	a3 98       	lsr	r8,0x3
80007696:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000769a:	72 2b       	ld.w	r11,r9[0x8]
8000769c:	8d 39       	st.w	r6[0xc],r9
8000769e:	8d 2b       	st.w	r6[0x8],r11
800076a0:	97 36       	st.w	r11[0xc],r6
800076a2:	93 26       	st.w	r9[0x8],r6
800076a4:	a3 48       	asr	r8,0x2
800076a6:	74 19       	ld.w	r9,r10[0x4]
800076a8:	30 1b       	mov	r11,1
800076aa:	f6 08 09 48 	lsl	r8,r11,r8
800076ae:	f3 e8 10 08 	or	r8,r9,r8
800076b2:	95 18       	st.w	r10[0x4],r8
800076b4:	c4 b8       	rjmp	8000774a <_free_r+0x186>
800076b6:	f0 0b 16 09 	lsr	r11,r8,0x9
800076ba:	58 4b       	cp.w	r11,4
800076bc:	e0 8b 00 06 	brhi	800076c8 <_free_r+0x104>
800076c0:	f0 0b 16 06 	lsr	r11,r8,0x6
800076c4:	2c 8b       	sub	r11,-56
800076c6:	c2 68       	rjmp	80007712 <_free_r+0x14e>
800076c8:	59 4b       	cp.w	r11,20
800076ca:	e0 8b 00 04 	brhi	800076d2 <_free_r+0x10e>
800076ce:	2a 5b       	sub	r11,-91
800076d0:	c2 18       	rjmp	80007712 <_free_r+0x14e>
800076d2:	e0 4b 00 54 	cp.w	r11,84
800076d6:	e0 8b 00 06 	brhi	800076e2 <_free_r+0x11e>
800076da:	f0 0b 16 0c 	lsr	r11,r8,0xc
800076de:	29 2b       	sub	r11,-110
800076e0:	c1 98       	rjmp	80007712 <_free_r+0x14e>
800076e2:	e0 4b 01 54 	cp.w	r11,340
800076e6:	e0 8b 00 06 	brhi	800076f2 <_free_r+0x12e>
800076ea:	f0 0b 16 0f 	lsr	r11,r8,0xf
800076ee:	28 9b       	sub	r11,-119
800076f0:	c1 18       	rjmp	80007712 <_free_r+0x14e>
800076f2:	e0 4b 05 54 	cp.w	r11,1364
800076f6:	e0 88 00 0b 	brls	8000770c <_free_r+0x148>
800076fa:	37 eb       	mov	r11,126
800076fc:	c0 b8       	rjmp	80007712 <_free_r+0x14e>
800076fe:	d7 03       	nop
80007700:	00 00       	add	r0,r0
80007702:	01 00       	ld.w	r0,r0++
80007704:	00 00       	add	r0,r0
80007706:	05 08       	ld.w	r8,r2++
80007708:	00 00       	add	r0,r0
8000770a:	06 0c       	add	r12,r3
8000770c:	f0 0b 16 12 	lsr	r11,r8,0x12
80007710:	28 4b       	sub	r11,-124
80007712:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80007716:	78 29       	ld.w	r9,r12[0x8]
80007718:	18 39       	cp.w	r9,r12
8000771a:	c0 e1       	brne	80007736 <_free_r+0x172>
8000771c:	74 18       	ld.w	r8,r10[0x4]
8000771e:	a3 4b       	asr	r11,0x2
80007720:	30 1c       	mov	r12,1
80007722:	f8 0b 09 4b 	lsl	r11,r12,r11
80007726:	f1 eb 10 0b 	or	r11,r8,r11
8000772a:	12 98       	mov	r8,r9
8000772c:	95 1b       	st.w	r10[0x4],r11
8000772e:	c0 a8       	rjmp	80007742 <_free_r+0x17e>
80007730:	72 29       	ld.w	r9,r9[0x8]
80007732:	18 39       	cp.w	r9,r12
80007734:	c0 60       	breq	80007740 <_free_r+0x17c>
80007736:	72 1a       	ld.w	r10,r9[0x4]
80007738:	e0 1a ff fc 	andl	r10,0xfffc
8000773c:	14 38       	cp.w	r8,r10
8000773e:	cf 93       	brcs	80007730 <_free_r+0x16c>
80007740:	72 38       	ld.w	r8,r9[0xc]
80007742:	8d 38       	st.w	r6[0xc],r8
80007744:	8d 29       	st.w	r6[0x8],r9
80007746:	93 36       	st.w	r9[0xc],r6
80007748:	91 26       	st.w	r8[0x8],r6
8000774a:	0e 9c       	mov	r12,r7
8000774c:	e0 a0 04 25 	rcall	80007f96 <__malloc_unlock>
80007750:	d8 22       	popm	r4-r7,pc
80007752:	d7 03       	nop

80007754 <__sfvwrite_r>:
80007754:	d4 31       	pushm	r0-r7,lr
80007756:	20 3d       	sub	sp,12
80007758:	14 94       	mov	r4,r10
8000775a:	18 95       	mov	r5,r12
8000775c:	16 97       	mov	r7,r11
8000775e:	74 28       	ld.w	r8,r10[0x8]
80007760:	58 08       	cp.w	r8,0
80007762:	e0 80 01 45 	breq	800079ec <__sfvwrite_r+0x298>
80007766:	96 68       	ld.sh	r8,r11[0xc]
80007768:	ed b8 00 03 	bld	r8,0x3
8000776c:	c0 41       	brne	80007774 <__sfvwrite_r+0x20>
8000776e:	76 48       	ld.w	r8,r11[0x10]
80007770:	58 08       	cp.w	r8,0
80007772:	c0 c1       	brne	8000778a <__sfvwrite_r+0x36>
80007774:	0e 9b       	mov	r11,r7
80007776:	0a 9c       	mov	r12,r5
80007778:	fe b0 f6 c0 	rcall	800064f8 <__swsetup_r>
8000777c:	c0 70       	breq	8000778a <__sfvwrite_r+0x36>
8000777e:	8e 68       	ld.sh	r8,r7[0xc]
80007780:	a7 a8       	sbr	r8,0x6
80007782:	ae 68       	st.h	r7[0xc],r8
80007784:	30 98       	mov	r8,9
80007786:	8b 38       	st.w	r5[0xc],r8
80007788:	c3 09       	rjmp	800079e8 <__sfvwrite_r+0x294>
8000778a:	8e 63       	ld.sh	r3,r7[0xc]
8000778c:	68 00       	ld.w	r0,r4[0x0]
8000778e:	06 96       	mov	r6,r3
80007790:	e2 16 00 02 	andl	r6,0x2,COH
80007794:	c2 10       	breq	800077d6 <__sfvwrite_r+0x82>
80007796:	30 03       	mov	r3,0
80007798:	e0 62 04 00 	mov	r2,1024
8000779c:	06 96       	mov	r6,r3
8000779e:	c0 48       	rjmp	800077a6 <__sfvwrite_r+0x52>
800077a0:	60 03       	ld.w	r3,r0[0x0]
800077a2:	60 16       	ld.w	r6,r0[0x4]
800077a4:	2f 80       	sub	r0,-8
800077a6:	58 06       	cp.w	r6,0
800077a8:	cf c0       	breq	800077a0 <__sfvwrite_r+0x4c>
800077aa:	e0 46 04 00 	cp.w	r6,1024
800077ae:	ec 09 17 80 	movls	r9,r6
800077b2:	e4 09 17 b0 	movhi	r9,r2
800077b6:	06 9a       	mov	r10,r3
800077b8:	6e a8       	ld.w	r8,r7[0x28]
800077ba:	6e 8b       	ld.w	r11,r7[0x20]
800077bc:	0a 9c       	mov	r12,r5
800077be:	5d 18       	icall	r8
800077c0:	18 16       	sub	r6,r12
800077c2:	58 0c       	cp.w	r12,0
800077c4:	e0 8a 01 0f 	brle	800079e2 <__sfvwrite_r+0x28e>
800077c8:	68 28       	ld.w	r8,r4[0x8]
800077ca:	18 18       	sub	r8,r12
800077cc:	89 28       	st.w	r4[0x8],r8
800077ce:	e0 80 01 0f 	breq	800079ec <__sfvwrite_r+0x298>
800077d2:	18 03       	add	r3,r12
800077d4:	ce 9b       	rjmp	800077a6 <__sfvwrite_r+0x52>
800077d6:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800077da:	c0 70       	breq	800077e8 <__sfvwrite_r+0x94>
800077dc:	50 06       	stdsp	sp[0x0],r6
800077de:	0c 93       	mov	r3,r6
800077e0:	0c 91       	mov	r1,r6
800077e2:	50 15       	stdsp	sp[0x4],r5
800077e4:	08 92       	mov	r2,r4
800077e6:	c9 e8       	rjmp	80007922 <__sfvwrite_r+0x1ce>
800077e8:	06 96       	mov	r6,r3
800077ea:	08 91       	mov	r1,r4
800077ec:	c0 48       	rjmp	800077f4 <__sfvwrite_r+0xa0>
800077ee:	60 03       	ld.w	r3,r0[0x0]
800077f0:	60 16       	ld.w	r6,r0[0x4]
800077f2:	2f 80       	sub	r0,-8
800077f4:	58 06       	cp.w	r6,0
800077f6:	cf c0       	breq	800077ee <__sfvwrite_r+0x9a>
800077f8:	8e 68       	ld.sh	r8,r7[0xc]
800077fa:	6e 24       	ld.w	r4,r7[0x8]
800077fc:	10 99       	mov	r9,r8
800077fe:	e2 19 02 00 	andl	r9,0x200,COH
80007802:	c5 50       	breq	800078ac <__sfvwrite_r+0x158>
80007804:	08 36       	cp.w	r6,r4
80007806:	c4 33       	brcs	8000788c <__sfvwrite_r+0x138>
80007808:	10 99       	mov	r9,r8
8000780a:	e2 19 04 80 	andl	r9,0x480,COH
8000780e:	c3 f0       	breq	8000788c <__sfvwrite_r+0x138>
80007810:	6e 4b       	ld.w	r11,r7[0x10]
80007812:	6e 09       	ld.w	r9,r7[0x0]
80007814:	16 19       	sub	r9,r11
80007816:	50 09       	stdsp	sp[0x0],r9
80007818:	6e 59       	ld.w	r9,r7[0x14]
8000781a:	10 9c       	mov	r12,r8
8000781c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007820:	30 28       	mov	r8,2
80007822:	f4 08 0c 08 	divs	r8,r10,r8
80007826:	fa e9 00 04 	st.d	sp[4],r8
8000782a:	10 94       	mov	r4,r8
8000782c:	40 09       	lddsp	r9,sp[0x0]
8000782e:	e2 1c 04 00 	andl	r12,0x400,COH
80007832:	2f f9       	sub	r9,-1
80007834:	0c 09       	add	r9,r6
80007836:	12 38       	cp.w	r8,r9
80007838:	f2 04 17 30 	movlo	r4,r9
8000783c:	58 0c       	cp.w	r12,0
8000783e:	c1 00       	breq	8000785e <__sfvwrite_r+0x10a>
80007840:	08 9b       	mov	r11,r4
80007842:	0a 9c       	mov	r12,r5
80007844:	c6 8d       	rcall	80007b14 <_malloc_r>
80007846:	18 92       	mov	r2,r12
80007848:	c1 40       	breq	80007870 <__sfvwrite_r+0x11c>
8000784a:	40 0a       	lddsp	r10,sp[0x0]
8000784c:	6e 4b       	ld.w	r11,r7[0x10]
8000784e:	fe b0 e3 69 	rcall	80003f20 <memcpy>
80007852:	8e 68       	ld.sh	r8,r7[0xc]
80007854:	e0 18 fb 7f 	andl	r8,0xfb7f
80007858:	a7 b8       	sbr	r8,0x7
8000785a:	ae 68       	st.h	r7[0xc],r8
8000785c:	c0 d8       	rjmp	80007876 <__sfvwrite_r+0x122>
8000785e:	08 9a       	mov	r10,r4
80007860:	0a 9c       	mov	r12,r5
80007862:	e0 a0 06 87 	rcall	80008570 <_realloc_r>
80007866:	18 92       	mov	r2,r12
80007868:	c0 71       	brne	80007876 <__sfvwrite_r+0x122>
8000786a:	6e 4b       	ld.w	r11,r7[0x10]
8000786c:	0a 9c       	mov	r12,r5
8000786e:	ca be       	rcall	800075c4 <_free_r>
80007870:	30 c8       	mov	r8,12
80007872:	8b 38       	st.w	r5[0xc],r8
80007874:	cb 78       	rjmp	800079e2 <__sfvwrite_r+0x28e>
80007876:	40 0a       	lddsp	r10,sp[0x0]
80007878:	40 09       	lddsp	r9,sp[0x0]
8000787a:	e8 0a 01 0a 	sub	r10,r4,r10
8000787e:	e4 09 00 08 	add	r8,r2,r9
80007882:	8f 54       	st.w	r7[0x14],r4
80007884:	8f 2a       	st.w	r7[0x8],r10
80007886:	8f 08       	st.w	r7[0x0],r8
80007888:	8f 42       	st.w	r7[0x10],r2
8000788a:	0c 94       	mov	r4,r6
8000788c:	08 36       	cp.w	r6,r4
8000788e:	ec 04 17 30 	movlo	r4,r6
80007892:	06 9b       	mov	r11,r3
80007894:	08 9a       	mov	r10,r4
80007896:	6e 0c       	ld.w	r12,r7[0x0]
80007898:	e0 a0 03 5f 	rcall	80007f56 <memmove>
8000789c:	6e 08       	ld.w	r8,r7[0x0]
8000789e:	08 08       	add	r8,r4
800078a0:	8f 08       	st.w	r7[0x0],r8
800078a2:	6e 28       	ld.w	r8,r7[0x8]
800078a4:	08 18       	sub	r8,r4
800078a6:	0c 94       	mov	r4,r6
800078a8:	8f 28       	st.w	r7[0x8],r8
800078aa:	c3 08       	rjmp	8000790a <__sfvwrite_r+0x1b6>
800078ac:	08 36       	cp.w	r6,r4
800078ae:	5f ba       	srhi	r10
800078b0:	6e 0c       	ld.w	r12,r7[0x0]
800078b2:	6e 48       	ld.w	r8,r7[0x10]
800078b4:	10 3c       	cp.w	r12,r8
800078b6:	5f b8       	srhi	r8
800078b8:	f5 e8 00 08 	and	r8,r10,r8
800078bc:	f2 08 18 00 	cp.b	r8,r9
800078c0:	c0 e0       	breq	800078dc <__sfvwrite_r+0x188>
800078c2:	06 9b       	mov	r11,r3
800078c4:	08 9a       	mov	r10,r4
800078c6:	e0 a0 03 48 	rcall	80007f56 <memmove>
800078ca:	6e 08       	ld.w	r8,r7[0x0]
800078cc:	08 08       	add	r8,r4
800078ce:	0e 9b       	mov	r11,r7
800078d0:	8f 08       	st.w	r7[0x0],r8
800078d2:	0a 9c       	mov	r12,r5
800078d4:	fe b0 fd 00 	rcall	800072d4 <_fflush_r>
800078d8:	c1 90       	breq	8000790a <__sfvwrite_r+0x1b6>
800078da:	c8 48       	rjmp	800079e2 <__sfvwrite_r+0x28e>
800078dc:	6e 59       	ld.w	r9,r7[0x14]
800078de:	12 36       	cp.w	r6,r9
800078e0:	c0 a3       	brcs	800078f4 <__sfvwrite_r+0x1a0>
800078e2:	6e a8       	ld.w	r8,r7[0x28]
800078e4:	06 9a       	mov	r10,r3
800078e6:	6e 8b       	ld.w	r11,r7[0x20]
800078e8:	0a 9c       	mov	r12,r5
800078ea:	5d 18       	icall	r8
800078ec:	18 94       	mov	r4,r12
800078ee:	e0 89 00 0e 	brgt	8000790a <__sfvwrite_r+0x1b6>
800078f2:	c7 88       	rjmp	800079e2 <__sfvwrite_r+0x28e>
800078f4:	0c 9a       	mov	r10,r6
800078f6:	06 9b       	mov	r11,r3
800078f8:	e0 a0 03 2f 	rcall	80007f56 <memmove>
800078fc:	6e 08       	ld.w	r8,r7[0x0]
800078fe:	0c 08       	add	r8,r6
80007900:	0c 94       	mov	r4,r6
80007902:	8f 08       	st.w	r7[0x0],r8
80007904:	6e 28       	ld.w	r8,r7[0x8]
80007906:	0c 18       	sub	r8,r6
80007908:	8f 28       	st.w	r7[0x8],r8
8000790a:	62 28       	ld.w	r8,r1[0x8]
8000790c:	08 18       	sub	r8,r4
8000790e:	83 28       	st.w	r1[0x8],r8
80007910:	c6 e0       	breq	800079ec <__sfvwrite_r+0x298>
80007912:	08 16       	sub	r6,r4
80007914:	08 03       	add	r3,r4
80007916:	c6 fb       	rjmp	800077f4 <__sfvwrite_r+0xa0>
80007918:	60 03       	ld.w	r3,r0[0x0]
8000791a:	60 11       	ld.w	r1,r0[0x4]
8000791c:	30 08       	mov	r8,0
8000791e:	2f 80       	sub	r0,-8
80007920:	50 08       	stdsp	sp[0x0],r8
80007922:	58 01       	cp.w	r1,0
80007924:	cf a0       	breq	80007918 <__sfvwrite_r+0x1c4>
80007926:	40 0a       	lddsp	r10,sp[0x0]
80007928:	58 0a       	cp.w	r10,0
8000792a:	c1 51       	brne	80007954 <__sfvwrite_r+0x200>
8000792c:	e2 c6 ff ff 	sub	r6,r1,-1
80007930:	02 9a       	mov	r10,r1
80007932:	30 ab       	mov	r11,10
80007934:	06 9c       	mov	r12,r3
80007936:	e0 a0 03 05 	rcall	80007f40 <memchr>
8000793a:	f8 c8 ff ff 	sub	r8,r12,-1
8000793e:	58 0c       	cp.w	r12,0
80007940:	f1 d3 e1 16 	subne	r6,r8,r3
80007944:	f9 b9 01 01 	movne	r9,1
80007948:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000794c:	f9 b8 00 01 	moveq	r8,1
80007950:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007954:	02 36       	cp.w	r6,r1
80007956:	ec 04 17 80 	movls	r4,r6
8000795a:	e2 04 17 b0 	movhi	r4,r1
8000795e:	6e 59       	ld.w	r9,r7[0x14]
80007960:	6e 25       	ld.w	r5,r7[0x8]
80007962:	f2 05 00 05 	add	r5,r9,r5
80007966:	0a 34       	cp.w	r4,r5
80007968:	5f 9a       	srgt	r10
8000796a:	6e 0c       	ld.w	r12,r7[0x0]
8000796c:	6e 48       	ld.w	r8,r7[0x10]
8000796e:	10 3c       	cp.w	r12,r8
80007970:	5f b8       	srhi	r8
80007972:	f5 e8 00 08 	and	r8,r10,r8
80007976:	30 0a       	mov	r10,0
80007978:	f4 08 18 00 	cp.b	r8,r10
8000797c:	c0 e0       	breq	80007998 <__sfvwrite_r+0x244>
8000797e:	06 9b       	mov	r11,r3
80007980:	0a 9a       	mov	r10,r5
80007982:	e0 a0 02 ea 	rcall	80007f56 <memmove>
80007986:	6e 08       	ld.w	r8,r7[0x0]
80007988:	0a 08       	add	r8,r5
8000798a:	0e 9b       	mov	r11,r7
8000798c:	8f 08       	st.w	r7[0x0],r8
8000798e:	40 1c       	lddsp	r12,sp[0x4]
80007990:	fe b0 fc a2 	rcall	800072d4 <_fflush_r>
80007994:	c1 80       	breq	800079c4 <__sfvwrite_r+0x270>
80007996:	c2 68       	rjmp	800079e2 <__sfvwrite_r+0x28e>
80007998:	12 34       	cp.w	r4,r9
8000799a:	c0 a5       	brlt	800079ae <__sfvwrite_r+0x25a>
8000799c:	6e a8       	ld.w	r8,r7[0x28]
8000799e:	06 9a       	mov	r10,r3
800079a0:	6e 8b       	ld.w	r11,r7[0x20]
800079a2:	40 1c       	lddsp	r12,sp[0x4]
800079a4:	5d 18       	icall	r8
800079a6:	18 95       	mov	r5,r12
800079a8:	e0 89 00 0e 	brgt	800079c4 <__sfvwrite_r+0x270>
800079ac:	c1 b8       	rjmp	800079e2 <__sfvwrite_r+0x28e>
800079ae:	08 9a       	mov	r10,r4
800079b0:	06 9b       	mov	r11,r3
800079b2:	e0 a0 02 d2 	rcall	80007f56 <memmove>
800079b6:	6e 08       	ld.w	r8,r7[0x0]
800079b8:	08 08       	add	r8,r4
800079ba:	08 95       	mov	r5,r4
800079bc:	8f 08       	st.w	r7[0x0],r8
800079be:	6e 28       	ld.w	r8,r7[0x8]
800079c0:	08 18       	sub	r8,r4
800079c2:	8f 28       	st.w	r7[0x8],r8
800079c4:	0a 16       	sub	r6,r5
800079c6:	c0 71       	brne	800079d4 <__sfvwrite_r+0x280>
800079c8:	0e 9b       	mov	r11,r7
800079ca:	40 1c       	lddsp	r12,sp[0x4]
800079cc:	fe b0 fc 84 	rcall	800072d4 <_fflush_r>
800079d0:	c0 91       	brne	800079e2 <__sfvwrite_r+0x28e>
800079d2:	50 06       	stdsp	sp[0x0],r6
800079d4:	64 28       	ld.w	r8,r2[0x8]
800079d6:	0a 18       	sub	r8,r5
800079d8:	85 28       	st.w	r2[0x8],r8
800079da:	c0 90       	breq	800079ec <__sfvwrite_r+0x298>
800079dc:	0a 11       	sub	r1,r5
800079de:	0a 03       	add	r3,r5
800079e0:	ca 1b       	rjmp	80007922 <__sfvwrite_r+0x1ce>
800079e2:	8e 68       	ld.sh	r8,r7[0xc]
800079e4:	a7 a8       	sbr	r8,0x6
800079e6:	ae 68       	st.h	r7[0xc],r8
800079e8:	3f fc       	mov	r12,-1
800079ea:	c0 28       	rjmp	800079ee <__sfvwrite_r+0x29a>
800079ec:	30 0c       	mov	r12,0
800079ee:	2f dd       	sub	sp,-12
800079f0:	d8 32       	popm	r0-r7,pc
800079f2:	d7 03       	nop

800079f4 <_fwalk>:
800079f4:	d4 31       	pushm	r0-r7,lr
800079f6:	30 05       	mov	r5,0
800079f8:	16 91       	mov	r1,r11
800079fa:	f8 c7 ff 28 	sub	r7,r12,-216
800079fe:	0a 92       	mov	r2,r5
80007a00:	fe b0 fc f2 	rcall	800073e4 <__sfp_lock_acquire>
80007a04:	3f f3       	mov	r3,-1
80007a06:	c1 68       	rjmp	80007a32 <_fwalk+0x3e>
80007a08:	6e 26       	ld.w	r6,r7[0x8]
80007a0a:	6e 14       	ld.w	r4,r7[0x4]
80007a0c:	2f 46       	sub	r6,-12
80007a0e:	c0 c8       	rjmp	80007a26 <_fwalk+0x32>
80007a10:	8c 08       	ld.sh	r8,r6[0x0]
80007a12:	e4 08 19 00 	cp.h	r8,r2
80007a16:	c0 70       	breq	80007a24 <_fwalk+0x30>
80007a18:	8c 18       	ld.sh	r8,r6[0x2]
80007a1a:	e6 08 19 00 	cp.h	r8,r3
80007a1e:	c0 30       	breq	80007a24 <_fwalk+0x30>
80007a20:	5d 11       	icall	r1
80007a22:	18 45       	or	r5,r12
80007a24:	2a 46       	sub	r6,-92
80007a26:	20 14       	sub	r4,1
80007a28:	ec cc 00 0c 	sub	r12,r6,12
80007a2c:	58 04       	cp.w	r4,0
80007a2e:	cf 14       	brge	80007a10 <_fwalk+0x1c>
80007a30:	6e 07       	ld.w	r7,r7[0x0]
80007a32:	58 07       	cp.w	r7,0
80007a34:	ce a1       	brne	80007a08 <_fwalk+0x14>
80007a36:	fe b0 fc d8 	rcall	800073e6 <__sfp_lock_release>
80007a3a:	0a 9c       	mov	r12,r5
80007a3c:	d8 32       	popm	r0-r7,pc
80007a3e:	d7 03       	nop

80007a40 <_localeconv_r>:
80007a40:	48 1c       	lddpc	r12,80007a44 <_localeconv_r+0x4>
80007a42:	5e fc       	retal	r12
80007a44:	80 00       	ld.sh	r0,r0[0x0]
80007a46:	a4 7c       	st.h	r2[0xe],r12

80007a48 <__smakebuf_r>:
80007a48:	d4 21       	pushm	r4-r7,lr
80007a4a:	20 fd       	sub	sp,60
80007a4c:	96 68       	ld.sh	r8,r11[0xc]
80007a4e:	16 97       	mov	r7,r11
80007a50:	18 96       	mov	r6,r12
80007a52:	e2 18 00 02 	andl	r8,0x2,COH
80007a56:	c3 c1       	brne	80007ace <__smakebuf_r+0x86>
80007a58:	96 7b       	ld.sh	r11,r11[0xe]
80007a5a:	f0 0b 19 00 	cp.h	r11,r8
80007a5e:	c0 55       	brlt	80007a68 <__smakebuf_r+0x20>
80007a60:	1a 9a       	mov	r10,sp
80007a62:	e0 a0 08 9d 	rcall	80008b9c <_fstat_r>
80007a66:	c0 f4       	brge	80007a84 <__smakebuf_r+0x3c>
80007a68:	8e 65       	ld.sh	r5,r7[0xc]
80007a6a:	0a 98       	mov	r8,r5
80007a6c:	ab b8       	sbr	r8,0xb
80007a6e:	e2 15 00 80 	andl	r5,0x80,COH
80007a72:	ae 68       	st.h	r7[0xc],r8
80007a74:	30 04       	mov	r4,0
80007a76:	e0 68 04 00 	mov	r8,1024
80007a7a:	f9 b5 01 40 	movne	r5,64
80007a7e:	f0 05 17 00 	moveq	r5,r8
80007a82:	c1 c8       	rjmp	80007aba <__smakebuf_r+0x72>
80007a84:	40 18       	lddsp	r8,sp[0x4]
80007a86:	e2 18 f0 00 	andl	r8,0xf000,COH
80007a8a:	e0 48 20 00 	cp.w	r8,8192
80007a8e:	5f 04       	sreq	r4
80007a90:	e0 48 80 00 	cp.w	r8,32768
80007a94:	c0 e1       	brne	80007ab0 <__smakebuf_r+0x68>
80007a96:	6e b9       	ld.w	r9,r7[0x2c]
80007a98:	fe c8 f1 f4 	sub	r8,pc,-3596
80007a9c:	10 39       	cp.w	r9,r8
80007a9e:	c0 91       	brne	80007ab0 <__smakebuf_r+0x68>
80007aa0:	8e 68       	ld.sh	r8,r7[0xc]
80007aa2:	e0 65 04 00 	mov	r5,1024
80007aa6:	ab a8       	sbr	r8,0xa
80007aa8:	ef 45 00 50 	st.w	r7[80],r5
80007aac:	ae 68       	st.h	r7[0xc],r8
80007aae:	c0 68       	rjmp	80007aba <__smakebuf_r+0x72>
80007ab0:	8e 68       	ld.sh	r8,r7[0xc]
80007ab2:	e0 65 04 00 	mov	r5,1024
80007ab6:	ab b8       	sbr	r8,0xb
80007ab8:	ae 68       	st.h	r7[0xc],r8
80007aba:	0a 9b       	mov	r11,r5
80007abc:	0c 9c       	mov	r12,r6
80007abe:	c2 bc       	rcall	80007b14 <_malloc_r>
80007ac0:	8e 68       	ld.sh	r8,r7[0xc]
80007ac2:	c0 d1       	brne	80007adc <__smakebuf_r+0x94>
80007ac4:	ed b8 00 09 	bld	r8,0x9
80007ac8:	c1 b0       	breq	80007afe <__smakebuf_r+0xb6>
80007aca:	a1 b8       	sbr	r8,0x1
80007acc:	ae 68       	st.h	r7[0xc],r8
80007ace:	ee c8 ff b9 	sub	r8,r7,-71
80007ad2:	8f 48       	st.w	r7[0x10],r8
80007ad4:	8f 08       	st.w	r7[0x0],r8
80007ad6:	30 18       	mov	r8,1
80007ad8:	8f 58       	st.w	r7[0x14],r8
80007ada:	c1 28       	rjmp	80007afe <__smakebuf_r+0xb6>
80007adc:	a7 b8       	sbr	r8,0x7
80007ade:	8f 4c       	st.w	r7[0x10],r12
80007ae0:	ae 68       	st.h	r7[0xc],r8
80007ae2:	8f 55       	st.w	r7[0x14],r5
80007ae4:	fe c8 06 fc 	sub	r8,pc,1788
80007ae8:	8f 0c       	st.w	r7[0x0],r12
80007aea:	8d a8       	st.w	r6[0x28],r8
80007aec:	58 04       	cp.w	r4,0
80007aee:	c0 80       	breq	80007afe <__smakebuf_r+0xb6>
80007af0:	8e 7c       	ld.sh	r12,r7[0xe]
80007af2:	e0 a0 07 3d 	rcall	8000896c <isatty>
80007af6:	c0 40       	breq	80007afe <__smakebuf_r+0xb6>
80007af8:	8e 68       	ld.sh	r8,r7[0xc]
80007afa:	a1 a8       	sbr	r8,0x0
80007afc:	ae 68       	st.h	r7[0xc],r8
80007afe:	2f 1d       	sub	sp,-60
80007b00:	d8 22       	popm	r4-r7,pc
80007b02:	d7 03       	nop

80007b04 <malloc>:
80007b04:	d4 01       	pushm	lr
80007b06:	48 38       	lddpc	r8,80007b10 <malloc+0xc>
80007b08:	18 9b       	mov	r11,r12
80007b0a:	70 0c       	ld.w	r12,r8[0x0]
80007b0c:	c0 4c       	rcall	80007b14 <_malloc_r>
80007b0e:	d8 02       	popm	pc
80007b10:	00 00       	add	r0,r0
80007b12:	00 fc       	st.b	--r0,r12

80007b14 <_malloc_r>:
80007b14:	d4 31       	pushm	r0-r7,lr
80007b16:	f6 c8 ff f5 	sub	r8,r11,-11
80007b1a:	18 95       	mov	r5,r12
80007b1c:	10 97       	mov	r7,r8
80007b1e:	e0 17 ff f8 	andl	r7,0xfff8
80007b22:	59 68       	cp.w	r8,22
80007b24:	f9 b7 08 10 	movls	r7,16
80007b28:	16 37       	cp.w	r7,r11
80007b2a:	5f 38       	srlo	r8
80007b2c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007b30:	c0 50       	breq	80007b3a <_malloc_r+0x26>
80007b32:	30 c8       	mov	r8,12
80007b34:	99 38       	st.w	r12[0xc],r8
80007b36:	e0 8f 01 ec 	bral	80007f0e <_malloc_r+0x3fa>
80007b3a:	e0 a0 02 2d 	rcall	80007f94 <__malloc_lock>
80007b3e:	e0 47 01 f7 	cp.w	r7,503
80007b42:	e0 8b 00 1c 	brhi	80007b7a <_malloc_r+0x66>
80007b46:	ee 03 16 03 	lsr	r3,r7,0x3
80007b4a:	4c c8       	lddpc	r8,80007c78 <_malloc_r+0x164>
80007b4c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007b50:	70 36       	ld.w	r6,r8[0xc]
80007b52:	10 36       	cp.w	r6,r8
80007b54:	c0 61       	brne	80007b60 <_malloc_r+0x4c>
80007b56:	ec c8 ff f8 	sub	r8,r6,-8
80007b5a:	70 36       	ld.w	r6,r8[0xc]
80007b5c:	10 36       	cp.w	r6,r8
80007b5e:	c0 c0       	breq	80007b76 <_malloc_r+0x62>
80007b60:	6c 18       	ld.w	r8,r6[0x4]
80007b62:	e0 18 ff fc 	andl	r8,0xfffc
80007b66:	6c 3a       	ld.w	r10,r6[0xc]
80007b68:	ec 08 00 09 	add	r9,r6,r8
80007b6c:	0a 9c       	mov	r12,r5
80007b6e:	6c 28       	ld.w	r8,r6[0x8]
80007b70:	95 28       	st.w	r10[0x8],r8
80007b72:	91 3a       	st.w	r8[0xc],r10
80007b74:	c4 68       	rjmp	80007c00 <_malloc_r+0xec>
80007b76:	2f e3       	sub	r3,-2
80007b78:	c4 c8       	rjmp	80007c10 <_malloc_r+0xfc>
80007b7a:	ee 03 16 09 	lsr	r3,r7,0x9
80007b7e:	c0 41       	brne	80007b86 <_malloc_r+0x72>
80007b80:	ee 03 16 03 	lsr	r3,r7,0x3
80007b84:	c2 68       	rjmp	80007bd0 <_malloc_r+0xbc>
80007b86:	58 43       	cp.w	r3,4
80007b88:	e0 8b 00 06 	brhi	80007b94 <_malloc_r+0x80>
80007b8c:	ee 03 16 06 	lsr	r3,r7,0x6
80007b90:	2c 83       	sub	r3,-56
80007b92:	c1 f8       	rjmp	80007bd0 <_malloc_r+0xbc>
80007b94:	59 43       	cp.w	r3,20
80007b96:	e0 8b 00 04 	brhi	80007b9e <_malloc_r+0x8a>
80007b9a:	2a 53       	sub	r3,-91
80007b9c:	c1 a8       	rjmp	80007bd0 <_malloc_r+0xbc>
80007b9e:	e0 43 00 54 	cp.w	r3,84
80007ba2:	e0 8b 00 06 	brhi	80007bae <_malloc_r+0x9a>
80007ba6:	ee 03 16 0c 	lsr	r3,r7,0xc
80007baa:	29 23       	sub	r3,-110
80007bac:	c1 28       	rjmp	80007bd0 <_malloc_r+0xbc>
80007bae:	e0 43 01 54 	cp.w	r3,340
80007bb2:	e0 8b 00 06 	brhi	80007bbe <_malloc_r+0xaa>
80007bb6:	ee 03 16 0f 	lsr	r3,r7,0xf
80007bba:	28 93       	sub	r3,-119
80007bbc:	c0 a8       	rjmp	80007bd0 <_malloc_r+0xbc>
80007bbe:	e0 43 05 54 	cp.w	r3,1364
80007bc2:	e0 88 00 04 	brls	80007bca <_malloc_r+0xb6>
80007bc6:	37 e3       	mov	r3,126
80007bc8:	c0 48       	rjmp	80007bd0 <_malloc_r+0xbc>
80007bca:	ee 03 16 12 	lsr	r3,r7,0x12
80007bce:	28 43       	sub	r3,-124
80007bd0:	4a aa       	lddpc	r10,80007c78 <_malloc_r+0x164>
80007bd2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007bd6:	74 36       	ld.w	r6,r10[0xc]
80007bd8:	c1 98       	rjmp	80007c0a <_malloc_r+0xf6>
80007bda:	6c 19       	ld.w	r9,r6[0x4]
80007bdc:	e0 19 ff fc 	andl	r9,0xfffc
80007be0:	f2 07 01 0b 	sub	r11,r9,r7
80007be4:	58 fb       	cp.w	r11,15
80007be6:	e0 8a 00 04 	brle	80007bee <_malloc_r+0xda>
80007bea:	20 13       	sub	r3,1
80007bec:	c1 18       	rjmp	80007c0e <_malloc_r+0xfa>
80007bee:	6c 38       	ld.w	r8,r6[0xc]
80007bf0:	58 0b       	cp.w	r11,0
80007bf2:	c0 b5       	brlt	80007c08 <_malloc_r+0xf4>
80007bf4:	6c 2a       	ld.w	r10,r6[0x8]
80007bf6:	ec 09 00 09 	add	r9,r6,r9
80007bfa:	0a 9c       	mov	r12,r5
80007bfc:	91 2a       	st.w	r8[0x8],r10
80007bfe:	95 38       	st.w	r10[0xc],r8
80007c00:	72 18       	ld.w	r8,r9[0x4]
80007c02:	a1 a8       	sbr	r8,0x0
80007c04:	93 18       	st.w	r9[0x4],r8
80007c06:	cb a8       	rjmp	80007d7a <_malloc_r+0x266>
80007c08:	10 96       	mov	r6,r8
80007c0a:	14 36       	cp.w	r6,r10
80007c0c:	ce 71       	brne	80007bda <_malloc_r+0xc6>
80007c0e:	2f f3       	sub	r3,-1
80007c10:	49 aa       	lddpc	r10,80007c78 <_malloc_r+0x164>
80007c12:	f4 cc ff f8 	sub	r12,r10,-8
80007c16:	78 26       	ld.w	r6,r12[0x8]
80007c18:	18 36       	cp.w	r6,r12
80007c1a:	c6 c0       	breq	80007cf2 <_malloc_r+0x1de>
80007c1c:	6c 19       	ld.w	r9,r6[0x4]
80007c1e:	e0 19 ff fc 	andl	r9,0xfffc
80007c22:	f2 07 01 08 	sub	r8,r9,r7
80007c26:	58 f8       	cp.w	r8,15
80007c28:	e0 89 00 8e 	brgt	80007d44 <_malloc_r+0x230>
80007c2c:	99 3c       	st.w	r12[0xc],r12
80007c2e:	99 2c       	st.w	r12[0x8],r12
80007c30:	58 08       	cp.w	r8,0
80007c32:	c0 55       	brlt	80007c3c <_malloc_r+0x128>
80007c34:	ec 09 00 09 	add	r9,r6,r9
80007c38:	0a 9c       	mov	r12,r5
80007c3a:	ce 3b       	rjmp	80007c00 <_malloc_r+0xec>
80007c3c:	e0 49 01 ff 	cp.w	r9,511
80007c40:	e0 8b 00 13 	brhi	80007c66 <_malloc_r+0x152>
80007c44:	a3 99       	lsr	r9,0x3
80007c46:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007c4a:	70 2b       	ld.w	r11,r8[0x8]
80007c4c:	8d 38       	st.w	r6[0xc],r8
80007c4e:	8d 2b       	st.w	r6[0x8],r11
80007c50:	97 36       	st.w	r11[0xc],r6
80007c52:	91 26       	st.w	r8[0x8],r6
80007c54:	a3 49       	asr	r9,0x2
80007c56:	74 18       	ld.w	r8,r10[0x4]
80007c58:	30 1b       	mov	r11,1
80007c5a:	f6 09 09 49 	lsl	r9,r11,r9
80007c5e:	f1 e9 10 09 	or	r9,r8,r9
80007c62:	95 19       	st.w	r10[0x4],r9
80007c64:	c4 78       	rjmp	80007cf2 <_malloc_r+0x1de>
80007c66:	f2 0a 16 09 	lsr	r10,r9,0x9
80007c6a:	58 4a       	cp.w	r10,4
80007c6c:	e0 8b 00 08 	brhi	80007c7c <_malloc_r+0x168>
80007c70:	f2 0a 16 06 	lsr	r10,r9,0x6
80007c74:	2c 8a       	sub	r10,-56
80007c76:	c2 18       	rjmp	80007cb8 <_malloc_r+0x1a4>
80007c78:	00 00       	add	r0,r0
80007c7a:	01 00       	ld.w	r0,r0++
80007c7c:	59 4a       	cp.w	r10,20
80007c7e:	e0 8b 00 04 	brhi	80007c86 <_malloc_r+0x172>
80007c82:	2a 5a       	sub	r10,-91
80007c84:	c1 a8       	rjmp	80007cb8 <_malloc_r+0x1a4>
80007c86:	e0 4a 00 54 	cp.w	r10,84
80007c8a:	e0 8b 00 06 	brhi	80007c96 <_malloc_r+0x182>
80007c8e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007c92:	29 2a       	sub	r10,-110
80007c94:	c1 28       	rjmp	80007cb8 <_malloc_r+0x1a4>
80007c96:	e0 4a 01 54 	cp.w	r10,340
80007c9a:	e0 8b 00 06 	brhi	80007ca6 <_malloc_r+0x192>
80007c9e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007ca2:	28 9a       	sub	r10,-119
80007ca4:	c0 a8       	rjmp	80007cb8 <_malloc_r+0x1a4>
80007ca6:	e0 4a 05 54 	cp.w	r10,1364
80007caa:	e0 88 00 04 	brls	80007cb2 <_malloc_r+0x19e>
80007cae:	37 ea       	mov	r10,126
80007cb0:	c0 48       	rjmp	80007cb8 <_malloc_r+0x1a4>
80007cb2:	f2 0a 16 12 	lsr	r10,r9,0x12
80007cb6:	28 4a       	sub	r10,-124
80007cb8:	4c 7b       	lddpc	r11,80007dd4 <_malloc_r+0x2c0>
80007cba:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007cbe:	68 28       	ld.w	r8,r4[0x8]
80007cc0:	08 38       	cp.w	r8,r4
80007cc2:	c0 e1       	brne	80007cde <_malloc_r+0x1ca>
80007cc4:	76 19       	ld.w	r9,r11[0x4]
80007cc6:	a3 4a       	asr	r10,0x2
80007cc8:	30 1e       	mov	lr,1
80007cca:	fc 0a 09 4a 	lsl	r10,lr,r10
80007cce:	f3 ea 10 0a 	or	r10,r9,r10
80007cd2:	10 99       	mov	r9,r8
80007cd4:	97 1a       	st.w	r11[0x4],r10
80007cd6:	c0 a8       	rjmp	80007cea <_malloc_r+0x1d6>
80007cd8:	70 28       	ld.w	r8,r8[0x8]
80007cda:	08 38       	cp.w	r8,r4
80007cdc:	c0 60       	breq	80007ce8 <_malloc_r+0x1d4>
80007cde:	70 1a       	ld.w	r10,r8[0x4]
80007ce0:	e0 1a ff fc 	andl	r10,0xfffc
80007ce4:	14 39       	cp.w	r9,r10
80007ce6:	cf 93       	brcs	80007cd8 <_malloc_r+0x1c4>
80007ce8:	70 39       	ld.w	r9,r8[0xc]
80007cea:	8d 39       	st.w	r6[0xc],r9
80007cec:	8d 28       	st.w	r6[0x8],r8
80007cee:	91 36       	st.w	r8[0xc],r6
80007cf0:	93 26       	st.w	r9[0x8],r6
80007cf2:	e6 08 14 02 	asr	r8,r3,0x2
80007cf6:	30 1b       	mov	r11,1
80007cf8:	4b 74       	lddpc	r4,80007dd4 <_malloc_r+0x2c0>
80007cfa:	f6 08 09 4b 	lsl	r11,r11,r8
80007cfe:	68 18       	ld.w	r8,r4[0x4]
80007d00:	10 3b       	cp.w	r11,r8
80007d02:	e0 8b 00 6b 	brhi	80007dd8 <_malloc_r+0x2c4>
80007d06:	f7 e8 00 09 	and	r9,r11,r8
80007d0a:	c0 b1       	brne	80007d20 <_malloc_r+0x20c>
80007d0c:	e0 13 ff fc 	andl	r3,0xfffc
80007d10:	a1 7b       	lsl	r11,0x1
80007d12:	2f c3       	sub	r3,-4
80007d14:	c0 38       	rjmp	80007d1a <_malloc_r+0x206>
80007d16:	2f c3       	sub	r3,-4
80007d18:	a1 7b       	lsl	r11,0x1
80007d1a:	f7 e8 00 09 	and	r9,r11,r8
80007d1e:	cf c0       	breq	80007d16 <_malloc_r+0x202>
80007d20:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007d24:	06 92       	mov	r2,r3
80007d26:	1c 91       	mov	r1,lr
80007d28:	62 36       	ld.w	r6,r1[0xc]
80007d2a:	c2 d8       	rjmp	80007d84 <_malloc_r+0x270>
80007d2c:	6c 1a       	ld.w	r10,r6[0x4]
80007d2e:	e0 1a ff fc 	andl	r10,0xfffc
80007d32:	f4 07 01 08 	sub	r8,r10,r7
80007d36:	58 f8       	cp.w	r8,15
80007d38:	e0 8a 00 15 	brle	80007d62 <_malloc_r+0x24e>
80007d3c:	6c 3a       	ld.w	r10,r6[0xc]
80007d3e:	6c 29       	ld.w	r9,r6[0x8]
80007d40:	95 29       	st.w	r10[0x8],r9
80007d42:	93 3a       	st.w	r9[0xc],r10
80007d44:	0e 99       	mov	r9,r7
80007d46:	ec 07 00 07 	add	r7,r6,r7
80007d4a:	a1 a9       	sbr	r9,0x0
80007d4c:	99 37       	st.w	r12[0xc],r7
80007d4e:	99 27       	st.w	r12[0x8],r7
80007d50:	8d 19       	st.w	r6[0x4],r9
80007d52:	ee 08 09 08 	st.w	r7[r8],r8
80007d56:	8f 2c       	st.w	r7[0x8],r12
80007d58:	8f 3c       	st.w	r7[0xc],r12
80007d5a:	a1 a8       	sbr	r8,0x0
80007d5c:	0a 9c       	mov	r12,r5
80007d5e:	8f 18       	st.w	r7[0x4],r8
80007d60:	c0 d8       	rjmp	80007d7a <_malloc_r+0x266>
80007d62:	6c 39       	ld.w	r9,r6[0xc]
80007d64:	58 08       	cp.w	r8,0
80007d66:	c0 e5       	brlt	80007d82 <_malloc_r+0x26e>
80007d68:	ec 0a 00 0a 	add	r10,r6,r10
80007d6c:	74 18       	ld.w	r8,r10[0x4]
80007d6e:	a1 a8       	sbr	r8,0x0
80007d70:	0a 9c       	mov	r12,r5
80007d72:	95 18       	st.w	r10[0x4],r8
80007d74:	6c 28       	ld.w	r8,r6[0x8]
80007d76:	93 28       	st.w	r9[0x8],r8
80007d78:	91 39       	st.w	r8[0xc],r9
80007d7a:	c0 ed       	rcall	80007f96 <__malloc_unlock>
80007d7c:	ec cc ff f8 	sub	r12,r6,-8
80007d80:	d8 32       	popm	r0-r7,pc
80007d82:	12 96       	mov	r6,r9
80007d84:	02 36       	cp.w	r6,r1
80007d86:	cd 31       	brne	80007d2c <_malloc_r+0x218>
80007d88:	2f f2       	sub	r2,-1
80007d8a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007d8e:	c0 30       	breq	80007d94 <_malloc_r+0x280>
80007d90:	2f 81       	sub	r1,-8
80007d92:	cc bb       	rjmp	80007d28 <_malloc_r+0x214>
80007d94:	1c 98       	mov	r8,lr
80007d96:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007d9a:	c0 81       	brne	80007daa <_malloc_r+0x296>
80007d9c:	68 19       	ld.w	r9,r4[0x4]
80007d9e:	f6 08 11 ff 	rsub	r8,r11,-1
80007da2:	f3 e8 00 08 	and	r8,r9,r8
80007da6:	89 18       	st.w	r4[0x4],r8
80007da8:	c0 78       	rjmp	80007db6 <_malloc_r+0x2a2>
80007daa:	f0 c9 00 08 	sub	r9,r8,8
80007dae:	20 13       	sub	r3,1
80007db0:	70 08       	ld.w	r8,r8[0x0]
80007db2:	12 38       	cp.w	r8,r9
80007db4:	cf 10       	breq	80007d96 <_malloc_r+0x282>
80007db6:	a1 7b       	lsl	r11,0x1
80007db8:	68 18       	ld.w	r8,r4[0x4]
80007dba:	10 3b       	cp.w	r11,r8
80007dbc:	e0 8b 00 0e 	brhi	80007dd8 <_malloc_r+0x2c4>
80007dc0:	58 0b       	cp.w	r11,0
80007dc2:	c0 b0       	breq	80007dd8 <_malloc_r+0x2c4>
80007dc4:	04 93       	mov	r3,r2
80007dc6:	c0 38       	rjmp	80007dcc <_malloc_r+0x2b8>
80007dc8:	2f c3       	sub	r3,-4
80007dca:	a1 7b       	lsl	r11,0x1
80007dcc:	f7 e8 00 09 	and	r9,r11,r8
80007dd0:	ca 81       	brne	80007d20 <_malloc_r+0x20c>
80007dd2:	cf bb       	rjmp	80007dc8 <_malloc_r+0x2b4>
80007dd4:	00 00       	add	r0,r0
80007dd6:	01 00       	ld.w	r0,r0++
80007dd8:	68 23       	ld.w	r3,r4[0x8]
80007dda:	66 12       	ld.w	r2,r3[0x4]
80007ddc:	e0 12 ff fc 	andl	r2,0xfffc
80007de0:	0e 32       	cp.w	r2,r7
80007de2:	5f 39       	srlo	r9
80007de4:	e4 07 01 08 	sub	r8,r2,r7
80007de8:	58 f8       	cp.w	r8,15
80007dea:	5f aa       	srle	r10
80007dec:	f5 e9 10 09 	or	r9,r10,r9
80007df0:	e0 80 00 9a 	breq	80007f24 <_malloc_r+0x410>
80007df4:	4c 78       	lddpc	r8,80007f10 <_malloc_r+0x3fc>
80007df6:	70 01       	ld.w	r1,r8[0x0]
80007df8:	4c 78       	lddpc	r8,80007f14 <_malloc_r+0x400>
80007dfa:	2f 01       	sub	r1,-16
80007dfc:	70 08       	ld.w	r8,r8[0x0]
80007dfe:	0e 01       	add	r1,r7
80007e00:	5b f8       	cp.w	r8,-1
80007e02:	c0 40       	breq	80007e0a <_malloc_r+0x2f6>
80007e04:	28 11       	sub	r1,-127
80007e06:	e0 11 ff 80 	andl	r1,0xff80
80007e0a:	02 9b       	mov	r11,r1
80007e0c:	0a 9c       	mov	r12,r5
80007e0e:	e0 a0 05 37 	rcall	8000887c <_sbrk_r>
80007e12:	18 96       	mov	r6,r12
80007e14:	5b fc       	cp.w	r12,-1
80007e16:	c6 e0       	breq	80007ef2 <_malloc_r+0x3de>
80007e18:	e6 02 00 08 	add	r8,r3,r2
80007e1c:	10 3c       	cp.w	r12,r8
80007e1e:	c0 32       	brcc	80007e24 <_malloc_r+0x310>
80007e20:	08 33       	cp.w	r3,r4
80007e22:	c6 81       	brne	80007ef2 <_malloc_r+0x3de>
80007e24:	4b da       	lddpc	r10,80007f18 <_malloc_r+0x404>
80007e26:	74 09       	ld.w	r9,r10[0x0]
80007e28:	e2 09 00 09 	add	r9,r1,r9
80007e2c:	95 09       	st.w	r10[0x0],r9
80007e2e:	10 36       	cp.w	r6,r8
80007e30:	c0 a1       	brne	80007e44 <_malloc_r+0x330>
80007e32:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007e36:	c0 71       	brne	80007e44 <_malloc_r+0x330>
80007e38:	e2 02 00 02 	add	r2,r1,r2
80007e3c:	68 28       	ld.w	r8,r4[0x8]
80007e3e:	a1 a2       	sbr	r2,0x0
80007e40:	91 12       	st.w	r8[0x4],r2
80007e42:	c4 c8       	rjmp	80007eda <_malloc_r+0x3c6>
80007e44:	4b 4a       	lddpc	r10,80007f14 <_malloc_r+0x400>
80007e46:	74 0b       	ld.w	r11,r10[0x0]
80007e48:	5b fb       	cp.w	r11,-1
80007e4a:	c0 31       	brne	80007e50 <_malloc_r+0x33c>
80007e4c:	95 06       	st.w	r10[0x0],r6
80007e4e:	c0 68       	rjmp	80007e5a <_malloc_r+0x346>
80007e50:	ec 09 00 09 	add	r9,r6,r9
80007e54:	4b 1a       	lddpc	r10,80007f18 <_malloc_r+0x404>
80007e56:	10 19       	sub	r9,r8
80007e58:	95 09       	st.w	r10[0x0],r9
80007e5a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007e5e:	f0 09 11 08 	rsub	r9,r8,8
80007e62:	58 08       	cp.w	r8,0
80007e64:	f2 08 17 10 	movne	r8,r9
80007e68:	ed d8 e1 06 	addne	r6,r6,r8
80007e6c:	28 08       	sub	r8,-128
80007e6e:	ec 01 00 01 	add	r1,r6,r1
80007e72:	0a 9c       	mov	r12,r5
80007e74:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007e78:	f0 01 01 01 	sub	r1,r8,r1
80007e7c:	02 9b       	mov	r11,r1
80007e7e:	e0 a0 04 ff 	rcall	8000887c <_sbrk_r>
80007e82:	4a 68       	lddpc	r8,80007f18 <_malloc_r+0x404>
80007e84:	5b fc       	cp.w	r12,-1
80007e86:	ec 0c 17 00 	moveq	r12,r6
80007e8a:	f9 b1 00 00 	moveq	r1,0
80007e8e:	70 09       	ld.w	r9,r8[0x0]
80007e90:	0c 1c       	sub	r12,r6
80007e92:	89 26       	st.w	r4[0x8],r6
80007e94:	02 0c       	add	r12,r1
80007e96:	12 01       	add	r1,r9
80007e98:	a1 ac       	sbr	r12,0x0
80007e9a:	91 01       	st.w	r8[0x0],r1
80007e9c:	8d 1c       	st.w	r6[0x4],r12
80007e9e:	08 33       	cp.w	r3,r4
80007ea0:	c1 d0       	breq	80007eda <_malloc_r+0x3c6>
80007ea2:	58 f2       	cp.w	r2,15
80007ea4:	e0 8b 00 05 	brhi	80007eae <_malloc_r+0x39a>
80007ea8:	30 18       	mov	r8,1
80007eaa:	8d 18       	st.w	r6[0x4],r8
80007eac:	c2 38       	rjmp	80007ef2 <_malloc_r+0x3de>
80007eae:	30 59       	mov	r9,5
80007eb0:	20 c2       	sub	r2,12
80007eb2:	e0 12 ff f8 	andl	r2,0xfff8
80007eb6:	e6 02 00 08 	add	r8,r3,r2
80007eba:	91 29       	st.w	r8[0x8],r9
80007ebc:	91 19       	st.w	r8[0x4],r9
80007ebe:	66 18       	ld.w	r8,r3[0x4]
80007ec0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ec4:	e5 e8 10 08 	or	r8,r2,r8
80007ec8:	87 18       	st.w	r3[0x4],r8
80007eca:	58 f2       	cp.w	r2,15
80007ecc:	e0 88 00 07 	brls	80007eda <_malloc_r+0x3c6>
80007ed0:	e6 cb ff f8 	sub	r11,r3,-8
80007ed4:	0a 9c       	mov	r12,r5
80007ed6:	fe b0 fb 77 	rcall	800075c4 <_free_r>
80007eda:	49 19       	lddpc	r9,80007f1c <_malloc_r+0x408>
80007edc:	72 0a       	ld.w	r10,r9[0x0]
80007ede:	48 f8       	lddpc	r8,80007f18 <_malloc_r+0x404>
80007ee0:	70 08       	ld.w	r8,r8[0x0]
80007ee2:	14 38       	cp.w	r8,r10
80007ee4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007ee8:	48 e9       	lddpc	r9,80007f20 <_malloc_r+0x40c>
80007eea:	72 0a       	ld.w	r10,r9[0x0]
80007eec:	14 38       	cp.w	r8,r10
80007eee:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007ef2:	68 28       	ld.w	r8,r4[0x8]
80007ef4:	70 18       	ld.w	r8,r8[0x4]
80007ef6:	e0 18 ff fc 	andl	r8,0xfffc
80007efa:	0e 38       	cp.w	r8,r7
80007efc:	5f 39       	srlo	r9
80007efe:	0e 18       	sub	r8,r7
80007f00:	58 f8       	cp.w	r8,15
80007f02:	5f aa       	srle	r10
80007f04:	f5 e9 10 09 	or	r9,r10,r9
80007f08:	c0 e0       	breq	80007f24 <_malloc_r+0x410>
80007f0a:	0a 9c       	mov	r12,r5
80007f0c:	c4 5c       	rcall	80007f96 <__malloc_unlock>
80007f0e:	d8 3a       	popm	r0-r7,pc,r12=0
80007f10:	00 00       	add	r0,r0
80007f12:	06 0c       	add	r12,r3
80007f14:	00 00       	add	r0,r0
80007f16:	05 0c       	ld.w	r12,r2++
80007f18:	00 00       	add	r0,r0
80007f1a:	06 10       	sub	r0,r3
80007f1c:	00 00       	add	r0,r0
80007f1e:	06 08       	add	r8,r3
80007f20:	00 00       	add	r0,r0
80007f22:	06 04       	add	r4,r3
80007f24:	68 26       	ld.w	r6,r4[0x8]
80007f26:	a1 a8       	sbr	r8,0x0
80007f28:	0e 99       	mov	r9,r7
80007f2a:	a1 a9       	sbr	r9,0x0
80007f2c:	8d 19       	st.w	r6[0x4],r9
80007f2e:	ec 07 00 07 	add	r7,r6,r7
80007f32:	0a 9c       	mov	r12,r5
80007f34:	89 27       	st.w	r4[0x8],r7
80007f36:	8f 18       	st.w	r7[0x4],r8
80007f38:	c2 fc       	rcall	80007f96 <__malloc_unlock>
80007f3a:	ec cc ff f8 	sub	r12,r6,-8
80007f3e:	d8 32       	popm	r0-r7,pc

80007f40 <memchr>:
80007f40:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007f44:	c0 68       	rjmp	80007f50 <memchr+0x10>
80007f46:	20 1a       	sub	r10,1
80007f48:	19 88       	ld.ub	r8,r12[0x0]
80007f4a:	16 38       	cp.w	r8,r11
80007f4c:	5e 0c       	reteq	r12
80007f4e:	2f fc       	sub	r12,-1
80007f50:	58 0a       	cp.w	r10,0
80007f52:	cf a1       	brne	80007f46 <memchr+0x6>
80007f54:	5e fa       	retal	r10

80007f56 <memmove>:
80007f56:	d4 01       	pushm	lr
80007f58:	18 3b       	cp.w	r11,r12
80007f5a:	c1 92       	brcc	80007f8c <memmove+0x36>
80007f5c:	f6 0a 00 09 	add	r9,r11,r10
80007f60:	12 3c       	cp.w	r12,r9
80007f62:	c1 52       	brcc	80007f8c <memmove+0x36>
80007f64:	f8 0a 00 0b 	add	r11,r12,r10
80007f68:	30 08       	mov	r8,0
80007f6a:	c0 68       	rjmp	80007f76 <memmove+0x20>
80007f6c:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007f70:	20 1a       	sub	r10,1
80007f72:	f6 08 0b 0e 	st.b	r11[r8],lr
80007f76:	20 18       	sub	r8,1
80007f78:	58 0a       	cp.w	r10,0
80007f7a:	cf 91       	brne	80007f6c <memmove+0x16>
80007f7c:	d8 02       	popm	pc
80007f7e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007f82:	20 1a       	sub	r10,1
80007f84:	f8 08 0b 09 	st.b	r12[r8],r9
80007f88:	2f f8       	sub	r8,-1
80007f8a:	c0 28       	rjmp	80007f8e <memmove+0x38>
80007f8c:	30 08       	mov	r8,0
80007f8e:	58 0a       	cp.w	r10,0
80007f90:	cf 71       	brne	80007f7e <memmove+0x28>
80007f92:	d8 02       	popm	pc

80007f94 <__malloc_lock>:
80007f94:	5e fc       	retal	r12

80007f96 <__malloc_unlock>:
80007f96:	5e fc       	retal	r12

80007f98 <__hi0bits>:
80007f98:	18 98       	mov	r8,r12
80007f9a:	e0 1c 00 00 	andl	r12,0x0
80007f9e:	f0 09 15 10 	lsl	r9,r8,0x10
80007fa2:	58 0c       	cp.w	r12,0
80007fa4:	f2 08 17 00 	moveq	r8,r9
80007fa8:	f9 bc 00 10 	moveq	r12,16
80007fac:	f9 bc 01 00 	movne	r12,0
80007fb0:	10 9a       	mov	r10,r8
80007fb2:	f0 09 15 08 	lsl	r9,r8,0x8
80007fb6:	e6 1a ff 00 	andh	r10,0xff00,COH
80007fba:	f7 bc 00 f8 	subeq	r12,-8
80007fbe:	f2 08 17 00 	moveq	r8,r9
80007fc2:	10 9a       	mov	r10,r8
80007fc4:	f0 09 15 04 	lsl	r9,r8,0x4
80007fc8:	e6 1a f0 00 	andh	r10,0xf000,COH
80007fcc:	f7 bc 00 fc 	subeq	r12,-4
80007fd0:	f2 08 17 00 	moveq	r8,r9
80007fd4:	10 9a       	mov	r10,r8
80007fd6:	f0 09 15 02 	lsl	r9,r8,0x2
80007fda:	e6 1a c0 00 	andh	r10,0xc000,COH
80007fde:	f7 bc 00 fe 	subeq	r12,-2
80007fe2:	f2 08 17 00 	moveq	r8,r9
80007fe6:	58 08       	cp.w	r8,0
80007fe8:	5e 5c       	retlt	r12
80007fea:	ed b8 00 1e 	bld	r8,0x1e
80007fee:	f9 bc 01 20 	movne	r12,32
80007ff2:	f7 bc 00 ff 	subeq	r12,-1
80007ff6:	5e fc       	retal	r12

80007ff8 <__lo0bits>:
80007ff8:	18 99       	mov	r9,r12
80007ffa:	78 08       	ld.w	r8,r12[0x0]
80007ffc:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80008000:	c1 50       	breq	8000802a <__lo0bits+0x32>
80008002:	ed b8 00 00 	bld	r8,0x0
80008006:	c0 21       	brne	8000800a <__lo0bits+0x12>
80008008:	5e fd       	retal	0
8000800a:	10 9b       	mov	r11,r8
8000800c:	f0 0a 16 01 	lsr	r10,r8,0x1
80008010:	e2 1b 00 02 	andl	r11,0x2,COH
80008014:	a3 88       	lsr	r8,0x2
80008016:	58 0b       	cp.w	r11,0
80008018:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000801c:	f9 bc 01 01 	movne	r12,1
80008020:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80008024:	f9 bc 00 02 	moveq	r12,2
80008028:	5e fc       	retal	r12
8000802a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000802e:	f0 0b 16 10 	lsr	r11,r8,0x10
80008032:	58 0a       	cp.w	r10,0
80008034:	f6 08 17 00 	moveq	r8,r11
80008038:	f9 bc 00 10 	moveq	r12,16
8000803c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80008040:	f0 0a 16 08 	lsr	r10,r8,0x8
80008044:	58 0b       	cp.w	r11,0
80008046:	f7 bc 00 f8 	subeq	r12,-8
8000804a:	f4 08 17 00 	moveq	r8,r10
8000804e:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80008052:	f0 0a 16 04 	lsr	r10,r8,0x4
80008056:	58 0b       	cp.w	r11,0
80008058:	f7 bc 00 fc 	subeq	r12,-4
8000805c:	f4 08 17 00 	moveq	r8,r10
80008060:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80008064:	f0 0a 16 02 	lsr	r10,r8,0x2
80008068:	58 0b       	cp.w	r11,0
8000806a:	f7 bc 00 fe 	subeq	r12,-2
8000806e:	f4 08 17 00 	moveq	r8,r10
80008072:	ed b8 00 00 	bld	r8,0x0
80008076:	c0 60       	breq	80008082 <__lo0bits+0x8a>
80008078:	a1 98       	lsr	r8,0x1
8000807a:	c0 31       	brne	80008080 <__lo0bits+0x88>
8000807c:	32 0c       	mov	r12,32
8000807e:	5e fc       	retal	r12
80008080:	2f fc       	sub	r12,-1
80008082:	93 08       	st.w	r9[0x0],r8
80008084:	5e fc       	retal	r12

80008086 <__mcmp>:
80008086:	d4 01       	pushm	lr
80008088:	18 98       	mov	r8,r12
8000808a:	76 49       	ld.w	r9,r11[0x10]
8000808c:	78 4c       	ld.w	r12,r12[0x10]
8000808e:	12 1c       	sub	r12,r9
80008090:	c1 31       	brne	800080b6 <__mcmp+0x30>
80008092:	2f b9       	sub	r9,-5
80008094:	a3 69       	lsl	r9,0x2
80008096:	12 0b       	add	r11,r9
80008098:	f0 09 00 09 	add	r9,r8,r9
8000809c:	2e c8       	sub	r8,-20
8000809e:	13 4e       	ld.w	lr,--r9
800080a0:	17 4a       	ld.w	r10,--r11
800080a2:	14 3e       	cp.w	lr,r10
800080a4:	c0 60       	breq	800080b0 <__mcmp+0x2a>
800080a6:	f9 bc 03 ff 	movlo	r12,-1
800080aa:	f9 bc 02 01 	movhs	r12,1
800080ae:	d8 02       	popm	pc
800080b0:	10 39       	cp.w	r9,r8
800080b2:	fe 9b ff f6 	brhi	8000809e <__mcmp+0x18>
800080b6:	d8 02       	popm	pc

800080b8 <_Bfree>:
800080b8:	d4 21       	pushm	r4-r7,lr
800080ba:	18 97       	mov	r7,r12
800080bc:	16 95       	mov	r5,r11
800080be:	78 96       	ld.w	r6,r12[0x24]
800080c0:	58 06       	cp.w	r6,0
800080c2:	c0 91       	brne	800080d4 <_Bfree+0x1c>
800080c4:	31 0c       	mov	r12,16
800080c6:	fe b0 fd 1f 	rcall	80007b04 <malloc>
800080ca:	99 36       	st.w	r12[0xc],r6
800080cc:	8f 9c       	st.w	r7[0x24],r12
800080ce:	99 16       	st.w	r12[0x4],r6
800080d0:	99 26       	st.w	r12[0x8],r6
800080d2:	99 06       	st.w	r12[0x0],r6
800080d4:	58 05       	cp.w	r5,0
800080d6:	c0 90       	breq	800080e8 <_Bfree+0x30>
800080d8:	6a 19       	ld.w	r9,r5[0x4]
800080da:	6e 98       	ld.w	r8,r7[0x24]
800080dc:	70 38       	ld.w	r8,r8[0xc]
800080de:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800080e2:	8b 0a       	st.w	r5[0x0],r10
800080e4:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800080e8:	d8 22       	popm	r4-r7,pc
800080ea:	d7 03       	nop

800080ec <_Balloc>:
800080ec:	d4 21       	pushm	r4-r7,lr
800080ee:	18 97       	mov	r7,r12
800080f0:	16 96       	mov	r6,r11
800080f2:	78 95       	ld.w	r5,r12[0x24]
800080f4:	58 05       	cp.w	r5,0
800080f6:	c0 91       	brne	80008108 <_Balloc+0x1c>
800080f8:	31 0c       	mov	r12,16
800080fa:	fe b0 fd 05 	rcall	80007b04 <malloc>
800080fe:	99 35       	st.w	r12[0xc],r5
80008100:	8f 9c       	st.w	r7[0x24],r12
80008102:	99 15       	st.w	r12[0x4],r5
80008104:	99 25       	st.w	r12[0x8],r5
80008106:	99 05       	st.w	r12[0x0],r5
80008108:	6e 95       	ld.w	r5,r7[0x24]
8000810a:	6a 38       	ld.w	r8,r5[0xc]
8000810c:	58 08       	cp.w	r8,0
8000810e:	c0 b1       	brne	80008124 <_Balloc+0x38>
80008110:	31 0a       	mov	r10,16
80008112:	30 4b       	mov	r11,4
80008114:	0e 9c       	mov	r12,r7
80008116:	e0 a0 04 9b 	rcall	80008a4c <_calloc_r>
8000811a:	8b 3c       	st.w	r5[0xc],r12
8000811c:	6e 98       	ld.w	r8,r7[0x24]
8000811e:	70 3c       	ld.w	r12,r8[0xc]
80008120:	58 0c       	cp.w	r12,0
80008122:	c1 b0       	breq	80008158 <_Balloc+0x6c>
80008124:	6e 98       	ld.w	r8,r7[0x24]
80008126:	70 38       	ld.w	r8,r8[0xc]
80008128:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000812c:	70 0c       	ld.w	r12,r8[0x0]
8000812e:	58 0c       	cp.w	r12,0
80008130:	c0 40       	breq	80008138 <_Balloc+0x4c>
80008132:	78 09       	ld.w	r9,r12[0x0]
80008134:	91 09       	st.w	r8[0x0],r9
80008136:	c0 e8       	rjmp	80008152 <_Balloc+0x66>
80008138:	0e 9c       	mov	r12,r7
8000813a:	30 17       	mov	r7,1
8000813c:	0e 9b       	mov	r11,r7
8000813e:	ee 06 09 47 	lsl	r7,r7,r6
80008142:	ee ca ff fb 	sub	r10,r7,-5
80008146:	a3 6a       	lsl	r10,0x2
80008148:	e0 a0 04 82 	rcall	80008a4c <_calloc_r>
8000814c:	c0 60       	breq	80008158 <_Balloc+0x6c>
8000814e:	99 16       	st.w	r12[0x4],r6
80008150:	99 27       	st.w	r12[0x8],r7
80008152:	30 08       	mov	r8,0
80008154:	99 38       	st.w	r12[0xc],r8
80008156:	99 48       	st.w	r12[0x10],r8
80008158:	d8 22       	popm	r4-r7,pc
8000815a:	d7 03       	nop

8000815c <__d2b>:
8000815c:	d4 31       	pushm	r0-r7,lr
8000815e:	20 2d       	sub	sp,8
80008160:	16 93       	mov	r3,r11
80008162:	12 96       	mov	r6,r9
80008164:	10 95       	mov	r5,r8
80008166:	14 92       	mov	r2,r10
80008168:	30 1b       	mov	r11,1
8000816a:	cc 1f       	rcall	800080ec <_Balloc>
8000816c:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80008170:	50 09       	stdsp	sp[0x0],r9
80008172:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80008176:	b5 a9       	sbr	r9,0x14
80008178:	f0 01 16 14 	lsr	r1,r8,0x14
8000817c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008180:	18 94       	mov	r4,r12
80008182:	58 02       	cp.w	r2,0
80008184:	c1 d0       	breq	800081be <__d2b+0x62>
80008186:	fa cc ff f8 	sub	r12,sp,-8
8000818a:	18 d2       	st.w	--r12,r2
8000818c:	c3 6f       	rcall	80007ff8 <__lo0bits>
8000818e:	40 18       	lddsp	r8,sp[0x4]
80008190:	c0 d0       	breq	800081aa <__d2b+0x4e>
80008192:	40 09       	lddsp	r9,sp[0x0]
80008194:	f8 0a 11 20 	rsub	r10,r12,32
80008198:	f2 0a 09 4a 	lsl	r10,r9,r10
8000819c:	f5 e8 10 08 	or	r8,r10,r8
800081a0:	89 58       	st.w	r4[0x14],r8
800081a2:	f2 0c 0a 49 	lsr	r9,r9,r12
800081a6:	50 09       	stdsp	sp[0x0],r9
800081a8:	c0 28       	rjmp	800081ac <__d2b+0x50>
800081aa:	89 58       	st.w	r4[0x14],r8
800081ac:	40 08       	lddsp	r8,sp[0x0]
800081ae:	58 08       	cp.w	r8,0
800081b0:	f9 b3 01 02 	movne	r3,2
800081b4:	f9 b3 00 01 	moveq	r3,1
800081b8:	89 68       	st.w	r4[0x18],r8
800081ba:	89 43       	st.w	r4[0x10],r3
800081bc:	c0 88       	rjmp	800081cc <__d2b+0x70>
800081be:	1a 9c       	mov	r12,sp
800081c0:	c1 cf       	rcall	80007ff8 <__lo0bits>
800081c2:	30 13       	mov	r3,1
800081c4:	40 08       	lddsp	r8,sp[0x0]
800081c6:	2e 0c       	sub	r12,-32
800081c8:	89 43       	st.w	r4[0x10],r3
800081ca:	89 58       	st.w	r4[0x14],r8
800081cc:	58 01       	cp.w	r1,0
800081ce:	c0 90       	breq	800081e0 <__d2b+0x84>
800081d0:	e2 c1 04 33 	sub	r1,r1,1075
800081d4:	18 01       	add	r1,r12
800081d6:	8d 01       	st.w	r6[0x0],r1
800081d8:	f8 0c 11 35 	rsub	r12,r12,53
800081dc:	8b 0c       	st.w	r5[0x0],r12
800081de:	c0 c8       	rjmp	800081f6 <__d2b+0x9a>
800081e0:	e6 c8 ff fc 	sub	r8,r3,-4
800081e4:	f8 cc 04 32 	sub	r12,r12,1074
800081e8:	a5 73       	lsl	r3,0x5
800081ea:	8d 0c       	st.w	r6[0x0],r12
800081ec:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800081f0:	cd 4e       	rcall	80007f98 <__hi0bits>
800081f2:	18 13       	sub	r3,r12
800081f4:	8b 03       	st.w	r5[0x0],r3
800081f6:	08 9c       	mov	r12,r4
800081f8:	2f ed       	sub	sp,-8
800081fa:	d8 32       	popm	r0-r7,pc

800081fc <__mdiff>:
800081fc:	d4 31       	pushm	r0-r7,lr
800081fe:	74 48       	ld.w	r8,r10[0x10]
80008200:	76 45       	ld.w	r5,r11[0x10]
80008202:	16 97       	mov	r7,r11
80008204:	14 96       	mov	r6,r10
80008206:	10 15       	sub	r5,r8
80008208:	c1 31       	brne	8000822e <__mdiff+0x32>
8000820a:	2f b8       	sub	r8,-5
8000820c:	ee ce ff ec 	sub	lr,r7,-20
80008210:	a3 68       	lsl	r8,0x2
80008212:	f4 08 00 0b 	add	r11,r10,r8
80008216:	ee 08 00 08 	add	r8,r7,r8
8000821a:	11 4a       	ld.w	r10,--r8
8000821c:	17 49       	ld.w	r9,--r11
8000821e:	12 3a       	cp.w	r10,r9
80008220:	c0 30       	breq	80008226 <__mdiff+0x2a>
80008222:	c0 e2       	brcc	8000823e <__mdiff+0x42>
80008224:	c0 78       	rjmp	80008232 <__mdiff+0x36>
80008226:	1c 38       	cp.w	r8,lr
80008228:	fe 9b ff f9 	brhi	8000821a <__mdiff+0x1e>
8000822c:	c4 98       	rjmp	800082be <__mdiff+0xc2>
8000822e:	58 05       	cp.w	r5,0
80008230:	c0 64       	brge	8000823c <__mdiff+0x40>
80008232:	0e 98       	mov	r8,r7
80008234:	30 15       	mov	r5,1
80008236:	0c 97       	mov	r7,r6
80008238:	10 96       	mov	r6,r8
8000823a:	c0 28       	rjmp	8000823e <__mdiff+0x42>
8000823c:	30 05       	mov	r5,0
8000823e:	6e 1b       	ld.w	r11,r7[0x4]
80008240:	c5 6f       	rcall	800080ec <_Balloc>
80008242:	6e 49       	ld.w	r9,r7[0x10]
80008244:	6c 44       	ld.w	r4,r6[0x10]
80008246:	99 35       	st.w	r12[0xc],r5
80008248:	2f b4       	sub	r4,-5
8000824a:	f2 c5 ff fb 	sub	r5,r9,-5
8000824e:	ec 04 00 24 	add	r4,r6,r4<<0x2
80008252:	ee 05 00 25 	add	r5,r7,r5<<0x2
80008256:	2e c6       	sub	r6,-20
80008258:	2e c7       	sub	r7,-20
8000825a:	f8 c8 ff ec 	sub	r8,r12,-20
8000825e:	30 0a       	mov	r10,0
80008260:	0f 0e       	ld.w	lr,r7++
80008262:	0d 0b       	ld.w	r11,r6++
80008264:	fc 02 16 10 	lsr	r2,lr,0x10
80008268:	f6 03 16 10 	lsr	r3,r11,0x10
8000826c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008270:	e4 03 01 03 	sub	r3,r2,r3
80008274:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008278:	fc 0b 01 0b 	sub	r11,lr,r11
8000827c:	f6 0a 00 0a 	add	r10,r11,r10
80008280:	b0 1a       	st.h	r8[0x2],r10
80008282:	b1 4a       	asr	r10,0x10
80008284:	e6 0a 00 0a 	add	r10,r3,r10
80008288:	b0 0a       	st.h	r8[0x0],r10
8000828a:	2f c8       	sub	r8,-4
8000828c:	b1 4a       	asr	r10,0x10
8000828e:	08 36       	cp.w	r6,r4
80008290:	ce 83       	brcs	80008260 <__mdiff+0x64>
80008292:	c0 d8       	rjmp	800082ac <__mdiff+0xb0>
80008294:	0f 0b       	ld.w	r11,r7++
80008296:	f6 0e 16 10 	lsr	lr,r11,0x10
8000829a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000829e:	16 0a       	add	r10,r11
800082a0:	b0 1a       	st.h	r8[0x2],r10
800082a2:	b1 4a       	asr	r10,0x10
800082a4:	1c 0a       	add	r10,lr
800082a6:	b0 0a       	st.h	r8[0x0],r10
800082a8:	2f c8       	sub	r8,-4
800082aa:	b1 4a       	asr	r10,0x10
800082ac:	0a 37       	cp.w	r7,r5
800082ae:	cf 33       	brcs	80008294 <__mdiff+0x98>
800082b0:	c0 28       	rjmp	800082b4 <__mdiff+0xb8>
800082b2:	20 19       	sub	r9,1
800082b4:	11 4a       	ld.w	r10,--r8
800082b6:	58 0a       	cp.w	r10,0
800082b8:	cf d0       	breq	800082b2 <__mdiff+0xb6>
800082ba:	99 49       	st.w	r12[0x10],r9
800082bc:	d8 32       	popm	r0-r7,pc
800082be:	30 0b       	mov	r11,0
800082c0:	c1 6f       	rcall	800080ec <_Balloc>
800082c2:	30 18       	mov	r8,1
800082c4:	99 48       	st.w	r12[0x10],r8
800082c6:	30 08       	mov	r8,0
800082c8:	99 58       	st.w	r12[0x14],r8
800082ca:	d8 32       	popm	r0-r7,pc

800082cc <__lshift>:
800082cc:	d4 31       	pushm	r0-r7,lr
800082ce:	16 97       	mov	r7,r11
800082d0:	76 46       	ld.w	r6,r11[0x10]
800082d2:	f4 02 14 05 	asr	r2,r10,0x5
800082d6:	2f f6       	sub	r6,-1
800082d8:	14 93       	mov	r3,r10
800082da:	18 94       	mov	r4,r12
800082dc:	04 06       	add	r6,r2
800082de:	76 1b       	ld.w	r11,r11[0x4]
800082e0:	6e 28       	ld.w	r8,r7[0x8]
800082e2:	c0 38       	rjmp	800082e8 <__lshift+0x1c>
800082e4:	2f fb       	sub	r11,-1
800082e6:	a1 78       	lsl	r8,0x1
800082e8:	10 36       	cp.w	r6,r8
800082ea:	fe 99 ff fd 	brgt	800082e4 <__lshift+0x18>
800082ee:	08 9c       	mov	r12,r4
800082f0:	cf ee       	rcall	800080ec <_Balloc>
800082f2:	30 09       	mov	r9,0
800082f4:	18 95       	mov	r5,r12
800082f6:	f8 c8 ff ec 	sub	r8,r12,-20
800082fa:	12 9a       	mov	r10,r9
800082fc:	c0 38       	rjmp	80008302 <__lshift+0x36>
800082fe:	10 aa       	st.w	r8++,r10
80008300:	2f f9       	sub	r9,-1
80008302:	04 39       	cp.w	r9,r2
80008304:	cf d5       	brlt	800082fe <__lshift+0x32>
80008306:	6e 4b       	ld.w	r11,r7[0x10]
80008308:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000830c:	2f bb       	sub	r11,-5
8000830e:	ee c9 ff ec 	sub	r9,r7,-20
80008312:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80008316:	58 03       	cp.w	r3,0
80008318:	c1 30       	breq	8000833e <__lshift+0x72>
8000831a:	e6 0c 11 20 	rsub	r12,r3,32
8000831e:	30 0a       	mov	r10,0
80008320:	72 02       	ld.w	r2,r9[0x0]
80008322:	e4 03 09 42 	lsl	r2,r2,r3
80008326:	04 4a       	or	r10,r2
80008328:	10 aa       	st.w	r8++,r10
8000832a:	13 0a       	ld.w	r10,r9++
8000832c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008330:	16 39       	cp.w	r9,r11
80008332:	cf 73       	brcs	80008320 <__lshift+0x54>
80008334:	91 0a       	st.w	r8[0x0],r10
80008336:	58 0a       	cp.w	r10,0
80008338:	c0 70       	breq	80008346 <__lshift+0x7a>
8000833a:	2f f6       	sub	r6,-1
8000833c:	c0 58       	rjmp	80008346 <__lshift+0x7a>
8000833e:	13 0a       	ld.w	r10,r9++
80008340:	10 aa       	st.w	r8++,r10
80008342:	16 39       	cp.w	r9,r11
80008344:	cf d3       	brcs	8000833e <__lshift+0x72>
80008346:	08 9c       	mov	r12,r4
80008348:	20 16       	sub	r6,1
8000834a:	0e 9b       	mov	r11,r7
8000834c:	8b 46       	st.w	r5[0x10],r6
8000834e:	cb 5e       	rcall	800080b8 <_Bfree>
80008350:	0a 9c       	mov	r12,r5
80008352:	d8 32       	popm	r0-r7,pc

80008354 <__multiply>:
80008354:	d4 31       	pushm	r0-r7,lr
80008356:	20 2d       	sub	sp,8
80008358:	76 49       	ld.w	r9,r11[0x10]
8000835a:	74 48       	ld.w	r8,r10[0x10]
8000835c:	16 96       	mov	r6,r11
8000835e:	14 95       	mov	r5,r10
80008360:	10 39       	cp.w	r9,r8
80008362:	ec 08 17 50 	movlt	r8,r6
80008366:	ea 06 17 50 	movlt	r6,r5
8000836a:	f0 05 17 50 	movlt	r5,r8
8000836e:	6c 28       	ld.w	r8,r6[0x8]
80008370:	76 43       	ld.w	r3,r11[0x10]
80008372:	74 42       	ld.w	r2,r10[0x10]
80008374:	76 1b       	ld.w	r11,r11[0x4]
80008376:	e4 03 00 07 	add	r7,r2,r3
8000837a:	10 37       	cp.w	r7,r8
8000837c:	f7 bb 09 ff 	subgt	r11,-1
80008380:	cb 6e       	rcall	800080ec <_Balloc>
80008382:	ee c4 ff fb 	sub	r4,r7,-5
80008386:	f8 c9 ff ec 	sub	r9,r12,-20
8000838a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000838e:	30 0a       	mov	r10,0
80008390:	12 98       	mov	r8,r9
80008392:	c0 28       	rjmp	80008396 <__multiply+0x42>
80008394:	10 aa       	st.w	r8++,r10
80008396:	08 38       	cp.w	r8,r4
80008398:	cf e3       	brcs	80008394 <__multiply+0x40>
8000839a:	2f b3       	sub	r3,-5
8000839c:	2f b2       	sub	r2,-5
8000839e:	ec 03 00 23 	add	r3,r6,r3<<0x2
800083a2:	ea 02 00 22 	add	r2,r5,r2<<0x2
800083a6:	ec cb ff ec 	sub	r11,r6,-20
800083aa:	50 12       	stdsp	sp[0x4],r2
800083ac:	ea ca ff ec 	sub	r10,r5,-20
800083b0:	c4 48       	rjmp	80008438 <__multiply+0xe4>
800083b2:	94 95       	ld.uh	r5,r10[0x2]
800083b4:	58 05       	cp.w	r5,0
800083b6:	c2 00       	breq	800083f6 <__multiply+0xa2>
800083b8:	12 98       	mov	r8,r9
800083ba:	16 96       	mov	r6,r11
800083bc:	30 0e       	mov	lr,0
800083be:	50 09       	stdsp	sp[0x0],r9
800083c0:	0d 02       	ld.w	r2,r6++
800083c2:	e4 00 16 10 	lsr	r0,r2,0x10
800083c6:	70 01       	ld.w	r1,r8[0x0]
800083c8:	70 09       	ld.w	r9,r8[0x0]
800083ca:	b1 81       	lsr	r1,0x10
800083cc:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800083d0:	e0 05 03 41 	mac	r1,r0,r5
800083d4:	ab 32       	mul	r2,r5
800083d6:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800083da:	00 02       	add	r2,r0
800083dc:	e4 0e 00 0e 	add	lr,r2,lr
800083e0:	b0 1e       	st.h	r8[0x2],lr
800083e2:	b1 8e       	lsr	lr,0x10
800083e4:	1c 01       	add	r1,lr
800083e6:	b0 01       	st.h	r8[0x0],r1
800083e8:	e2 0e 16 10 	lsr	lr,r1,0x10
800083ec:	2f c8       	sub	r8,-4
800083ee:	06 36       	cp.w	r6,r3
800083f0:	ce 83       	brcs	800083c0 <__multiply+0x6c>
800083f2:	40 09       	lddsp	r9,sp[0x0]
800083f4:	91 0e       	st.w	r8[0x0],lr
800083f6:	94 86       	ld.uh	r6,r10[0x0]
800083f8:	58 06       	cp.w	r6,0
800083fa:	c1 d0       	breq	80008434 <__multiply+0xe0>
800083fc:	72 02       	ld.w	r2,r9[0x0]
800083fe:	12 98       	mov	r8,r9
80008400:	16 9e       	mov	lr,r11
80008402:	30 05       	mov	r5,0
80008404:	b0 12       	st.h	r8[0x2],r2
80008406:	1d 01       	ld.w	r1,lr++
80008408:	90 82       	ld.uh	r2,r8[0x0]
8000840a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000840e:	ad 30       	mul	r0,r6
80008410:	e0 02 00 02 	add	r2,r0,r2
80008414:	e4 05 00 05 	add	r5,r2,r5
80008418:	b0 05       	st.h	r8[0x0],r5
8000841a:	b1 85       	lsr	r5,0x10
8000841c:	b1 81       	lsr	r1,0x10
8000841e:	2f c8       	sub	r8,-4
80008420:	ad 31       	mul	r1,r6
80008422:	90 92       	ld.uh	r2,r8[0x2]
80008424:	e2 02 00 02 	add	r2,r1,r2
80008428:	0a 02       	add	r2,r5
8000842a:	e4 05 16 10 	lsr	r5,r2,0x10
8000842e:	06 3e       	cp.w	lr,r3
80008430:	ce a3       	brcs	80008404 <__multiply+0xb0>
80008432:	91 02       	st.w	r8[0x0],r2
80008434:	2f ca       	sub	r10,-4
80008436:	2f c9       	sub	r9,-4
80008438:	40 18       	lddsp	r8,sp[0x4]
8000843a:	10 3a       	cp.w	r10,r8
8000843c:	cb b3       	brcs	800083b2 <__multiply+0x5e>
8000843e:	c0 28       	rjmp	80008442 <__multiply+0xee>
80008440:	20 17       	sub	r7,1
80008442:	58 07       	cp.w	r7,0
80008444:	e0 8a 00 05 	brle	8000844e <__multiply+0xfa>
80008448:	09 48       	ld.w	r8,--r4
8000844a:	58 08       	cp.w	r8,0
8000844c:	cf a0       	breq	80008440 <__multiply+0xec>
8000844e:	99 47       	st.w	r12[0x10],r7
80008450:	2f ed       	sub	sp,-8
80008452:	d8 32       	popm	r0-r7,pc

80008454 <__i2b>:
80008454:	d4 21       	pushm	r4-r7,lr
80008456:	16 97       	mov	r7,r11
80008458:	30 1b       	mov	r11,1
8000845a:	c4 9e       	rcall	800080ec <_Balloc>
8000845c:	30 19       	mov	r9,1
8000845e:	99 57       	st.w	r12[0x14],r7
80008460:	99 49       	st.w	r12[0x10],r9
80008462:	d8 22       	popm	r4-r7,pc

80008464 <__multadd>:
80008464:	d4 31       	pushm	r0-r7,lr
80008466:	30 08       	mov	r8,0
80008468:	12 95       	mov	r5,r9
8000846a:	16 97       	mov	r7,r11
8000846c:	18 96       	mov	r6,r12
8000846e:	76 44       	ld.w	r4,r11[0x10]
80008470:	f6 c9 ff ec 	sub	r9,r11,-20
80008474:	72 0b       	ld.w	r11,r9[0x0]
80008476:	f6 0c 16 10 	lsr	r12,r11,0x10
8000847a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000847e:	f4 0c 02 4c 	mul	r12,r10,r12
80008482:	f4 0b 03 45 	mac	r5,r10,r11
80008486:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000848a:	b1 85       	lsr	r5,0x10
8000848c:	18 05       	add	r5,r12
8000848e:	ea 0c 15 10 	lsl	r12,r5,0x10
80008492:	f8 0b 00 0b 	add	r11,r12,r11
80008496:	12 ab       	st.w	r9++,r11
80008498:	2f f8       	sub	r8,-1
8000849a:	b1 85       	lsr	r5,0x10
8000849c:	08 38       	cp.w	r8,r4
8000849e:	ce b5       	brlt	80008474 <__multadd+0x10>
800084a0:	58 05       	cp.w	r5,0
800084a2:	c1 c0       	breq	800084da <__multadd+0x76>
800084a4:	6e 28       	ld.w	r8,r7[0x8]
800084a6:	10 34       	cp.w	r4,r8
800084a8:	c1 35       	brlt	800084ce <__multadd+0x6a>
800084aa:	6e 1b       	ld.w	r11,r7[0x4]
800084ac:	0c 9c       	mov	r12,r6
800084ae:	2f fb       	sub	r11,-1
800084b0:	c1 ee       	rcall	800080ec <_Balloc>
800084b2:	6e 4a       	ld.w	r10,r7[0x10]
800084b4:	ee cb ff f4 	sub	r11,r7,-12
800084b8:	18 93       	mov	r3,r12
800084ba:	2f ea       	sub	r10,-2
800084bc:	2f 4c       	sub	r12,-12
800084be:	a3 6a       	lsl	r10,0x2
800084c0:	fe b0 dd 30 	rcall	80003f20 <memcpy>
800084c4:	0e 9b       	mov	r11,r7
800084c6:	0c 9c       	mov	r12,r6
800084c8:	fe b0 fd f8 	rcall	800080b8 <_Bfree>
800084cc:	06 97       	mov	r7,r3
800084ce:	e8 c8 ff ff 	sub	r8,r4,-1
800084d2:	2f b4       	sub	r4,-5
800084d4:	8f 48       	st.w	r7[0x10],r8
800084d6:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800084da:	0e 9c       	mov	r12,r7
800084dc:	d8 32       	popm	r0-r7,pc
800084de:	d7 03       	nop

800084e0 <__pow5mult>:
800084e0:	d4 31       	pushm	r0-r7,lr
800084e2:	14 96       	mov	r6,r10
800084e4:	18 97       	mov	r7,r12
800084e6:	16 94       	mov	r4,r11
800084e8:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800084ec:	c0 80       	breq	800084fc <__pow5mult+0x1c>
800084ee:	20 18       	sub	r8,1
800084f0:	49 f9       	lddpc	r9,8000856c <__pow5mult+0x8c>
800084f2:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800084f6:	30 09       	mov	r9,0
800084f8:	cb 6f       	rcall	80008464 <__multadd>
800084fa:	18 94       	mov	r4,r12
800084fc:	a3 46       	asr	r6,0x2
800084fe:	c3 40       	breq	80008566 <__pow5mult+0x86>
80008500:	6e 95       	ld.w	r5,r7[0x24]
80008502:	58 05       	cp.w	r5,0
80008504:	c0 91       	brne	80008516 <__pow5mult+0x36>
80008506:	31 0c       	mov	r12,16
80008508:	fe b0 fa fe 	rcall	80007b04 <malloc>
8000850c:	99 35       	st.w	r12[0xc],r5
8000850e:	8f 9c       	st.w	r7[0x24],r12
80008510:	99 15       	st.w	r12[0x4],r5
80008512:	99 25       	st.w	r12[0x8],r5
80008514:	99 05       	st.w	r12[0x0],r5
80008516:	6e 93       	ld.w	r3,r7[0x24]
80008518:	66 25       	ld.w	r5,r3[0x8]
8000851a:	58 05       	cp.w	r5,0
8000851c:	c0 c1       	brne	80008534 <__pow5mult+0x54>
8000851e:	e0 6b 02 71 	mov	r11,625
80008522:	0e 9c       	mov	r12,r7
80008524:	c9 8f       	rcall	80008454 <__i2b>
80008526:	87 2c       	st.w	r3[0x8],r12
80008528:	30 08       	mov	r8,0
8000852a:	18 95       	mov	r5,r12
8000852c:	99 08       	st.w	r12[0x0],r8
8000852e:	c0 38       	rjmp	80008534 <__pow5mult+0x54>
80008530:	06 9c       	mov	r12,r3
80008532:	18 95       	mov	r5,r12
80008534:	ed b6 00 00 	bld	r6,0x0
80008538:	c0 b1       	brne	8000854e <__pow5mult+0x6e>
8000853a:	08 9b       	mov	r11,r4
8000853c:	0a 9a       	mov	r10,r5
8000853e:	0e 9c       	mov	r12,r7
80008540:	c0 af       	rcall	80008354 <__multiply>
80008542:	08 9b       	mov	r11,r4
80008544:	18 93       	mov	r3,r12
80008546:	0e 9c       	mov	r12,r7
80008548:	06 94       	mov	r4,r3
8000854a:	fe b0 fd b7 	rcall	800080b8 <_Bfree>
8000854e:	a1 56       	asr	r6,0x1
80008550:	c0 b0       	breq	80008566 <__pow5mult+0x86>
80008552:	6a 03       	ld.w	r3,r5[0x0]
80008554:	58 03       	cp.w	r3,0
80008556:	ce d1       	brne	80008530 <__pow5mult+0x50>
80008558:	0a 9a       	mov	r10,r5
8000855a:	0a 9b       	mov	r11,r5
8000855c:	0e 9c       	mov	r12,r7
8000855e:	cf be       	rcall	80008354 <__multiply>
80008560:	8b 0c       	st.w	r5[0x0],r12
80008562:	99 03       	st.w	r12[0x0],r3
80008564:	ce 7b       	rjmp	80008532 <__pow5mult+0x52>
80008566:	08 9c       	mov	r12,r4
80008568:	d8 32       	popm	r0-r7,pc
8000856a:	d7 03       	nop
8000856c:	80 00       	ld.sh	r0,r0[0x0]
8000856e:	a4 bc       	st.b	r2[0x3],r12

80008570 <_realloc_r>:
80008570:	d4 31       	pushm	r0-r7,lr
80008572:	20 1d       	sub	sp,4
80008574:	16 94       	mov	r4,r11
80008576:	18 92       	mov	r2,r12
80008578:	14 9b       	mov	r11,r10
8000857a:	58 04       	cp.w	r4,0
8000857c:	c0 51       	brne	80008586 <_realloc_r+0x16>
8000857e:	fe b0 fa cb 	rcall	80007b14 <_malloc_r>
80008582:	18 95       	mov	r5,r12
80008584:	c5 59       	rjmp	8000882e <_realloc_r+0x2be>
80008586:	50 0a       	stdsp	sp[0x0],r10
80008588:	fe b0 fd 06 	rcall	80007f94 <__malloc_lock>
8000858c:	40 0b       	lddsp	r11,sp[0x0]
8000858e:	f6 c8 ff f5 	sub	r8,r11,-11
80008592:	e8 c1 00 08 	sub	r1,r4,8
80008596:	10 96       	mov	r6,r8
80008598:	62 1c       	ld.w	r12,r1[0x4]
8000859a:	e0 16 ff f8 	andl	r6,0xfff8
8000859e:	59 68       	cp.w	r8,22
800085a0:	f9 b6 08 10 	movls	r6,16
800085a4:	16 36       	cp.w	r6,r11
800085a6:	5f 38       	srlo	r8
800085a8:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800085ac:	c0 50       	breq	800085b6 <_realloc_r+0x46>
800085ae:	30 c8       	mov	r8,12
800085b0:	30 05       	mov	r5,0
800085b2:	85 38       	st.w	r2[0xc],r8
800085b4:	c3 d9       	rjmp	8000882e <_realloc_r+0x2be>
800085b6:	18 90       	mov	r0,r12
800085b8:	e0 10 ff fc 	andl	r0,0xfffc
800085bc:	0c 30       	cp.w	r0,r6
800085be:	e0 84 01 0d 	brge	800087d8 <_realloc_r+0x268>
800085c2:	4c a8       	lddpc	r8,800086e8 <_realloc_r+0x178>
800085c4:	e2 00 00 09 	add	r9,r1,r0
800085c8:	70 25       	ld.w	r5,r8[0x8]
800085ca:	0a 39       	cp.w	r9,r5
800085cc:	c0 90       	breq	800085de <_realloc_r+0x6e>
800085ce:	72 1a       	ld.w	r10,r9[0x4]
800085d0:	a1 ca       	cbr	r10,0x0
800085d2:	f2 0a 00 0a 	add	r10,r9,r10
800085d6:	74 1a       	ld.w	r10,r10[0x4]
800085d8:	ed ba 00 00 	bld	r10,0x0
800085dc:	c2 20       	breq	80008620 <_realloc_r+0xb0>
800085de:	72 1a       	ld.w	r10,r9[0x4]
800085e0:	e0 1a ff fc 	andl	r10,0xfffc
800085e4:	f4 00 00 03 	add	r3,r10,r0
800085e8:	0a 39       	cp.w	r9,r5
800085ea:	c1 31       	brne	80008610 <_realloc_r+0xa0>
800085ec:	ec c7 ff f0 	sub	r7,r6,-16
800085f0:	0e 33       	cp.w	r3,r7
800085f2:	c1 95       	brlt	80008624 <_realloc_r+0xb4>
800085f4:	e2 06 00 09 	add	r9,r1,r6
800085f8:	0c 13       	sub	r3,r6
800085fa:	a1 a3       	sbr	r3,0x0
800085fc:	93 13       	st.w	r9[0x4],r3
800085fe:	91 29       	st.w	r8[0x8],r9
80008600:	04 9c       	mov	r12,r2
80008602:	62 18       	ld.w	r8,r1[0x4]
80008604:	08 95       	mov	r5,r4
80008606:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000860a:	10 46       	or	r6,r8
8000860c:	83 16       	st.w	r1[0x4],r6
8000860e:	c0 e9       	rjmp	8000882a <_realloc_r+0x2ba>
80008610:	0c 33       	cp.w	r3,r6
80008612:	c0 95       	brlt	80008624 <_realloc_r+0xb4>
80008614:	72 28       	ld.w	r8,r9[0x8]
80008616:	02 97       	mov	r7,r1
80008618:	72 39       	ld.w	r9,r9[0xc]
8000861a:	93 28       	st.w	r9[0x8],r8
8000861c:	91 39       	st.w	r8[0xc],r9
8000861e:	cd f8       	rjmp	800087dc <_realloc_r+0x26c>
80008620:	30 0a       	mov	r10,0
80008622:	14 99       	mov	r9,r10
80008624:	ed bc 00 00 	bld	r12,0x0
80008628:	e0 80 00 98 	breq	80008758 <_realloc_r+0x1e8>
8000862c:	62 07       	ld.w	r7,r1[0x0]
8000862e:	e2 07 01 07 	sub	r7,r1,r7
80008632:	6e 1c       	ld.w	r12,r7[0x4]
80008634:	e0 1c ff fc 	andl	r12,0xfffc
80008638:	58 09       	cp.w	r9,0
8000863a:	c5 90       	breq	800086ec <_realloc_r+0x17c>
8000863c:	f8 00 00 03 	add	r3,r12,r0
80008640:	0a 39       	cp.w	r9,r5
80008642:	c4 81       	brne	800086d2 <_realloc_r+0x162>
80008644:	14 03       	add	r3,r10
80008646:	ec c9 ff f0 	sub	r9,r6,-16
8000864a:	12 33       	cp.w	r3,r9
8000864c:	c5 05       	brlt	800086ec <_realloc_r+0x17c>
8000864e:	6e 3a       	ld.w	r10,r7[0xc]
80008650:	6e 29       	ld.w	r9,r7[0x8]
80008652:	95 29       	st.w	r10[0x8],r9
80008654:	93 3a       	st.w	r9[0xc],r10
80008656:	ee c5 ff f8 	sub	r5,r7,-8
8000865a:	e0 ca 00 04 	sub	r10,r0,4
8000865e:	e0 4a 00 24 	cp.w	r10,36
80008662:	e0 8b 00 25 	brhi	800086ac <_realloc_r+0x13c>
80008666:	0a 99       	mov	r9,r5
80008668:	59 3a       	cp.w	r10,19
8000866a:	e0 88 00 1a 	brls	8000869e <_realloc_r+0x12e>
8000866e:	09 09       	ld.w	r9,r4++
80008670:	8b 09       	st.w	r5[0x0],r9
80008672:	09 09       	ld.w	r9,r4++
80008674:	8f 39       	st.w	r7[0xc],r9
80008676:	ee c9 ff f0 	sub	r9,r7,-16
8000867a:	59 ba       	cp.w	r10,27
8000867c:	e0 88 00 11 	brls	8000869e <_realloc_r+0x12e>
80008680:	09 0b       	ld.w	r11,r4++
80008682:	93 0b       	st.w	r9[0x0],r11
80008684:	09 09       	ld.w	r9,r4++
80008686:	8f 59       	st.w	r7[0x14],r9
80008688:	ee c9 ff e8 	sub	r9,r7,-24
8000868c:	e0 4a 00 24 	cp.w	r10,36
80008690:	c0 71       	brne	8000869e <_realloc_r+0x12e>
80008692:	09 0a       	ld.w	r10,r4++
80008694:	93 0a       	st.w	r9[0x0],r10
80008696:	ee c9 ff e0 	sub	r9,r7,-32
8000869a:	09 0a       	ld.w	r10,r4++
8000869c:	8f 7a       	st.w	r7[0x1c],r10
8000869e:	09 0a       	ld.w	r10,r4++
800086a0:	12 aa       	st.w	r9++,r10
800086a2:	68 0a       	ld.w	r10,r4[0x0]
800086a4:	93 0a       	st.w	r9[0x0],r10
800086a6:	68 1a       	ld.w	r10,r4[0x4]
800086a8:	93 1a       	st.w	r9[0x4],r10
800086aa:	c0 78       	rjmp	800086b8 <_realloc_r+0x148>
800086ac:	50 08       	stdsp	sp[0x0],r8
800086ae:	08 9b       	mov	r11,r4
800086b0:	0a 9c       	mov	r12,r5
800086b2:	fe b0 fc 52 	rcall	80007f56 <memmove>
800086b6:	40 08       	lddsp	r8,sp[0x0]
800086b8:	ee 06 00 09 	add	r9,r7,r6
800086bc:	0c 13       	sub	r3,r6
800086be:	a1 a3       	sbr	r3,0x0
800086c0:	93 13       	st.w	r9[0x4],r3
800086c2:	91 29       	st.w	r8[0x8],r9
800086c4:	04 9c       	mov	r12,r2
800086c6:	6e 18       	ld.w	r8,r7[0x4]
800086c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800086cc:	10 46       	or	r6,r8
800086ce:	8f 16       	st.w	r7[0x4],r6
800086d0:	ca d8       	rjmp	8000882a <_realloc_r+0x2ba>
800086d2:	14 03       	add	r3,r10
800086d4:	0c 33       	cp.w	r3,r6
800086d6:	c0 b5       	brlt	800086ec <_realloc_r+0x17c>
800086d8:	72 28       	ld.w	r8,r9[0x8]
800086da:	72 39       	ld.w	r9,r9[0xc]
800086dc:	93 28       	st.w	r9[0x8],r8
800086de:	91 39       	st.w	r8[0xc],r9
800086e0:	6e 28       	ld.w	r8,r7[0x8]
800086e2:	6e 39       	ld.w	r9,r7[0xc]
800086e4:	c0 a8       	rjmp	800086f8 <_realloc_r+0x188>
800086e6:	d7 03       	nop
800086e8:	00 00       	add	r0,r0
800086ea:	01 00       	ld.w	r0,r0++
800086ec:	f8 00 00 03 	add	r3,r12,r0
800086f0:	0c 33       	cp.w	r3,r6
800086f2:	c3 35       	brlt	80008758 <_realloc_r+0x1e8>
800086f4:	6e 39       	ld.w	r9,r7[0xc]
800086f6:	6e 28       	ld.w	r8,r7[0x8]
800086f8:	93 28       	st.w	r9[0x8],r8
800086fa:	91 39       	st.w	r8[0xc],r9
800086fc:	e0 ca 00 04 	sub	r10,r0,4
80008700:	ee cc ff f8 	sub	r12,r7,-8
80008704:	e0 4a 00 24 	cp.w	r10,36
80008708:	e0 8b 00 24 	brhi	80008750 <_realloc_r+0x1e0>
8000870c:	59 3a       	cp.w	r10,19
8000870e:	e0 88 00 1a 	brls	80008742 <_realloc_r+0x1d2>
80008712:	09 08       	ld.w	r8,r4++
80008714:	99 08       	st.w	r12[0x0],r8
80008716:	09 08       	ld.w	r8,r4++
80008718:	8f 38       	st.w	r7[0xc],r8
8000871a:	ee cc ff f0 	sub	r12,r7,-16
8000871e:	59 ba       	cp.w	r10,27
80008720:	e0 88 00 11 	brls	80008742 <_realloc_r+0x1d2>
80008724:	09 08       	ld.w	r8,r4++
80008726:	99 08       	st.w	r12[0x0],r8
80008728:	09 08       	ld.w	r8,r4++
8000872a:	8f 58       	st.w	r7[0x14],r8
8000872c:	ee cc ff e8 	sub	r12,r7,-24
80008730:	e0 4a 00 24 	cp.w	r10,36
80008734:	c0 71       	brne	80008742 <_realloc_r+0x1d2>
80008736:	09 08       	ld.w	r8,r4++
80008738:	99 08       	st.w	r12[0x0],r8
8000873a:	ee cc ff e0 	sub	r12,r7,-32
8000873e:	09 08       	ld.w	r8,r4++
80008740:	8f 78       	st.w	r7[0x1c],r8
80008742:	09 08       	ld.w	r8,r4++
80008744:	18 a8       	st.w	r12++,r8
80008746:	68 08       	ld.w	r8,r4[0x0]
80008748:	99 08       	st.w	r12[0x0],r8
8000874a:	68 18       	ld.w	r8,r4[0x4]
8000874c:	99 18       	st.w	r12[0x4],r8
8000874e:	c4 78       	rjmp	800087dc <_realloc_r+0x26c>
80008750:	08 9b       	mov	r11,r4
80008752:	fe b0 fc 02 	rcall	80007f56 <memmove>
80008756:	c4 38       	rjmp	800087dc <_realloc_r+0x26c>
80008758:	04 9c       	mov	r12,r2
8000875a:	fe b0 f9 dd 	rcall	80007b14 <_malloc_r>
8000875e:	18 95       	mov	r5,r12
80008760:	c3 a0       	breq	800087d4 <_realloc_r+0x264>
80008762:	62 18       	ld.w	r8,r1[0x4]
80008764:	f8 c9 00 08 	sub	r9,r12,8
80008768:	a1 c8       	cbr	r8,0x0
8000876a:	e2 08 00 08 	add	r8,r1,r8
8000876e:	10 39       	cp.w	r9,r8
80008770:	c0 71       	brne	8000877e <_realloc_r+0x20e>
80008772:	72 13       	ld.w	r3,r9[0x4]
80008774:	02 97       	mov	r7,r1
80008776:	e0 13 ff fc 	andl	r3,0xfffc
8000877a:	00 03       	add	r3,r0
8000877c:	c3 08       	rjmp	800087dc <_realloc_r+0x26c>
8000877e:	e0 ca 00 04 	sub	r10,r0,4
80008782:	e0 4a 00 24 	cp.w	r10,36
80008786:	e0 8b 00 20 	brhi	800087c6 <_realloc_r+0x256>
8000878a:	08 99       	mov	r9,r4
8000878c:	18 98       	mov	r8,r12
8000878e:	59 3a       	cp.w	r10,19
80008790:	e0 88 00 14 	brls	800087b8 <_realloc_r+0x248>
80008794:	13 0b       	ld.w	r11,r9++
80008796:	10 ab       	st.w	r8++,r11
80008798:	13 0b       	ld.w	r11,r9++
8000879a:	10 ab       	st.w	r8++,r11
8000879c:	59 ba       	cp.w	r10,27
8000879e:	e0 88 00 0d 	brls	800087b8 <_realloc_r+0x248>
800087a2:	13 0b       	ld.w	r11,r9++
800087a4:	10 ab       	st.w	r8++,r11
800087a6:	13 0b       	ld.w	r11,r9++
800087a8:	10 ab       	st.w	r8++,r11
800087aa:	e0 4a 00 24 	cp.w	r10,36
800087ae:	c0 51       	brne	800087b8 <_realloc_r+0x248>
800087b0:	13 0a       	ld.w	r10,r9++
800087b2:	10 aa       	st.w	r8++,r10
800087b4:	13 0a       	ld.w	r10,r9++
800087b6:	10 aa       	st.w	r8++,r10
800087b8:	13 0a       	ld.w	r10,r9++
800087ba:	10 aa       	st.w	r8++,r10
800087bc:	72 0a       	ld.w	r10,r9[0x0]
800087be:	91 0a       	st.w	r8[0x0],r10
800087c0:	72 19       	ld.w	r9,r9[0x4]
800087c2:	91 19       	st.w	r8[0x4],r9
800087c4:	c0 48       	rjmp	800087cc <_realloc_r+0x25c>
800087c6:	08 9b       	mov	r11,r4
800087c8:	fe b0 fb c7 	rcall	80007f56 <memmove>
800087cc:	08 9b       	mov	r11,r4
800087ce:	04 9c       	mov	r12,r2
800087d0:	fe b0 f6 fa 	rcall	800075c4 <_free_r>
800087d4:	04 9c       	mov	r12,r2
800087d6:	c2 a8       	rjmp	8000882a <_realloc_r+0x2ba>
800087d8:	00 93       	mov	r3,r0
800087da:	02 97       	mov	r7,r1
800087dc:	e6 06 01 09 	sub	r9,r3,r6
800087e0:	6e 18       	ld.w	r8,r7[0x4]
800087e2:	58 f9       	cp.w	r9,15
800087e4:	e0 88 00 16 	brls	80008810 <_realloc_r+0x2a0>
800087e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800087ec:	ed e8 10 08 	or	r8,r6,r8
800087f0:	8f 18       	st.w	r7[0x4],r8
800087f2:	12 98       	mov	r8,r9
800087f4:	a1 a8       	sbr	r8,0x0
800087f6:	ee 06 00 0b 	add	r11,r7,r6
800087fa:	f6 09 00 09 	add	r9,r11,r9
800087fe:	97 18       	st.w	r11[0x4],r8
80008800:	72 18       	ld.w	r8,r9[0x4]
80008802:	a1 a8       	sbr	r8,0x0
80008804:	2f 8b       	sub	r11,-8
80008806:	93 18       	st.w	r9[0x4],r8
80008808:	04 9c       	mov	r12,r2
8000880a:	fe b0 f6 dd 	rcall	800075c4 <_free_r>
8000880e:	c0 b8       	rjmp	80008824 <_realloc_r+0x2b4>
80008810:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008814:	e7 e8 10 08 	or	r8,r3,r8
80008818:	8f 18       	st.w	r7[0x4],r8
8000881a:	ee 03 00 03 	add	r3,r7,r3
8000881e:	66 18       	ld.w	r8,r3[0x4]
80008820:	a1 a8       	sbr	r8,0x0
80008822:	87 18       	st.w	r3[0x4],r8
80008824:	04 9c       	mov	r12,r2
80008826:	ee c5 ff f8 	sub	r5,r7,-8
8000882a:	fe b0 fb b6 	rcall	80007f96 <__malloc_unlock>
8000882e:	0a 9c       	mov	r12,r5
80008830:	2f fd       	sub	sp,-4
80008832:	d8 32       	popm	r0-r7,pc

80008834 <__isinfd>:
80008834:	14 98       	mov	r8,r10
80008836:	fc 19 7f f0 	movh	r9,0x7ff0
8000883a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000883e:	f0 0b 11 00 	rsub	r11,r8,0
80008842:	f7 e8 10 08 	or	r8,r11,r8
80008846:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000884a:	f2 08 01 08 	sub	r8,r9,r8
8000884e:	f0 0c 11 00 	rsub	r12,r8,0
80008852:	f9 e8 10 08 	or	r8,r12,r8
80008856:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000885a:	2f fc       	sub	r12,-1
8000885c:	5e fc       	retal	r12

8000885e <__isnand>:
8000885e:	14 98       	mov	r8,r10
80008860:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008864:	f0 0c 11 00 	rsub	r12,r8,0
80008868:	10 4c       	or	r12,r8
8000886a:	fc 18 7f f0 	movh	r8,0x7ff0
8000886e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008872:	f0 0c 01 0c 	sub	r12,r8,r12
80008876:	bf 9c       	lsr	r12,0x1f
80008878:	5e fc       	retal	r12
8000887a:	d7 03       	nop

8000887c <_sbrk_r>:
8000887c:	d4 21       	pushm	r4-r7,lr
8000887e:	30 08       	mov	r8,0
80008880:	18 97       	mov	r7,r12
80008882:	48 66       	lddpc	r6,80008898 <_sbrk_r+0x1c>
80008884:	16 9c       	mov	r12,r11
80008886:	8d 08       	st.w	r6[0x0],r8
80008888:	cb 0c       	rcall	800089e8 <_sbrk>
8000888a:	5b fc       	cp.w	r12,-1
8000888c:	c0 51       	brne	80008896 <_sbrk_r+0x1a>
8000888e:	6c 08       	ld.w	r8,r6[0x0]
80008890:	58 08       	cp.w	r8,0
80008892:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008896:	d8 22       	popm	r4-r7,pc
80008898:	00 00       	add	r0,r0
8000889a:	70 a0       	ld.w	r0,r8[0x28]

8000889c <__sclose>:
8000889c:	d4 01       	pushm	lr
8000889e:	96 7b       	ld.sh	r11,r11[0xe]
800088a0:	c0 2d       	rcall	80008aa4 <_close_r>
800088a2:	d8 02       	popm	pc

800088a4 <__sseek>:
800088a4:	d4 21       	pushm	r4-r7,lr
800088a6:	16 97       	mov	r7,r11
800088a8:	96 7b       	ld.sh	r11,r11[0xe]
800088aa:	c8 bd       	rcall	80008bc0 <_lseek_r>
800088ac:	8e 68       	ld.sh	r8,r7[0xc]
800088ae:	10 99       	mov	r9,r8
800088b0:	ad c8       	cbr	r8,0xc
800088b2:	ad a9       	sbr	r9,0xc
800088b4:	5b fc       	cp.w	r12,-1
800088b6:	ef f8 0c 06 	st.heq	r7[0xc],r8
800088ba:	ef f9 1c 06 	st.hne	r7[0xc],r9
800088be:	ef fc 1a 15 	st.wne	r7[0x54],r12
800088c2:	d8 22       	popm	r4-r7,pc

800088c4 <__swrite>:
800088c4:	d4 21       	pushm	r4-r7,lr
800088c6:	96 68       	ld.sh	r8,r11[0xc]
800088c8:	16 97       	mov	r7,r11
800088ca:	14 95       	mov	r5,r10
800088cc:	12 94       	mov	r4,r9
800088ce:	e2 18 01 00 	andl	r8,0x100,COH
800088d2:	18 96       	mov	r6,r12
800088d4:	c0 50       	breq	800088de <__swrite+0x1a>
800088d6:	30 29       	mov	r9,2
800088d8:	30 0a       	mov	r10,0
800088da:	96 7b       	ld.sh	r11,r11[0xe]
800088dc:	c7 2d       	rcall	80008bc0 <_lseek_r>
800088de:	8e 68       	ld.sh	r8,r7[0xc]
800088e0:	ad c8       	cbr	r8,0xc
800088e2:	08 99       	mov	r9,r4
800088e4:	0a 9a       	mov	r10,r5
800088e6:	8e 7b       	ld.sh	r11,r7[0xe]
800088e8:	0c 9c       	mov	r12,r6
800088ea:	ae 68       	st.h	r7[0xc],r8
800088ec:	c9 cc       	rcall	80008a24 <_write_r>
800088ee:	d8 22       	popm	r4-r7,pc

800088f0 <__sread>:
800088f0:	d4 21       	pushm	r4-r7,lr
800088f2:	16 97       	mov	r7,r11
800088f4:	96 7b       	ld.sh	r11,r11[0xe]
800088f6:	c7 9d       	rcall	80008be8 <_read_r>
800088f8:	c0 65       	brlt	80008904 <__sread+0x14>
800088fa:	6f 58       	ld.w	r8,r7[0x54]
800088fc:	18 08       	add	r8,r12
800088fe:	ef 48 00 54 	st.w	r7[84],r8
80008902:	d8 22       	popm	r4-r7,pc
80008904:	8e 68       	ld.sh	r8,r7[0xc]
80008906:	ad c8       	cbr	r8,0xc
80008908:	ae 68       	st.h	r7[0xc],r8
8000890a:	d8 22       	popm	r4-r7,pc

8000890c <_close>:
8000890c:	30 28       	mov	r8,2
8000890e:	d6 73       	breakpoint
80008910:	3f fc       	mov	r12,-1
80008912:	35 8b       	mov	r11,88
80008914:	58 0c       	cp.w	r12,0
80008916:	5e 4c       	retge	r12
80008918:	48 2a       	lddpc	r10,80008920 <_close+0x14>
8000891a:	95 0b       	st.w	r10[0x0],r11
8000891c:	5e fc       	retal	r12
8000891e:	d7 03       	nop
80008920:	00 00       	add	r0,r0
80008922:	70 a0       	ld.w	r0,r8[0x28]

80008924 <_lseek>:
80008924:	30 58       	mov	r8,5
80008926:	d6 73       	breakpoint
80008928:	3f fc       	mov	r12,-1
8000892a:	35 8b       	mov	r11,88
8000892c:	58 0c       	cp.w	r12,0
8000892e:	5e 4c       	retge	r12
80008930:	48 2a       	lddpc	r10,80008938 <_lseek+0x14>
80008932:	95 0b       	st.w	r10[0x0],r11
80008934:	5e fc       	retal	r12
80008936:	d7 03       	nop
80008938:	00 00       	add	r0,r0
8000893a:	70 a0       	ld.w	r0,r8[0x28]

8000893c <_read>:
8000893c:	30 38       	mov	r8,3
8000893e:	d6 73       	breakpoint
80008940:	3f fc       	mov	r12,-1
80008942:	35 8b       	mov	r11,88
80008944:	58 0c       	cp.w	r12,0
80008946:	5e 4c       	retge	r12
80008948:	48 2a       	lddpc	r10,80008950 <_read+0x14>
8000894a:	95 0b       	st.w	r10[0x0],r11
8000894c:	5e fc       	retal	r12
8000894e:	d7 03       	nop
80008950:	00 00       	add	r0,r0
80008952:	70 a0       	ld.w	r0,r8[0x28]

80008954 <_write>:
80008954:	30 48       	mov	r8,4
80008956:	d6 73       	breakpoint
80008958:	3f fc       	mov	r12,-1
8000895a:	35 8b       	mov	r11,88
8000895c:	58 0c       	cp.w	r12,0
8000895e:	5e 4c       	retge	r12
80008960:	48 2a       	lddpc	r10,80008968 <_write+0x14>
80008962:	95 0b       	st.w	r10[0x0],r11
80008964:	5e fc       	retal	r12
80008966:	d7 03       	nop
80008968:	00 00       	add	r0,r0
8000896a:	70 a0       	ld.w	r0,r8[0x28]

8000896c <isatty>:
8000896c:	30 b8       	mov	r8,11
8000896e:	d6 73       	breakpoint
80008970:	3f fc       	mov	r12,-1
80008972:	35 8b       	mov	r11,88
80008974:	58 0c       	cp.w	r12,0
80008976:	5e 4c       	retge	r12
80008978:	48 2a       	lddpc	r10,80008980 <isatty+0x14>
8000897a:	95 0b       	st.w	r10[0x0],r11
8000897c:	5e fc       	retal	r12
8000897e:	d7 03       	nop
80008980:	00 00       	add	r0,r0
80008982:	70 a0       	ld.w	r0,r8[0x28]

80008984 <_fstat_host>:
80008984:	30 98       	mov	r8,9
80008986:	d6 73       	breakpoint
80008988:	3f fc       	mov	r12,-1
8000898a:	35 8b       	mov	r11,88
8000898c:	58 0c       	cp.w	r12,0
8000898e:	5e 4c       	retge	r12
80008990:	48 2a       	lddpc	r10,80008998 <_fstat_host+0x14>
80008992:	95 0b       	st.w	r10[0x0],r11
80008994:	5e fc       	retal	r12
80008996:	d7 03       	nop
80008998:	00 00       	add	r0,r0
8000899a:	70 a0       	ld.w	r0,r8[0x28]

8000899c <_fstat>:
8000899c:	d4 21       	pushm	r4-r7,lr
8000899e:	21 0d       	sub	sp,64
800089a0:	16 97       	mov	r7,r11
800089a2:	1a 9b       	mov	r11,sp
800089a4:	cf 0f       	rcall	80008984 <_fstat_host>
800089a6:	c0 34       	brge	800089ac <_fstat+0x10>
800089a8:	3f fc       	mov	r12,-1
800089aa:	c1 c8       	rjmp	800089e2 <_fstat+0x46>
800089ac:	40 08       	lddsp	r8,sp[0x0]
800089ae:	ae 08       	st.h	r7[0x0],r8
800089b0:	40 18       	lddsp	r8,sp[0x4]
800089b2:	ae 18       	st.h	r7[0x2],r8
800089b4:	40 28       	lddsp	r8,sp[0x8]
800089b6:	8f 18       	st.w	r7[0x4],r8
800089b8:	40 38       	lddsp	r8,sp[0xc]
800089ba:	ae 48       	st.h	r7[0x8],r8
800089bc:	40 48       	lddsp	r8,sp[0x10]
800089be:	ae 58       	st.h	r7[0xa],r8
800089c0:	40 58       	lddsp	r8,sp[0x14]
800089c2:	ae 68       	st.h	r7[0xc],r8
800089c4:	40 68       	lddsp	r8,sp[0x18]
800089c6:	ae 78       	st.h	r7[0xe],r8
800089c8:	40 88       	lddsp	r8,sp[0x20]
800089ca:	8f 48       	st.w	r7[0x10],r8
800089cc:	40 a8       	lddsp	r8,sp[0x28]
800089ce:	8f b8       	st.w	r7[0x2c],r8
800089d0:	40 c8       	lddsp	r8,sp[0x30]
800089d2:	8f c8       	st.w	r7[0x30],r8
800089d4:	40 d8       	lddsp	r8,sp[0x34]
800089d6:	8f 58       	st.w	r7[0x14],r8
800089d8:	40 e8       	lddsp	r8,sp[0x38]
800089da:	30 0c       	mov	r12,0
800089dc:	8f 78       	st.w	r7[0x1c],r8
800089de:	40 f8       	lddsp	r8,sp[0x3c]
800089e0:	8f 98       	st.w	r7[0x24],r8
800089e2:	2f 0d       	sub	sp,-64
800089e4:	d8 22       	popm	r4-r7,pc
800089e6:	d7 03       	nop

800089e8 <_sbrk>:
800089e8:	d4 01       	pushm	lr
800089ea:	48 c8       	lddpc	r8,80008a18 <_sbrk+0x30>
800089ec:	70 09       	ld.w	r9,r8[0x0]
800089ee:	58 09       	cp.w	r9,0
800089f0:	c0 31       	brne	800089f6 <_sbrk+0xe>
800089f2:	48 b9       	lddpc	r9,80008a1c <_sbrk+0x34>
800089f4:	91 09       	st.w	r8[0x0],r9
800089f6:	48 99       	lddpc	r9,80008a18 <_sbrk+0x30>
800089f8:	48 aa       	lddpc	r10,80008a20 <_sbrk+0x38>
800089fa:	72 08       	ld.w	r8,r9[0x0]
800089fc:	f0 0c 00 0c 	add	r12,r8,r12
80008a00:	14 3c       	cp.w	r12,r10
80008a02:	e0 8b 00 04 	brhi	80008a0a <_sbrk+0x22>
80008a06:	93 0c       	st.w	r9[0x0],r12
80008a08:	c0 58       	rjmp	80008a12 <_sbrk+0x2a>
80008a0a:	c5 dc       	rcall	80008ac4 <__errno>
80008a0c:	30 c8       	mov	r8,12
80008a0e:	99 08       	st.w	r12[0x0],r8
80008a10:	3f f8       	mov	r8,-1
80008a12:	10 9c       	mov	r12,r8
80008a14:	d8 02       	popm	pc
80008a16:	d7 03       	nop
80008a18:	00 00       	add	r0,r0
80008a1a:	06 38       	cp.w	r8,r3
80008a1c:	00 00       	add	r0,r0
80008a1e:	70 a8       	ld.w	r8,r8[0x28]
80008a20:	00 00       	add	r0,r0
80008a22:	f0 00       	*unknown*

80008a24 <_write_r>:
80008a24:	d4 21       	pushm	r4-r7,lr
80008a26:	16 98       	mov	r8,r11
80008a28:	18 97       	mov	r7,r12
80008a2a:	10 9c       	mov	r12,r8
80008a2c:	30 08       	mov	r8,0
80008a2e:	14 9b       	mov	r11,r10
80008a30:	48 66       	lddpc	r6,80008a48 <_write_r+0x24>
80008a32:	12 9a       	mov	r10,r9
80008a34:	8d 08       	st.w	r6[0x0],r8
80008a36:	c8 ff       	rcall	80008954 <_write>
80008a38:	5b fc       	cp.w	r12,-1
80008a3a:	c0 51       	brne	80008a44 <_write_r+0x20>
80008a3c:	6c 08       	ld.w	r8,r6[0x0]
80008a3e:	58 08       	cp.w	r8,0
80008a40:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a44:	d8 22       	popm	r4-r7,pc
80008a46:	d7 03       	nop
80008a48:	00 00       	add	r0,r0
80008a4a:	70 a0       	ld.w	r0,r8[0x28]

80008a4c <_calloc_r>:
80008a4c:	d4 21       	pushm	r4-r7,lr
80008a4e:	f4 0b 02 4b 	mul	r11,r10,r11
80008a52:	fe b0 f8 61 	rcall	80007b14 <_malloc_r>
80008a56:	18 97       	mov	r7,r12
80008a58:	c2 30       	breq	80008a9e <_calloc_r+0x52>
80008a5a:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008a5e:	e0 1a ff fc 	andl	r10,0xfffc
80008a62:	20 4a       	sub	r10,4
80008a64:	e0 4a 00 24 	cp.w	r10,36
80008a68:	e0 8b 00 18 	brhi	80008a98 <_calloc_r+0x4c>
80008a6c:	18 98       	mov	r8,r12
80008a6e:	59 3a       	cp.w	r10,19
80008a70:	e0 88 00 0f 	brls	80008a8e <_calloc_r+0x42>
80008a74:	30 09       	mov	r9,0
80008a76:	10 a9       	st.w	r8++,r9
80008a78:	10 a9       	st.w	r8++,r9
80008a7a:	59 ba       	cp.w	r10,27
80008a7c:	e0 88 00 09 	brls	80008a8e <_calloc_r+0x42>
80008a80:	10 a9       	st.w	r8++,r9
80008a82:	10 a9       	st.w	r8++,r9
80008a84:	e0 4a 00 24 	cp.w	r10,36
80008a88:	c0 31       	brne	80008a8e <_calloc_r+0x42>
80008a8a:	10 a9       	st.w	r8++,r9
80008a8c:	10 a9       	st.w	r8++,r9
80008a8e:	30 09       	mov	r9,0
80008a90:	10 a9       	st.w	r8++,r9
80008a92:	91 19       	st.w	r8[0x4],r9
80008a94:	91 09       	st.w	r8[0x0],r9
80008a96:	c0 48       	rjmp	80008a9e <_calloc_r+0x52>
80008a98:	30 0b       	mov	r11,0
80008a9a:	fe b0 da e7 	rcall	80004068 <memset>
80008a9e:	0e 9c       	mov	r12,r7
80008aa0:	d8 22       	popm	r4-r7,pc
80008aa2:	d7 03       	nop

80008aa4 <_close_r>:
80008aa4:	d4 21       	pushm	r4-r7,lr
80008aa6:	30 08       	mov	r8,0
80008aa8:	18 97       	mov	r7,r12
80008aaa:	48 66       	lddpc	r6,80008ac0 <_close_r+0x1c>
80008aac:	16 9c       	mov	r12,r11
80008aae:	8d 08       	st.w	r6[0x0],r8
80008ab0:	c2 ef       	rcall	8000890c <_close>
80008ab2:	5b fc       	cp.w	r12,-1
80008ab4:	c0 51       	brne	80008abe <_close_r+0x1a>
80008ab6:	6c 08       	ld.w	r8,r6[0x0]
80008ab8:	58 08       	cp.w	r8,0
80008aba:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008abe:	d8 22       	popm	r4-r7,pc
80008ac0:	00 00       	add	r0,r0
80008ac2:	70 a0       	ld.w	r0,r8[0x28]

80008ac4 <__errno>:
80008ac4:	48 28       	lddpc	r8,80008acc <__errno+0x8>
80008ac6:	70 0c       	ld.w	r12,r8[0x0]
80008ac8:	2f 4c       	sub	r12,-12
80008aca:	5e fc       	retal	r12
80008acc:	00 00       	add	r0,r0
80008ace:	00 fc       	st.b	--r0,r12

80008ad0 <_fclose_r>:
80008ad0:	d4 21       	pushm	r4-r7,lr
80008ad2:	18 96       	mov	r6,r12
80008ad4:	16 97       	mov	r7,r11
80008ad6:	58 0b       	cp.w	r11,0
80008ad8:	c0 31       	brne	80008ade <_fclose_r+0xe>
80008ada:	16 95       	mov	r5,r11
80008adc:	c5 08       	rjmp	80008b7c <_fclose_r+0xac>
80008ade:	fe b0 f4 83 	rcall	800073e4 <__sfp_lock_acquire>
80008ae2:	58 06       	cp.w	r6,0
80008ae4:	c0 70       	breq	80008af2 <_fclose_r+0x22>
80008ae6:	6c 68       	ld.w	r8,r6[0x18]
80008ae8:	58 08       	cp.w	r8,0
80008aea:	c0 41       	brne	80008af2 <_fclose_r+0x22>
80008aec:	0c 9c       	mov	r12,r6
80008aee:	fe b0 f4 cf 	rcall	8000748c <__sinit>
80008af2:	4a 48       	lddpc	r8,80008b80 <_fclose_r+0xb0>
80008af4:	10 37       	cp.w	r7,r8
80008af6:	c0 31       	brne	80008afc <_fclose_r+0x2c>
80008af8:	6c 07       	ld.w	r7,r6[0x0]
80008afa:	c0 a8       	rjmp	80008b0e <_fclose_r+0x3e>
80008afc:	4a 28       	lddpc	r8,80008b84 <_fclose_r+0xb4>
80008afe:	10 37       	cp.w	r7,r8
80008b00:	c0 31       	brne	80008b06 <_fclose_r+0x36>
80008b02:	6c 17       	ld.w	r7,r6[0x4]
80008b04:	c0 58       	rjmp	80008b0e <_fclose_r+0x3e>
80008b06:	4a 18       	lddpc	r8,80008b88 <_fclose_r+0xb8>
80008b08:	10 37       	cp.w	r7,r8
80008b0a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008b0e:	8e 69       	ld.sh	r9,r7[0xc]
80008b10:	30 08       	mov	r8,0
80008b12:	f0 09 19 00 	cp.h	r9,r8
80008b16:	c0 51       	brne	80008b20 <_fclose_r+0x50>
80008b18:	fe b0 f4 67 	rcall	800073e6 <__sfp_lock_release>
80008b1c:	30 05       	mov	r5,0
80008b1e:	c2 f8       	rjmp	80008b7c <_fclose_r+0xac>
80008b20:	0e 9b       	mov	r11,r7
80008b22:	0c 9c       	mov	r12,r6
80008b24:	fe b0 f3 d8 	rcall	800072d4 <_fflush_r>
80008b28:	6e c8       	ld.w	r8,r7[0x30]
80008b2a:	18 95       	mov	r5,r12
80008b2c:	58 08       	cp.w	r8,0
80008b2e:	c0 60       	breq	80008b3a <_fclose_r+0x6a>
80008b30:	6e 8b       	ld.w	r11,r7[0x20]
80008b32:	0c 9c       	mov	r12,r6
80008b34:	5d 18       	icall	r8
80008b36:	f9 b5 05 ff 	movlt	r5,-1
80008b3a:	8e 68       	ld.sh	r8,r7[0xc]
80008b3c:	ed b8 00 07 	bld	r8,0x7
80008b40:	c0 51       	brne	80008b4a <_fclose_r+0x7a>
80008b42:	6e 4b       	ld.w	r11,r7[0x10]
80008b44:	0c 9c       	mov	r12,r6
80008b46:	fe b0 f5 3f 	rcall	800075c4 <_free_r>
80008b4a:	6e db       	ld.w	r11,r7[0x34]
80008b4c:	58 0b       	cp.w	r11,0
80008b4e:	c0 a0       	breq	80008b62 <_fclose_r+0x92>
80008b50:	ee c8 ff bc 	sub	r8,r7,-68
80008b54:	10 3b       	cp.w	r11,r8
80008b56:	c0 40       	breq	80008b5e <_fclose_r+0x8e>
80008b58:	0c 9c       	mov	r12,r6
80008b5a:	fe b0 f5 35 	rcall	800075c4 <_free_r>
80008b5e:	30 08       	mov	r8,0
80008b60:	8f d8       	st.w	r7[0x34],r8
80008b62:	6f 2b       	ld.w	r11,r7[0x48]
80008b64:	58 0b       	cp.w	r11,0
80008b66:	c0 70       	breq	80008b74 <_fclose_r+0xa4>
80008b68:	0c 9c       	mov	r12,r6
80008b6a:	fe b0 f5 2d 	rcall	800075c4 <_free_r>
80008b6e:	30 08       	mov	r8,0
80008b70:	ef 48 00 48 	st.w	r7[72],r8
80008b74:	30 08       	mov	r8,0
80008b76:	ae 68       	st.h	r7[0xc],r8
80008b78:	fe b0 f4 37 	rcall	800073e6 <__sfp_lock_release>
80008b7c:	0a 9c       	mov	r12,r5
80008b7e:	d8 22       	popm	r4-r7,pc
80008b80:	80 00       	ld.sh	r0,r0[0x0]
80008b82:	a4 1c       	st.h	r2[0x2],r12
80008b84:	80 00       	ld.sh	r0,r0[0x0]
80008b86:	a4 3c       	st.h	r2[0x6],r12
80008b88:	80 00       	ld.sh	r0,r0[0x0]
80008b8a:	a4 5c       	st.h	r2[0xa],r12

80008b8c <fclose>:
80008b8c:	d4 01       	pushm	lr
80008b8e:	48 38       	lddpc	r8,80008b98 <fclose+0xc>
80008b90:	18 9b       	mov	r11,r12
80008b92:	70 0c       	ld.w	r12,r8[0x0]
80008b94:	c9 ef       	rcall	80008ad0 <_fclose_r>
80008b96:	d8 02       	popm	pc
80008b98:	00 00       	add	r0,r0
80008b9a:	00 fc       	st.b	--r0,r12

80008b9c <_fstat_r>:
80008b9c:	d4 21       	pushm	r4-r7,lr
80008b9e:	16 98       	mov	r8,r11
80008ba0:	18 97       	mov	r7,r12
80008ba2:	10 9c       	mov	r12,r8
80008ba4:	30 08       	mov	r8,0
80008ba6:	48 66       	lddpc	r6,80008bbc <_fstat_r+0x20>
80008ba8:	14 9b       	mov	r11,r10
80008baa:	8d 08       	st.w	r6[0x0],r8
80008bac:	cf 8e       	rcall	8000899c <_fstat>
80008bae:	5b fc       	cp.w	r12,-1
80008bb0:	c0 51       	brne	80008bba <_fstat_r+0x1e>
80008bb2:	6c 08       	ld.w	r8,r6[0x0]
80008bb4:	58 08       	cp.w	r8,0
80008bb6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008bba:	d8 22       	popm	r4-r7,pc
80008bbc:	00 00       	add	r0,r0
80008bbe:	70 a0       	ld.w	r0,r8[0x28]

80008bc0 <_lseek_r>:
80008bc0:	d4 21       	pushm	r4-r7,lr
80008bc2:	16 98       	mov	r8,r11
80008bc4:	18 97       	mov	r7,r12
80008bc6:	10 9c       	mov	r12,r8
80008bc8:	30 08       	mov	r8,0
80008bca:	14 9b       	mov	r11,r10
80008bcc:	48 66       	lddpc	r6,80008be4 <_lseek_r+0x24>
80008bce:	12 9a       	mov	r10,r9
80008bd0:	8d 08       	st.w	r6[0x0],r8
80008bd2:	ca 9e       	rcall	80008924 <_lseek>
80008bd4:	5b fc       	cp.w	r12,-1
80008bd6:	c0 51       	brne	80008be0 <_lseek_r+0x20>
80008bd8:	6c 08       	ld.w	r8,r6[0x0]
80008bda:	58 08       	cp.w	r8,0
80008bdc:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008be0:	d8 22       	popm	r4-r7,pc
80008be2:	d7 03       	nop
80008be4:	00 00       	add	r0,r0
80008be6:	70 a0       	ld.w	r0,r8[0x28]

80008be8 <_read_r>:
80008be8:	d4 21       	pushm	r4-r7,lr
80008bea:	16 98       	mov	r8,r11
80008bec:	18 97       	mov	r7,r12
80008bee:	10 9c       	mov	r12,r8
80008bf0:	30 08       	mov	r8,0
80008bf2:	14 9b       	mov	r11,r10
80008bf4:	48 66       	lddpc	r6,80008c0c <_read_r+0x24>
80008bf6:	12 9a       	mov	r10,r9
80008bf8:	8d 08       	st.w	r6[0x0],r8
80008bfa:	ca 1e       	rcall	8000893c <_read>
80008bfc:	5b fc       	cp.w	r12,-1
80008bfe:	c0 51       	brne	80008c08 <_read_r+0x20>
80008c00:	6c 08       	ld.w	r8,r6[0x0]
80008c02:	58 08       	cp.w	r8,0
80008c04:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008c08:	d8 22       	popm	r4-r7,pc
80008c0a:	d7 03       	nop
80008c0c:	00 00       	add	r0,r0
80008c0e:	70 a0       	ld.w	r0,r8[0x28]

80008c10 <__avr32_f64_mul>:
80008c10:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008c14:	e0 80 00 dc 	breq	80008dcc <__avr32_f64_mul_op1_zero>
80008c18:	d4 21       	pushm	r4-r7,lr
80008c1a:	f7 e9 20 0e 	eor	lr,r11,r9
80008c1e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008c22:	30 15       	mov	r5,1
80008c24:	c4 30       	breq	80008caa <__avr32_f64_mul_op1_subnormal>
80008c26:	ab 6b       	lsl	r11,0xa
80008c28:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80008c2c:	ab 6a       	lsl	r10,0xa
80008c2e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80008c32:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008c36:	c5 c0       	breq	80008cee <__avr32_f64_mul_op2_subnormal>
80008c38:	a1 78       	lsl	r8,0x1
80008c3a:	5c f9       	rol	r9
80008c3c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80008c40:	e0 47 07 ff 	cp.w	r7,2047
80008c44:	c7 70       	breq	80008d32 <__avr32_f64_mul_op_nan_or_inf>
80008c46:	e0 46 07 ff 	cp.w	r6,2047
80008c4a:	c7 40       	breq	80008d32 <__avr32_f64_mul_op_nan_or_inf>
80008c4c:	ee 06 00 0c 	add	r12,r7,r6
80008c50:	e0 2c 03 fe 	sub	r12,1022
80008c54:	f6 08 06 44 	mulu.d	r4,r11,r8
80008c58:	f4 09 07 44 	macu.d	r4,r10,r9
80008c5c:	f4 08 06 46 	mulu.d	r6,r10,r8
80008c60:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008c64:	08 07       	add	r7,r4
80008c66:	f4 05 00 4a 	adc	r10,r10,r5
80008c6a:	5c 0b       	acr	r11
80008c6c:	ed bb 00 14 	bld	r11,0x14
80008c70:	c0 50       	breq	80008c7a <__avr32_f64_mul+0x6a>
80008c72:	a1 77       	lsl	r7,0x1
80008c74:	5c fa       	rol	r10
80008c76:	5c fb       	rol	r11
80008c78:	20 1c       	sub	r12,1
80008c7a:	58 0c       	cp.w	r12,0
80008c7c:	e0 8a 00 6f 	brle	80008d5a <__avr32_f64_mul_res_subnormal>
80008c80:	e0 4c 07 ff 	cp.w	r12,2047
80008c84:	e0 84 00 9c 	brge	80008dbc <__avr32_f64_mul_res_inf>
80008c88:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008c8c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80008c90:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008c94:	ee 17 80 00 	eorh	r7,0x8000
80008c98:	f1 b7 04 20 	satu	r7,0x1
80008c9c:	0e 0a       	add	r10,r7
80008c9e:	5c 0b       	acr	r11
80008ca0:	ed be 00 1f 	bld	lr,0x1f
80008ca4:	ef bb 00 1f 	bst	r11,0x1f
80008ca8:	d8 22       	popm	r4-r7,pc

80008caa <__avr32_f64_mul_op1_subnormal>:
80008caa:	e4 1b 00 0f 	andh	r11,0xf
80008cae:	f4 0c 12 00 	clz	r12,r10
80008cb2:	f6 06 12 00 	clz	r6,r11
80008cb6:	f7 bc 03 e1 	sublo	r12,-31
80008cba:	f8 06 17 30 	movlo	r6,r12
80008cbe:	f7 b6 02 01 	subhs	r6,1
80008cc2:	e0 46 00 20 	cp.w	r6,32
80008cc6:	c0 d4       	brge	80008ce0 <__avr32_f64_mul_op1_subnormal+0x36>
80008cc8:	ec 0c 11 20 	rsub	r12,r6,32
80008ccc:	f6 06 09 4b 	lsl	r11,r11,r6
80008cd0:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008cd4:	18 4b       	or	r11,r12
80008cd6:	f4 06 09 4a 	lsl	r10,r10,r6
80008cda:	20 b6       	sub	r6,11
80008cdc:	0c 17       	sub	r7,r6
80008cde:	ca ab       	rjmp	80008c32 <__avr32_f64_mul+0x22>
80008ce0:	f4 06 09 4b 	lsl	r11,r10,r6
80008ce4:	c6 40       	breq	80008dac <__avr32_f64_mul_res_zero>
80008ce6:	30 0a       	mov	r10,0
80008ce8:	20 b6       	sub	r6,11
80008cea:	0c 17       	sub	r7,r6
80008cec:	ca 3b       	rjmp	80008c32 <__avr32_f64_mul+0x22>

80008cee <__avr32_f64_mul_op2_subnormal>:
80008cee:	e4 19 00 0f 	andh	r9,0xf
80008cf2:	f0 0c 12 00 	clz	r12,r8
80008cf6:	f2 05 12 00 	clz	r5,r9
80008cfa:	f7 bc 03 ea 	sublo	r12,-22
80008cfe:	f8 05 17 30 	movlo	r5,r12
80008d02:	f7 b5 02 0a 	subhs	r5,10
80008d06:	e0 45 00 20 	cp.w	r5,32
80008d0a:	c0 d4       	brge	80008d24 <__avr32_f64_mul_op2_subnormal+0x36>
80008d0c:	ea 0c 11 20 	rsub	r12,r5,32
80008d10:	f2 05 09 49 	lsl	r9,r9,r5
80008d14:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008d18:	18 49       	or	r9,r12
80008d1a:	f0 05 09 48 	lsl	r8,r8,r5
80008d1e:	20 25       	sub	r5,2
80008d20:	0a 16       	sub	r6,r5
80008d22:	c8 fb       	rjmp	80008c40 <__avr32_f64_mul+0x30>
80008d24:	f0 05 09 49 	lsl	r9,r8,r5
80008d28:	c4 20       	breq	80008dac <__avr32_f64_mul_res_zero>
80008d2a:	30 08       	mov	r8,0
80008d2c:	20 25       	sub	r5,2
80008d2e:	0a 16       	sub	r6,r5
80008d30:	c8 8b       	rjmp	80008c40 <__avr32_f64_mul+0x30>

80008d32 <__avr32_f64_mul_op_nan_or_inf>:
80008d32:	e4 19 00 0f 	andh	r9,0xf
80008d36:	e4 1b 00 0f 	andh	r11,0xf
80008d3a:	14 4b       	or	r11,r10
80008d3c:	10 49       	or	r9,r8
80008d3e:	e0 47 07 ff 	cp.w	r7,2047
80008d42:	c0 91       	brne	80008d54 <__avr32_f64_mul_op1_not_naninf>
80008d44:	58 0b       	cp.w	r11,0
80008d46:	c3 81       	brne	80008db6 <__avr32_f64_mul_res_nan>
80008d48:	e0 46 07 ff 	cp.w	r6,2047
80008d4c:	c3 81       	brne	80008dbc <__avr32_f64_mul_res_inf>
80008d4e:	58 09       	cp.w	r9,0
80008d50:	c3 60       	breq	80008dbc <__avr32_f64_mul_res_inf>
80008d52:	c3 28       	rjmp	80008db6 <__avr32_f64_mul_res_nan>

80008d54 <__avr32_f64_mul_op1_not_naninf>:
80008d54:	58 09       	cp.w	r9,0
80008d56:	c3 30       	breq	80008dbc <__avr32_f64_mul_res_inf>
80008d58:	c2 f8       	rjmp	80008db6 <__avr32_f64_mul_res_nan>

80008d5a <__avr32_f64_mul_res_subnormal>:
80008d5a:	5c 3c       	neg	r12
80008d5c:	2f fc       	sub	r12,-1
80008d5e:	f1 bc 04 c0 	satu	r12,0x6
80008d62:	e0 4c 00 20 	cp.w	r12,32
80008d66:	c1 14       	brge	80008d88 <__avr32_f64_mul_res_subnormal+0x2e>
80008d68:	f8 08 11 20 	rsub	r8,r12,32
80008d6c:	0e 46       	or	r6,r7
80008d6e:	ee 0c 0a 47 	lsr	r7,r7,r12
80008d72:	f4 08 09 49 	lsl	r9,r10,r8
80008d76:	12 47       	or	r7,r9
80008d78:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008d7c:	f6 08 09 49 	lsl	r9,r11,r8
80008d80:	12 4a       	or	r10,r9
80008d82:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008d86:	c8 3b       	rjmp	80008c8c <__avr32_f64_mul+0x7c>
80008d88:	f8 08 11 20 	rsub	r8,r12,32
80008d8c:	f9 b9 00 00 	moveq	r9,0
80008d90:	c0 30       	breq	80008d96 <__avr32_f64_mul_res_subnormal+0x3c>
80008d92:	f6 08 09 49 	lsl	r9,r11,r8
80008d96:	0e 46       	or	r6,r7
80008d98:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008d9c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008da0:	f3 ea 10 07 	or	r7,r9,r10
80008da4:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008da8:	30 0b       	mov	r11,0
80008daa:	c7 1b       	rjmp	80008c8c <__avr32_f64_mul+0x7c>

80008dac <__avr32_f64_mul_res_zero>:
80008dac:	1c 9b       	mov	r11,lr
80008dae:	e6 1b 80 00 	andh	r11,0x8000,COH
80008db2:	30 0a       	mov	r10,0
80008db4:	d8 22       	popm	r4-r7,pc

80008db6 <__avr32_f64_mul_res_nan>:
80008db6:	3f fb       	mov	r11,-1
80008db8:	3f fa       	mov	r10,-1
80008dba:	d8 22       	popm	r4-r7,pc

80008dbc <__avr32_f64_mul_res_inf>:
80008dbc:	f0 6b 00 00 	mov	r11,-1048576
80008dc0:	ed be 00 1f 	bld	lr,0x1f
80008dc4:	ef bb 00 1f 	bst	r11,0x1f
80008dc8:	30 0a       	mov	r10,0
80008dca:	d8 22       	popm	r4-r7,pc

80008dcc <__avr32_f64_mul_op1_zero>:
80008dcc:	f7 e9 20 0b 	eor	r11,r11,r9
80008dd0:	e6 1b 80 00 	andh	r11,0x8000,COH
80008dd4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008dd8:	e0 4c 07 ff 	cp.w	r12,2047
80008ddc:	5e 1c       	retne	r12
80008dde:	3f fa       	mov	r10,-1
80008de0:	3f fb       	mov	r11,-1
80008de2:	5e fc       	retal	r12

80008de4 <__avr32_f64_sub_from_add>:
80008de4:	ee 19 80 00 	eorh	r9,0x8000

80008de8 <__avr32_f64_sub>:
80008de8:	f7 e9 20 0c 	eor	r12,r11,r9
80008dec:	e0 86 00 ca 	brmi	80008f80 <__avr32_f64_add_from_sub>
80008df0:	eb cd 40 e0 	pushm	r5-r7,lr
80008df4:	16 9c       	mov	r12,r11
80008df6:	e6 1c 80 00 	andh	r12,0x8000,COH
80008dfa:	bf db       	cbr	r11,0x1f
80008dfc:	bf d9       	cbr	r9,0x1f
80008dfe:	10 3a       	cp.w	r10,r8
80008e00:	f2 0b 13 00 	cpc	r11,r9
80008e04:	c0 92       	brcc	80008e16 <__avr32_f64_sub+0x2e>
80008e06:	16 97       	mov	r7,r11
80008e08:	12 9b       	mov	r11,r9
80008e0a:	0e 99       	mov	r9,r7
80008e0c:	14 97       	mov	r7,r10
80008e0e:	10 9a       	mov	r10,r8
80008e10:	0e 98       	mov	r8,r7
80008e12:	ee 1c 80 00 	eorh	r12,0x8000
80008e16:	f6 07 16 14 	lsr	r7,r11,0x14
80008e1a:	ab 7b       	lsl	r11,0xb
80008e1c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008e20:	ab 7a       	lsl	r10,0xb
80008e22:	bf bb       	sbr	r11,0x1f
80008e24:	f2 06 16 14 	lsr	r6,r9,0x14
80008e28:	c4 40       	breq	80008eb0 <__avr32_f64_sub_opL_subnormal>
80008e2a:	ab 79       	lsl	r9,0xb
80008e2c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008e30:	ab 78       	lsl	r8,0xb
80008e32:	bf b9       	sbr	r9,0x1f

80008e34 <__avr32_f64_sub_opL_subnormal_done>:
80008e34:	e0 47 07 ff 	cp.w	r7,2047
80008e38:	c4 f0       	breq	80008ed6 <__avr32_f64_sub_opH_nan_or_inf>
80008e3a:	0e 26       	rsub	r6,r7
80008e3c:	c1 20       	breq	80008e60 <__avr32_f64_sub_shift_done>
80008e3e:	ec 05 11 20 	rsub	r5,r6,32
80008e42:	e0 46 00 20 	cp.w	r6,32
80008e46:	c7 c2       	brcc	80008f3e <__avr32_f64_sub_longshift>
80008e48:	f0 05 09 4e 	lsl	lr,r8,r5
80008e4c:	f2 05 09 45 	lsl	r5,r9,r5
80008e50:	f0 06 0a 48 	lsr	r8,r8,r6
80008e54:	f2 06 0a 49 	lsr	r9,r9,r6
80008e58:	0a 48       	or	r8,r5
80008e5a:	58 0e       	cp.w	lr,0
80008e5c:	5f 1e       	srne	lr
80008e5e:	1c 48       	or	r8,lr

80008e60 <__avr32_f64_sub_shift_done>:
80008e60:	10 1a       	sub	r10,r8
80008e62:	f6 09 01 4b 	sbc	r11,r11,r9
80008e66:	f6 06 12 00 	clz	r6,r11
80008e6a:	c0 e0       	breq	80008e86 <__avr32_f64_sub_longnormalize_done>
80008e6c:	c7 83       	brcs	80008f5c <__avr32_f64_sub_longnormalize>
80008e6e:	ec 0e 11 20 	rsub	lr,r6,32
80008e72:	f6 06 09 4b 	lsl	r11,r11,r6
80008e76:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008e7a:	1c 4b       	or	r11,lr
80008e7c:	f4 06 09 4a 	lsl	r10,r10,r6
80008e80:	0c 17       	sub	r7,r6
80008e82:	e0 8a 00 39 	brle	80008ef4 <__avr32_f64_sub_subnormal_result>

80008e86 <__avr32_f64_sub_longnormalize_done>:
80008e86:	f4 09 15 15 	lsl	r9,r10,0x15
80008e8a:	ab 9a       	lsr	r10,0xb
80008e8c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008e90:	ab 9b       	lsr	r11,0xb
80008e92:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008e96:	18 4b       	or	r11,r12

80008e98 <__avr32_f64_sub_round>:
80008e98:	fc 17 80 00 	movh	r7,0x8000
80008e9c:	ed ba 00 00 	bld	r10,0x0
80008ea0:	f7 b7 01 ff 	subne	r7,-1
80008ea4:	0e 39       	cp.w	r9,r7
80008ea6:	5f 29       	srhs	r9
80008ea8:	12 0a       	add	r10,r9
80008eaa:	5c 0b       	acr	r11
80008eac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008eb0 <__avr32_f64_sub_opL_subnormal>:
80008eb0:	ab 79       	lsl	r9,0xb
80008eb2:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008eb6:	ab 78       	lsl	r8,0xb
80008eb8:	f3 e8 10 0e 	or	lr,r9,r8
80008ebc:	f9 b6 01 01 	movne	r6,1
80008ec0:	ee 0e 11 00 	rsub	lr,r7,0
80008ec4:	f9 b7 00 01 	moveq	r7,1
80008ec8:	ef bb 00 1f 	bst	r11,0x1f
80008ecc:	f7 ea 10 0e 	or	lr,r11,r10
80008ed0:	f9 b7 00 00 	moveq	r7,0
80008ed4:	cb 0b       	rjmp	80008e34 <__avr32_f64_sub_opL_subnormal_done>

80008ed6 <__avr32_f64_sub_opH_nan_or_inf>:
80008ed6:	bf db       	cbr	r11,0x1f
80008ed8:	f7 ea 10 0e 	or	lr,r11,r10
80008edc:	c0 81       	brne	80008eec <__avr32_f64_sub_return_nan>
80008ede:	e0 46 07 ff 	cp.w	r6,2047
80008ee2:	c0 50       	breq	80008eec <__avr32_f64_sub_return_nan>
80008ee4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008ee8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008eec <__avr32_f64_sub_return_nan>:
80008eec:	3f fa       	mov	r10,-1
80008eee:	3f fb       	mov	r11,-1
80008ef0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ef4 <__avr32_f64_sub_subnormal_result>:
80008ef4:	5c 37       	neg	r7
80008ef6:	2f f7       	sub	r7,-1
80008ef8:	f1 b7 04 c0 	satu	r7,0x6
80008efc:	e0 47 00 20 	cp.w	r7,32
80008f00:	c1 14       	brge	80008f22 <__avr32_f64_sub_subnormal_result+0x2e>
80008f02:	ee 08 11 20 	rsub	r8,r7,32
80008f06:	f4 08 09 49 	lsl	r9,r10,r8
80008f0a:	5f 16       	srne	r6
80008f0c:	f4 07 0a 4a 	lsr	r10,r10,r7
80008f10:	0c 4a       	or	r10,r6
80008f12:	f6 08 09 49 	lsl	r9,r11,r8
80008f16:	f5 e9 10 0a 	or	r10,r10,r9
80008f1a:	f4 07 0a 4b 	lsr	r11,r10,r7
80008f1e:	30 07       	mov	r7,0
80008f20:	cb 3b       	rjmp	80008e86 <__avr32_f64_sub_longnormalize_done>
80008f22:	ee 08 11 40 	rsub	r8,r7,64
80008f26:	f6 08 09 49 	lsl	r9,r11,r8
80008f2a:	14 49       	or	r9,r10
80008f2c:	5f 16       	srne	r6
80008f2e:	f6 07 0a 4a 	lsr	r10,r11,r7
80008f32:	0c 4a       	or	r10,r6
80008f34:	30 0b       	mov	r11,0
80008f36:	30 07       	mov	r7,0
80008f38:	ca 7b       	rjmp	80008e86 <__avr32_f64_sub_longnormalize_done>
80008f3a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008f3e <__avr32_f64_sub_longshift>:
80008f3e:	f1 b6 04 c0 	satu	r6,0x6
80008f42:	f0 0e 17 00 	moveq	lr,r8
80008f46:	c0 40       	breq	80008f4e <__avr32_f64_sub_longshift+0x10>
80008f48:	f2 05 09 4e 	lsl	lr,r9,r5
80008f4c:	10 4e       	or	lr,r8
80008f4e:	f2 06 0a 48 	lsr	r8,r9,r6
80008f52:	30 09       	mov	r9,0
80008f54:	58 0e       	cp.w	lr,0
80008f56:	5f 1e       	srne	lr
80008f58:	1c 48       	or	r8,lr
80008f5a:	c8 3b       	rjmp	80008e60 <__avr32_f64_sub_shift_done>

80008f5c <__avr32_f64_sub_longnormalize>:
80008f5c:	f4 06 12 00 	clz	r6,r10
80008f60:	f9 b7 03 00 	movlo	r7,0
80008f64:	f9 b6 03 00 	movlo	r6,0
80008f68:	f9 bc 03 00 	movlo	r12,0
80008f6c:	f7 b6 02 e0 	subhs	r6,-32
80008f70:	f4 06 09 4b 	lsl	r11,r10,r6
80008f74:	30 0a       	mov	r10,0
80008f76:	0c 17       	sub	r7,r6
80008f78:	fe 9a ff be 	brle	80008ef4 <__avr32_f64_sub_subnormal_result>
80008f7c:	c8 5b       	rjmp	80008e86 <__avr32_f64_sub_longnormalize_done>
80008f7e:	d7 03       	nop

80008f80 <__avr32_f64_add_from_sub>:
80008f80:	ee 19 80 00 	eorh	r9,0x8000

80008f84 <__avr32_f64_add>:
80008f84:	f7 e9 20 0c 	eor	r12,r11,r9
80008f88:	fe 96 ff 2e 	brmi	80008de4 <__avr32_f64_sub_from_add>
80008f8c:	eb cd 40 e0 	pushm	r5-r7,lr
80008f90:	16 9c       	mov	r12,r11
80008f92:	e6 1c 80 00 	andh	r12,0x8000,COH
80008f96:	bf db       	cbr	r11,0x1f
80008f98:	bf d9       	cbr	r9,0x1f
80008f9a:	12 3b       	cp.w	r11,r9
80008f9c:	c0 72       	brcc	80008faa <__avr32_f64_add+0x26>
80008f9e:	16 97       	mov	r7,r11
80008fa0:	12 9b       	mov	r11,r9
80008fa2:	0e 99       	mov	r9,r7
80008fa4:	14 97       	mov	r7,r10
80008fa6:	10 9a       	mov	r10,r8
80008fa8:	0e 98       	mov	r8,r7
80008faa:	30 0e       	mov	lr,0
80008fac:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008fb0:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008fb4:	b5 ab       	sbr	r11,0x14
80008fb6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008fba:	c6 20       	breq	8000907e <__avr32_f64_add_op2_subnormal>
80008fbc:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008fc0:	b5 a9       	sbr	r9,0x14
80008fc2:	e0 47 07 ff 	cp.w	r7,2047
80008fc6:	c2 80       	breq	80009016 <__avr32_f64_add_opH_nan_or_inf>
80008fc8:	0e 26       	rsub	r6,r7
80008fca:	c1 20       	breq	80008fee <__avr32_f64_add_shift_done>
80008fcc:	e0 46 00 36 	cp.w	r6,54
80008fd0:	c1 52       	brcc	80008ffa <__avr32_f64_add_res_of_done>
80008fd2:	ec 05 11 20 	rsub	r5,r6,32
80008fd6:	e0 46 00 20 	cp.w	r6,32
80008fda:	c3 52       	brcc	80009044 <__avr32_f64_add_longshift>
80008fdc:	f0 05 09 4e 	lsl	lr,r8,r5
80008fe0:	f2 05 09 45 	lsl	r5,r9,r5
80008fe4:	f0 06 0a 48 	lsr	r8,r8,r6
80008fe8:	f2 06 0a 49 	lsr	r9,r9,r6
80008fec:	0a 48       	or	r8,r5

80008fee <__avr32_f64_add_shift_done>:
80008fee:	10 0a       	add	r10,r8
80008ff0:	f6 09 00 4b 	adc	r11,r11,r9
80008ff4:	ed bb 00 15 	bld	r11,0x15
80008ff8:	c3 40       	breq	80009060 <__avr32_f64_add_res_of>

80008ffa <__avr32_f64_add_res_of_done>:
80008ffa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008ffe:	18 4b       	or	r11,r12

80009000 <__avr32_f64_add_round>:
80009000:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009004:	18 4e       	or	lr,r12
80009006:	ee 1e 80 00 	eorh	lr,0x8000
8000900a:	f1 be 04 20 	satu	lr,0x1
8000900e:	1c 0a       	add	r10,lr
80009010:	5c 0b       	acr	r11
80009012:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009016 <__avr32_f64_add_opH_nan_or_inf>:
80009016:	b5 cb       	cbr	r11,0x14
80009018:	f7 ea 10 0e 	or	lr,r11,r10
8000901c:	c1 01       	brne	8000903c <__avr32_f64_add_return_nan>
8000901e:	e0 46 07 ff 	cp.w	r6,2047
80009022:	c0 30       	breq	80009028 <__avr32_f64_add_opL_nan_or_inf>
80009024:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009028 <__avr32_f64_add_opL_nan_or_inf>:
80009028:	b5 c9       	cbr	r9,0x14
8000902a:	f3 e8 10 0e 	or	lr,r9,r8
8000902e:	c0 71       	brne	8000903c <__avr32_f64_add_return_nan>
80009030:	30 0a       	mov	r10,0
80009032:	fc 1b 7f f0 	movh	r11,0x7ff0
80009036:	18 4b       	or	r11,r12
80009038:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000903c <__avr32_f64_add_return_nan>:
8000903c:	3f fa       	mov	r10,-1
8000903e:	3f fb       	mov	r11,-1
80009040:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009044 <__avr32_f64_add_longshift>:
80009044:	f1 b6 04 c0 	satu	r6,0x6
80009048:	f0 0e 17 00 	moveq	lr,r8
8000904c:	c0 60       	breq	80009058 <__avr32_f64_add_longshift+0x14>
8000904e:	f2 05 09 4e 	lsl	lr,r9,r5
80009052:	58 08       	cp.w	r8,0
80009054:	5f 18       	srne	r8
80009056:	10 4e       	or	lr,r8
80009058:	f2 06 0a 48 	lsr	r8,r9,r6
8000905c:	30 09       	mov	r9,0
8000905e:	cc 8b       	rjmp	80008fee <__avr32_f64_add_shift_done>

80009060 <__avr32_f64_add_res_of>:
80009060:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009064:	a1 9b       	lsr	r11,0x1
80009066:	5d 0a       	ror	r10
80009068:	5d 0e       	ror	lr
8000906a:	2f f7       	sub	r7,-1
8000906c:	e0 47 07 ff 	cp.w	r7,2047
80009070:	f9 ba 00 00 	moveq	r10,0
80009074:	f9 bb 00 00 	moveq	r11,0
80009078:	f9 be 00 00 	moveq	lr,0
8000907c:	cb fb       	rjmp	80008ffa <__avr32_f64_add_res_of_done>

8000907e <__avr32_f64_add_op2_subnormal>:
8000907e:	30 16       	mov	r6,1
80009080:	58 07       	cp.w	r7,0
80009082:	ca 01       	brne	80008fc2 <__avr32_f64_add+0x3e>
80009084:	b5 cb       	cbr	r11,0x14
80009086:	10 0a       	add	r10,r8
80009088:	f6 09 00 4b 	adc	r11,r11,r9
8000908c:	18 4b       	or	r11,r12
8000908e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80009092:	d7 03       	nop

80009094 <__avr32_f64_to_u32>:
80009094:	58 0b       	cp.w	r11,0
80009096:	5e 6d       	retmi	0

80009098 <__avr32_f64_to_s32>:
80009098:	f6 0c 15 01 	lsl	r12,r11,0x1
8000909c:	b5 9c       	lsr	r12,0x15
8000909e:	e0 2c 03 ff 	sub	r12,1023
800090a2:	5e 3d       	retlo	0
800090a4:	f8 0c 11 1f 	rsub	r12,r12,31
800090a8:	16 99       	mov	r9,r11
800090aa:	ab 7b       	lsl	r11,0xb
800090ac:	bf bb       	sbr	r11,0x1f
800090ae:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800090b2:	f6 0c 0a 4b 	lsr	r11,r11,r12
800090b6:	a1 79       	lsl	r9,0x1
800090b8:	5e 2b       	reths	r11
800090ba:	5c 3b       	neg	r11
800090bc:	5e fb       	retal	r11

800090be <__avr32_u32_to_f64>:
800090be:	f8 cb 00 00 	sub	r11,r12,0
800090c2:	30 0c       	mov	r12,0
800090c4:	c0 38       	rjmp	800090ca <__avr32_s32_to_f64+0x4>

800090c6 <__avr32_s32_to_f64>:
800090c6:	18 9b       	mov	r11,r12
800090c8:	5c 4b       	abs	r11
800090ca:	30 0a       	mov	r10,0
800090cc:	5e 0b       	reteq	r11
800090ce:	d4 01       	pushm	lr
800090d0:	e0 69 04 1e 	mov	r9,1054
800090d4:	f6 08 12 00 	clz	r8,r11
800090d8:	c1 70       	breq	80009106 <__avr32_s32_to_f64+0x40>
800090da:	c0 c3       	brcs	800090f2 <__avr32_s32_to_f64+0x2c>
800090dc:	f0 0e 11 20 	rsub	lr,r8,32
800090e0:	f6 08 09 4b 	lsl	r11,r11,r8
800090e4:	f4 0e 0a 4e 	lsr	lr,r10,lr
800090e8:	1c 4b       	or	r11,lr
800090ea:	f4 08 09 4a 	lsl	r10,r10,r8
800090ee:	10 19       	sub	r9,r8
800090f0:	c0 b8       	rjmp	80009106 <__avr32_s32_to_f64+0x40>
800090f2:	f4 08 12 00 	clz	r8,r10
800090f6:	f9 b8 03 00 	movlo	r8,0
800090fa:	f7 b8 02 e0 	subhs	r8,-32
800090fe:	f4 08 09 4b 	lsl	r11,r10,r8
80009102:	30 0a       	mov	r10,0
80009104:	10 19       	sub	r9,r8
80009106:	58 09       	cp.w	r9,0
80009108:	e0 89 00 30 	brgt	80009168 <__avr32_s32_to_f64+0xa2>
8000910c:	5c 39       	neg	r9
8000910e:	2f f9       	sub	r9,-1
80009110:	e0 49 00 36 	cp.w	r9,54
80009114:	c0 43       	brcs	8000911c <__avr32_s32_to_f64+0x56>
80009116:	30 0b       	mov	r11,0
80009118:	30 0a       	mov	r10,0
8000911a:	c2 68       	rjmp	80009166 <__avr32_s32_to_f64+0xa0>
8000911c:	2f 69       	sub	r9,-10
8000911e:	f2 08 11 20 	rsub	r8,r9,32
80009122:	e0 49 00 20 	cp.w	r9,32
80009126:	c0 b2       	brcc	8000913c <__avr32_s32_to_f64+0x76>
80009128:	f4 08 09 4e 	lsl	lr,r10,r8
8000912c:	f6 08 09 48 	lsl	r8,r11,r8
80009130:	f4 09 0a 4a 	lsr	r10,r10,r9
80009134:	f6 09 0a 4b 	lsr	r11,r11,r9
80009138:	10 4b       	or	r11,r8
8000913a:	c0 88       	rjmp	8000914a <__avr32_s32_to_f64+0x84>
8000913c:	f6 08 09 4e 	lsl	lr,r11,r8
80009140:	14 4e       	or	lr,r10
80009142:	16 9a       	mov	r10,r11
80009144:	30 0b       	mov	r11,0
80009146:	f4 09 0a 4a 	lsr	r10,r10,r9
8000914a:	ed ba 00 00 	bld	r10,0x0
8000914e:	c0 92       	brcc	80009160 <__avr32_s32_to_f64+0x9a>
80009150:	1c 7e       	tst	lr,lr
80009152:	c0 41       	brne	8000915a <__avr32_s32_to_f64+0x94>
80009154:	ed ba 00 01 	bld	r10,0x1
80009158:	c0 42       	brcc	80009160 <__avr32_s32_to_f64+0x9a>
8000915a:	2f fa       	sub	r10,-1
8000915c:	f7 bb 02 ff 	subhs	r11,-1
80009160:	5c fc       	rol	r12
80009162:	5d 0b       	ror	r11
80009164:	5d 0a       	ror	r10
80009166:	d8 02       	popm	pc
80009168:	e0 68 03 ff 	mov	r8,1023
8000916c:	ed ba 00 0b 	bld	r10,0xb
80009170:	f7 b8 00 ff 	subeq	r8,-1
80009174:	10 0a       	add	r10,r8
80009176:	5c 0b       	acr	r11
80009178:	f7 b9 03 fe 	sublo	r9,-2
8000917c:	e0 49 07 ff 	cp.w	r9,2047
80009180:	c0 55       	brlt	8000918a <__avr32_s32_to_f64+0xc4>
80009182:	30 0a       	mov	r10,0
80009184:	fc 1b ff e0 	movh	r11,0xffe0
80009188:	c0 c8       	rjmp	800091a0 <__floatsidf_return_op1>
8000918a:	ed bb 00 1f 	bld	r11,0x1f
8000918e:	f7 b9 01 01 	subne	r9,1
80009192:	ab 9a       	lsr	r10,0xb
80009194:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009198:	a1 7b       	lsl	r11,0x1
8000919a:	ab 9b       	lsr	r11,0xb
8000919c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800091a0 <__floatsidf_return_op1>:
800091a0:	a1 7c       	lsl	r12,0x1
800091a2:	5d 0b       	ror	r11
800091a4:	d8 02       	popm	pc

800091a6 <__avr32_f64_cmp_eq>:
800091a6:	10 3a       	cp.w	r10,r8
800091a8:	f2 0b 13 00 	cpc	r11,r9
800091ac:	c0 80       	breq	800091bc <__avr32_f64_cmp_eq+0x16>
800091ae:	a1 7b       	lsl	r11,0x1
800091b0:	a1 79       	lsl	r9,0x1
800091b2:	14 4b       	or	r11,r10
800091b4:	12 4b       	or	r11,r9
800091b6:	10 4b       	or	r11,r8
800091b8:	5e 0f       	reteq	1
800091ba:	5e fd       	retal	0
800091bc:	a1 7b       	lsl	r11,0x1
800091be:	fc 1c ff e0 	movh	r12,0xffe0
800091c2:	58 0a       	cp.w	r10,0
800091c4:	f8 0b 13 00 	cpc	r11,r12
800091c8:	5e 8f       	retls	1
800091ca:	5e fd       	retal	0

800091cc <__avr32_f64_cmp_ge>:
800091cc:	1a de       	st.w	--sp,lr
800091ce:	1a d7       	st.w	--sp,r7
800091d0:	a1 7b       	lsl	r11,0x1
800091d2:	5f 3c       	srlo	r12
800091d4:	a1 79       	lsl	r9,0x1
800091d6:	5f 37       	srlo	r7
800091d8:	5c fc       	rol	r12
800091da:	fc 1e ff e0 	movh	lr,0xffe0
800091de:	58 0a       	cp.w	r10,0
800091e0:	fc 0b 13 00 	cpc	r11,lr
800091e4:	e0 8b 00 1d 	brhi	8000921e <__avr32_f64_cmp_ge+0x52>
800091e8:	58 08       	cp.w	r8,0
800091ea:	fc 09 13 00 	cpc	r9,lr
800091ee:	e0 8b 00 18 	brhi	8000921e <__avr32_f64_cmp_ge+0x52>
800091f2:	58 0b       	cp.w	r11,0
800091f4:	f5 ba 00 00 	subfeq	r10,0
800091f8:	c1 50       	breq	80009222 <__avr32_f64_cmp_ge+0x56>
800091fa:	1b 07       	ld.w	r7,sp++
800091fc:	1b 0e       	ld.w	lr,sp++
800091fe:	58 3c       	cp.w	r12,3
80009200:	c0 a0       	breq	80009214 <__avr32_f64_cmp_ge+0x48>
80009202:	58 1c       	cp.w	r12,1
80009204:	c0 33       	brcs	8000920a <__avr32_f64_cmp_ge+0x3e>
80009206:	5e 0f       	reteq	1
80009208:	5e 1d       	retne	0
8000920a:	10 3a       	cp.w	r10,r8
8000920c:	f2 0b 13 00 	cpc	r11,r9
80009210:	5e 2f       	reths	1
80009212:	5e 3d       	retlo	0
80009214:	14 38       	cp.w	r8,r10
80009216:	f6 09 13 00 	cpc	r9,r11
8000921a:	5e 2f       	reths	1
8000921c:	5e 3d       	retlo	0
8000921e:	1b 07       	ld.w	r7,sp++
80009220:	d8 0a       	popm	pc,r12=0
80009222:	58 17       	cp.w	r7,1
80009224:	5f 0c       	sreq	r12
80009226:	58 09       	cp.w	r9,0
80009228:	f5 b8 00 00 	subfeq	r8,0
8000922c:	1b 07       	ld.w	r7,sp++
8000922e:	1b 0e       	ld.w	lr,sp++
80009230:	5e 0f       	reteq	1
80009232:	5e fc       	retal	r12

80009234 <__avr32_f64_cmp_lt>:
80009234:	1a de       	st.w	--sp,lr
80009236:	1a d7       	st.w	--sp,r7
80009238:	a1 7b       	lsl	r11,0x1
8000923a:	5f 3c       	srlo	r12
8000923c:	a1 79       	lsl	r9,0x1
8000923e:	5f 37       	srlo	r7
80009240:	5c fc       	rol	r12
80009242:	fc 1e ff e0 	movh	lr,0xffe0
80009246:	58 0a       	cp.w	r10,0
80009248:	fc 0b 13 00 	cpc	r11,lr
8000924c:	e0 8b 00 1d 	brhi	80009286 <__avr32_f64_cmp_lt+0x52>
80009250:	58 08       	cp.w	r8,0
80009252:	fc 09 13 00 	cpc	r9,lr
80009256:	e0 8b 00 18 	brhi	80009286 <__avr32_f64_cmp_lt+0x52>
8000925a:	58 0b       	cp.w	r11,0
8000925c:	f5 ba 00 00 	subfeq	r10,0
80009260:	c1 50       	breq	8000928a <__avr32_f64_cmp_lt+0x56>
80009262:	1b 07       	ld.w	r7,sp++
80009264:	1b 0e       	ld.w	lr,sp++
80009266:	58 3c       	cp.w	r12,3
80009268:	c0 a0       	breq	8000927c <__avr32_f64_cmp_lt+0x48>
8000926a:	58 1c       	cp.w	r12,1
8000926c:	c0 33       	brcs	80009272 <__avr32_f64_cmp_lt+0x3e>
8000926e:	5e 0d       	reteq	0
80009270:	5e 1f       	retne	1
80009272:	10 3a       	cp.w	r10,r8
80009274:	f2 0b 13 00 	cpc	r11,r9
80009278:	5e 2d       	reths	0
8000927a:	5e 3f       	retlo	1
8000927c:	14 38       	cp.w	r8,r10
8000927e:	f6 09 13 00 	cpc	r9,r11
80009282:	5e 2d       	reths	0
80009284:	5e 3f       	retlo	1
80009286:	1b 07       	ld.w	r7,sp++
80009288:	d8 0a       	popm	pc,r12=0
8000928a:	58 17       	cp.w	r7,1
8000928c:	5f 1c       	srne	r12
8000928e:	58 09       	cp.w	r9,0
80009290:	f5 b8 00 00 	subfeq	r8,0
80009294:	1b 07       	ld.w	r7,sp++
80009296:	1b 0e       	ld.w	lr,sp++
80009298:	5e 0d       	reteq	0
8000929a:	5e fc       	retal	r12

8000929c <__avr32_f64_div>:
8000929c:	eb cd 40 ff 	pushm	r0-r7,lr
800092a0:	f7 e9 20 0e 	eor	lr,r11,r9
800092a4:	f6 07 16 14 	lsr	r7,r11,0x14
800092a8:	a9 7b       	lsl	r11,0x9
800092aa:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800092ae:	a9 7a       	lsl	r10,0x9
800092b0:	bd bb       	sbr	r11,0x1d
800092b2:	e4 1b 3f ff 	andh	r11,0x3fff
800092b6:	ab d7       	cbr	r7,0xb
800092b8:	e0 80 00 cc 	breq	80009450 <__avr32_f64_div_round_subnormal+0x54>
800092bc:	e0 47 07 ff 	cp.w	r7,2047
800092c0:	e0 84 00 b5 	brge	8000942a <__avr32_f64_div_round_subnormal+0x2e>
800092c4:	f2 06 16 14 	lsr	r6,r9,0x14
800092c8:	a9 79       	lsl	r9,0x9
800092ca:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800092ce:	a9 78       	lsl	r8,0x9
800092d0:	bd b9       	sbr	r9,0x1d
800092d2:	e4 19 3f ff 	andh	r9,0x3fff
800092d6:	ab d6       	cbr	r6,0xb
800092d8:	e0 80 00 e2 	breq	8000949c <__avr32_f64_div_round_subnormal+0xa0>
800092dc:	e0 46 07 ff 	cp.w	r6,2047
800092e0:	e0 84 00 b2 	brge	80009444 <__avr32_f64_div_round_subnormal+0x48>
800092e4:	0c 17       	sub	r7,r6
800092e6:	fe 37 fc 01 	sub	r7,-1023
800092ea:	fc 1c 80 00 	movh	r12,0x8000
800092ee:	f8 03 16 01 	lsr	r3,r12,0x1
800092f2:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800092f6:	5c d4       	com	r4
800092f8:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800092fc:	e6 09 06 44 	mulu.d	r4,r3,r9
80009300:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009304:	e6 05 06 44 	mulu.d	r4,r3,r5
80009308:	ea 03 15 02 	lsl	r3,r5,0x2
8000930c:	e6 09 06 44 	mulu.d	r4,r3,r9
80009310:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009314:	e6 05 06 44 	mulu.d	r4,r3,r5
80009318:	ea 03 15 02 	lsl	r3,r5,0x2
8000931c:	e6 09 06 44 	mulu.d	r4,r3,r9
80009320:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009324:	e6 05 06 44 	mulu.d	r4,r3,r5
80009328:	ea 03 15 02 	lsl	r3,r5,0x2
8000932c:	e6 08 06 40 	mulu.d	r0,r3,r8
80009330:	e4 09 07 40 	macu.d	r0,r2,r9
80009334:	e6 09 06 44 	mulu.d	r4,r3,r9
80009338:	02 04       	add	r4,r1
8000933a:	5c 05       	acr	r5
8000933c:	a3 65       	lsl	r5,0x2
8000933e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009342:	a3 64       	lsl	r4,0x2
80009344:	5c 34       	neg	r4
80009346:	f8 05 01 45 	sbc	r5,r12,r5
8000934a:	e6 04 06 40 	mulu.d	r0,r3,r4
8000934e:	e4 05 07 40 	macu.d	r0,r2,r5
80009352:	e6 05 06 44 	mulu.d	r4,r3,r5
80009356:	02 04       	add	r4,r1
80009358:	5c 05       	acr	r5
8000935a:	ea 03 15 02 	lsl	r3,r5,0x2
8000935e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009362:	e8 02 15 02 	lsl	r2,r4,0x2
80009366:	e6 08 06 40 	mulu.d	r0,r3,r8
8000936a:	e4 09 07 40 	macu.d	r0,r2,r9
8000936e:	e6 09 06 44 	mulu.d	r4,r3,r9
80009372:	02 04       	add	r4,r1
80009374:	5c 05       	acr	r5
80009376:	a3 65       	lsl	r5,0x2
80009378:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000937c:	a3 64       	lsl	r4,0x2
8000937e:	5c 34       	neg	r4
80009380:	f8 05 01 45 	sbc	r5,r12,r5
80009384:	e6 04 06 40 	mulu.d	r0,r3,r4
80009388:	e4 05 07 40 	macu.d	r0,r2,r5
8000938c:	e6 05 06 44 	mulu.d	r4,r3,r5
80009390:	02 04       	add	r4,r1
80009392:	5c 05       	acr	r5
80009394:	ea 03 15 02 	lsl	r3,r5,0x2
80009398:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000939c:	e8 02 15 02 	lsl	r2,r4,0x2
800093a0:	e6 0a 06 40 	mulu.d	r0,r3,r10
800093a4:	e4 0b 07 40 	macu.d	r0,r2,r11
800093a8:	e6 0b 06 42 	mulu.d	r2,r3,r11
800093ac:	02 02       	add	r2,r1
800093ae:	5c 03       	acr	r3
800093b0:	ed b3 00 1c 	bld	r3,0x1c
800093b4:	c0 90       	breq	800093c6 <__avr32_f64_div+0x12a>
800093b6:	a1 72       	lsl	r2,0x1
800093b8:	5c f3       	rol	r3
800093ba:	20 17       	sub	r7,1
800093bc:	a3 9a       	lsr	r10,0x3
800093be:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800093c2:	a3 9b       	lsr	r11,0x3
800093c4:	c0 58       	rjmp	800093ce <__avr32_f64_div+0x132>
800093c6:	a5 8a       	lsr	r10,0x4
800093c8:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800093cc:	a5 8b       	lsr	r11,0x4
800093ce:	58 07       	cp.w	r7,0
800093d0:	e0 8a 00 8b 	brle	800094e6 <__avr32_f64_div_res_subnormal>
800093d4:	e0 12 ff 00 	andl	r2,0xff00
800093d8:	e8 12 00 80 	orl	r2,0x80
800093dc:	e6 08 06 40 	mulu.d	r0,r3,r8
800093e0:	e4 09 07 40 	macu.d	r0,r2,r9
800093e4:	e4 08 06 44 	mulu.d	r4,r2,r8
800093e8:	e6 09 06 48 	mulu.d	r8,r3,r9
800093ec:	00 05       	add	r5,r0
800093ee:	f0 01 00 48 	adc	r8,r8,r1
800093f2:	5c 09       	acr	r9
800093f4:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800093f8:	58 04       	cp.w	r4,0
800093fa:	5c 25       	cpc	r5

800093fc <__avr32_f64_div_round_subnormal>:
800093fc:	f4 08 13 00 	cpc	r8,r10
80009400:	f6 09 13 00 	cpc	r9,r11
80009404:	5f 36       	srlo	r6
80009406:	f8 06 17 00 	moveq	r6,r12
8000940a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000940e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80009412:	e6 0b 16 08 	lsr	r11,r3,0x8
80009416:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000941a:	ed be 00 1f 	bld	lr,0x1f
8000941e:	ef bb 00 1f 	bst	r11,0x1f
80009422:	0c 0a       	add	r10,r6
80009424:	5c 0b       	acr	r11
80009426:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000942a:	e4 1b 00 0f 	andh	r11,0xf
8000942e:	14 4b       	or	r11,r10
80009430:	e0 81 00 a7 	brne	8000957e <__avr32_f64_div_res_subnormal+0x98>
80009434:	f2 06 16 14 	lsr	r6,r9,0x14
80009438:	ab d6       	cbr	r6,0xb
8000943a:	e0 46 07 ff 	cp.w	r6,2047
8000943e:	e0 81 00 a4 	brne	80009586 <__avr32_f64_div_res_subnormal+0xa0>
80009442:	c9 e8       	rjmp	8000957e <__avr32_f64_div_res_subnormal+0x98>
80009444:	e4 19 00 0f 	andh	r9,0xf
80009448:	10 49       	or	r9,r8
8000944a:	e0 81 00 9a 	brne	8000957e <__avr32_f64_div_res_subnormal+0x98>
8000944e:	c9 28       	rjmp	80009572 <__avr32_f64_div_res_subnormal+0x8c>
80009450:	a3 7b       	lsl	r11,0x3
80009452:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80009456:	a3 7a       	lsl	r10,0x3
80009458:	f5 eb 10 04 	or	r4,r10,r11
8000945c:	e0 80 00 a0 	breq	8000959c <__avr32_f64_div_op1_zero>
80009460:	f6 04 12 00 	clz	r4,r11
80009464:	c1 70       	breq	80009492 <__avr32_f64_div_round_subnormal+0x96>
80009466:	c0 c3       	brcs	8000947e <__avr32_f64_div_round_subnormal+0x82>
80009468:	e8 05 11 20 	rsub	r5,r4,32
8000946c:	f6 04 09 4b 	lsl	r11,r11,r4
80009470:	f4 05 0a 45 	lsr	r5,r10,r5
80009474:	0a 4b       	or	r11,r5
80009476:	f4 04 09 4a 	lsl	r10,r10,r4
8000947a:	08 17       	sub	r7,r4
8000947c:	c0 b8       	rjmp	80009492 <__avr32_f64_div_round_subnormal+0x96>
8000947e:	f4 04 12 00 	clz	r4,r10
80009482:	f9 b4 03 00 	movlo	r4,0
80009486:	f7 b4 02 e0 	subhs	r4,-32
8000948a:	f4 04 09 4b 	lsl	r11,r10,r4
8000948e:	30 0a       	mov	r10,0
80009490:	08 17       	sub	r7,r4
80009492:	a3 8a       	lsr	r10,0x2
80009494:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80009498:	a3 8b       	lsr	r11,0x2
8000949a:	c1 1b       	rjmp	800092bc <__avr32_f64_div+0x20>
8000949c:	a3 79       	lsl	r9,0x3
8000949e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800094a2:	a3 78       	lsl	r8,0x3
800094a4:	f3 e8 10 04 	or	r4,r9,r8
800094a8:	c6 f0       	breq	80009586 <__avr32_f64_div_res_subnormal+0xa0>
800094aa:	f2 04 12 00 	clz	r4,r9
800094ae:	c1 70       	breq	800094dc <__avr32_f64_div_round_subnormal+0xe0>
800094b0:	c0 c3       	brcs	800094c8 <__avr32_f64_div_round_subnormal+0xcc>
800094b2:	e8 05 11 20 	rsub	r5,r4,32
800094b6:	f2 04 09 49 	lsl	r9,r9,r4
800094ba:	f0 05 0a 45 	lsr	r5,r8,r5
800094be:	0a 49       	or	r9,r5
800094c0:	f0 04 09 48 	lsl	r8,r8,r4
800094c4:	08 16       	sub	r6,r4
800094c6:	c0 b8       	rjmp	800094dc <__avr32_f64_div_round_subnormal+0xe0>
800094c8:	f0 04 12 00 	clz	r4,r8
800094cc:	f9 b4 03 00 	movlo	r4,0
800094d0:	f7 b4 02 e0 	subhs	r4,-32
800094d4:	f0 04 09 49 	lsl	r9,r8,r4
800094d8:	30 08       	mov	r8,0
800094da:	08 16       	sub	r6,r4
800094dc:	a3 88       	lsr	r8,0x2
800094de:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800094e2:	a3 89       	lsr	r9,0x2
800094e4:	cf ca       	rjmp	800092dc <__avr32_f64_div+0x40>

800094e6 <__avr32_f64_div_res_subnormal>:
800094e6:	5c 37       	neg	r7
800094e8:	2f f7       	sub	r7,-1
800094ea:	f1 b7 04 c0 	satu	r7,0x6
800094ee:	e0 47 00 20 	cp.w	r7,32
800094f2:	c1 54       	brge	8000951c <__avr32_f64_div_res_subnormal+0x36>
800094f4:	ee 06 11 20 	rsub	r6,r7,32
800094f8:	e4 07 0a 42 	lsr	r2,r2,r7
800094fc:	e6 06 09 4c 	lsl	r12,r3,r6
80009500:	18 42       	or	r2,r12
80009502:	e6 07 0a 43 	lsr	r3,r3,r7
80009506:	f4 06 09 41 	lsl	r1,r10,r6
8000950a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000950e:	f6 06 09 4c 	lsl	r12,r11,r6
80009512:	18 4a       	or	r10,r12
80009514:	f6 07 0a 4b 	lsr	r11,r11,r7
80009518:	30 00       	mov	r0,0
8000951a:	c1 58       	rjmp	80009544 <__avr32_f64_div_res_subnormal+0x5e>
8000951c:	ee 06 11 20 	rsub	r6,r7,32
80009520:	f9 b0 00 00 	moveq	r0,0
80009524:	f9 bc 00 00 	moveq	r12,0
80009528:	c0 50       	breq	80009532 <__avr32_f64_div_res_subnormal+0x4c>
8000952a:	f4 06 09 40 	lsl	r0,r10,r6
8000952e:	f6 06 09 4c 	lsl	r12,r11,r6
80009532:	e6 07 0a 42 	lsr	r2,r3,r7
80009536:	30 03       	mov	r3,0
80009538:	f4 07 0a 41 	lsr	r1,r10,r7
8000953c:	18 41       	or	r1,r12
8000953e:	f6 07 0a 4a 	lsr	r10,r11,r7
80009542:	30 0b       	mov	r11,0
80009544:	e0 12 ff 00 	andl	r2,0xff00
80009548:	e8 12 00 80 	orl	r2,0x80
8000954c:	e6 08 06 46 	mulu.d	r6,r3,r8
80009550:	e4 09 07 46 	macu.d	r6,r2,r9
80009554:	e4 08 06 44 	mulu.d	r4,r2,r8
80009558:	e6 09 06 48 	mulu.d	r8,r3,r9
8000955c:	0c 05       	add	r5,r6
8000955e:	f0 07 00 48 	adc	r8,r8,r7
80009562:	5c 09       	acr	r9
80009564:	30 07       	mov	r7,0
80009566:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000956a:	00 34       	cp.w	r4,r0
8000956c:	e2 05 13 00 	cpc	r5,r1
80009570:	c4 6b       	rjmp	800093fc <__avr32_f64_div_round_subnormal>
80009572:	1c 9b       	mov	r11,lr
80009574:	e6 1b 80 00 	andh	r11,0x8000,COH
80009578:	30 0a       	mov	r10,0
8000957a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000957e:	3f fb       	mov	r11,-1
80009580:	30 0a       	mov	r10,0
80009582:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009586:	f5 eb 10 04 	or	r4,r10,r11
8000958a:	c0 90       	breq	8000959c <__avr32_f64_div_op1_zero>
8000958c:	1c 9b       	mov	r11,lr
8000958e:	e6 1b 80 00 	andh	r11,0x8000,COH
80009592:	ea 1b 7f f0 	orh	r11,0x7ff0
80009596:	30 0a       	mov	r10,0
80009598:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000959c <__avr32_f64_div_op1_zero>:
8000959c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800095a0:	ce f0       	breq	8000957e <__avr32_f64_div_res_subnormal+0x98>
800095a2:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800095a6:	e0 44 07 ff 	cp.w	r4,2047
800095aa:	ce 41       	brne	80009572 <__avr32_f64_div_res_subnormal+0x8c>
800095ac:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800095b0:	ce 10       	breq	80009572 <__avr32_f64_div_res_subnormal+0x8c>
800095b2:	ce 6b       	rjmp	8000957e <__avr32_f64_div_res_subnormal+0x98>

800095b4 <__avr32_umod64>:
800095b4:	d4 31       	pushm	r0-r7,lr
800095b6:	1a 97       	mov	r7,sp
800095b8:	20 3d       	sub	sp,12
800095ba:	10 9c       	mov	r12,r8
800095bc:	12 95       	mov	r5,r9
800095be:	14 9e       	mov	lr,r10
800095c0:	16 91       	mov	r1,r11
800095c2:	16 96       	mov	r6,r11
800095c4:	58 09       	cp.w	r9,0
800095c6:	e0 81 00 81 	brne	800096c8 <__avr32_umod64+0x114>
800095ca:	16 38       	cp.w	r8,r11
800095cc:	e0 88 00 12 	brls	800095f0 <__avr32_umod64+0x3c>
800095d0:	f0 08 12 00 	clz	r8,r8
800095d4:	c4 e0       	breq	80009670 <__avr32_umod64+0xbc>
800095d6:	f6 08 09 46 	lsl	r6,r11,r8
800095da:	f8 08 09 4c 	lsl	r12,r12,r8
800095de:	f0 0b 11 20 	rsub	r11,r8,32
800095e2:	f4 08 09 4e 	lsl	lr,r10,r8
800095e6:	f4 0b 0a 4b 	lsr	r11,r10,r11
800095ea:	f7 e6 10 06 	or	r6,r11,r6
800095ee:	c4 18       	rjmp	80009670 <__avr32_umod64+0xbc>
800095f0:	58 08       	cp.w	r8,0
800095f2:	c0 51       	brne	800095fc <__avr32_umod64+0x48>
800095f4:	30 19       	mov	r9,1
800095f6:	f2 08 0d 08 	divu	r8,r9,r8
800095fa:	10 9c       	mov	r12,r8
800095fc:	f8 08 12 00 	clz	r8,r12
80009600:	c0 31       	brne	80009606 <__avr32_umod64+0x52>
80009602:	18 16       	sub	r6,r12
80009604:	c3 68       	rjmp	80009670 <__avr32_umod64+0xbc>
80009606:	f0 03 11 20 	rsub	r3,r8,32
8000960a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000960e:	f8 08 09 4c 	lsl	r12,r12,r8
80009612:	ec 08 09 49 	lsl	r9,r6,r8
80009616:	ec 03 0a 43 	lsr	r3,r6,r3
8000961a:	f7 e9 10 09 	or	r9,r11,r9
8000961e:	f8 05 16 10 	lsr	r5,r12,0x10
80009622:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009626:	e6 05 0d 02 	divu	r2,r3,r5
8000962a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000962e:	ec 02 02 4b 	mul	r11,r6,r2
80009632:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009636:	16 3e       	cp.w	lr,r11
80009638:	c0 72       	brcc	80009646 <__avr32_umod64+0x92>
8000963a:	18 0e       	add	lr,r12
8000963c:	18 3e       	cp.w	lr,r12
8000963e:	c0 43       	brcs	80009646 <__avr32_umod64+0x92>
80009640:	16 3e       	cp.w	lr,r11
80009642:	fd dc e3 0e 	addcs	lr,lr,r12
80009646:	fc 0b 01 03 	sub	r3,lr,r11
8000964a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000964e:	e6 05 0d 02 	divu	r2,r3,r5
80009652:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009656:	a5 36       	mul	r6,r2
80009658:	0c 39       	cp.w	r9,r6
8000965a:	c0 72       	brcc	80009668 <__avr32_umod64+0xb4>
8000965c:	18 09       	add	r9,r12
8000965e:	18 39       	cp.w	r9,r12
80009660:	c0 43       	brcs	80009668 <__avr32_umod64+0xb4>
80009662:	0c 39       	cp.w	r9,r6
80009664:	f3 dc e3 09 	addcs	r9,r9,r12
80009668:	f2 06 01 06 	sub	r6,r9,r6
8000966c:	f4 08 09 4e 	lsl	lr,r10,r8
80009670:	f8 0a 16 10 	lsr	r10,r12,0x10
80009674:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009678:	ec 0a 0d 02 	divu	r2,r6,r10
8000967c:	fc 09 16 10 	lsr	r9,lr,0x10
80009680:	ea 02 02 4b 	mul	r11,r5,r2
80009684:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009688:	16 39       	cp.w	r9,r11
8000968a:	c0 72       	brcc	80009698 <__avr32_umod64+0xe4>
8000968c:	18 09       	add	r9,r12
8000968e:	18 39       	cp.w	r9,r12
80009690:	c0 43       	brcs	80009698 <__avr32_umod64+0xe4>
80009692:	16 39       	cp.w	r9,r11
80009694:	f3 dc e3 09 	addcs	r9,r9,r12
80009698:	f2 0b 01 0b 	sub	r11,r9,r11
8000969c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800096a0:	f6 0a 0d 0a 	divu	r10,r11,r10
800096a4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800096a8:	ea 0a 02 4a 	mul	r10,r5,r10
800096ac:	14 3e       	cp.w	lr,r10
800096ae:	c0 72       	brcc	800096bc <__avr32_umod64+0x108>
800096b0:	18 0e       	add	lr,r12
800096b2:	18 3e       	cp.w	lr,r12
800096b4:	c0 43       	brcs	800096bc <__avr32_umod64+0x108>
800096b6:	14 3e       	cp.w	lr,r10
800096b8:	fd dc e3 0e 	addcs	lr,lr,r12
800096bc:	fc 0a 01 0a 	sub	r10,lr,r10
800096c0:	30 0b       	mov	r11,0
800096c2:	f4 08 0a 4a 	lsr	r10,r10,r8
800096c6:	c7 b8       	rjmp	800097bc <__avr32_umod64+0x208>
800096c8:	16 39       	cp.w	r9,r11
800096ca:	e0 8b 00 79 	brhi	800097bc <__avr32_umod64+0x208>
800096ce:	f2 09 12 00 	clz	r9,r9
800096d2:	c1 21       	brne	800096f6 <__avr32_umod64+0x142>
800096d4:	10 3a       	cp.w	r10,r8
800096d6:	5f 2b       	srhs	r11
800096d8:	0a 31       	cp.w	r1,r5
800096da:	5f ba       	srhi	r10
800096dc:	f7 ea 10 0a 	or	r10,r11,r10
800096e0:	f2 0a 18 00 	cp.b	r10,r9
800096e4:	c0 60       	breq	800096f0 <__avr32_umod64+0x13c>
800096e6:	fc 08 01 0c 	sub	r12,lr,r8
800096ea:	e2 05 01 46 	sbc	r6,r1,r5
800096ee:	18 9e       	mov	lr,r12
800096f0:	0c 9b       	mov	r11,r6
800096f2:	1c 9a       	mov	r10,lr
800096f4:	c6 48       	rjmp	800097bc <__avr32_umod64+0x208>
800096f6:	ea 09 09 4c 	lsl	r12,r5,r9
800096fa:	f2 06 11 20 	rsub	r6,r9,32
800096fe:	f6 09 09 4b 	lsl	r11,r11,r9
80009702:	f0 09 09 42 	lsl	r2,r8,r9
80009706:	ef 46 ff f4 	st.w	r7[-12],r6
8000970a:	f0 06 0a 48 	lsr	r8,r8,r6
8000970e:	18 48       	or	r8,r12
80009710:	e2 06 0a 4c 	lsr	r12,r1,r6
80009714:	f4 09 09 43 	lsl	r3,r10,r9
80009718:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000971c:	f4 06 0a 4a 	lsr	r10,r10,r6
80009720:	16 4a       	or	r10,r11
80009722:	f0 0b 16 10 	lsr	r11,r8,0x10
80009726:	f8 0b 0d 04 	divu	r4,r12,r11
8000972a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000972e:	08 91       	mov	r1,r4
80009730:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009734:	e8 0e 02 46 	mul	r6,r4,lr
80009738:	0c 3c       	cp.w	r12,r6
8000973a:	c0 a2       	brcc	8000974e <__avr32_umod64+0x19a>
8000973c:	20 11       	sub	r1,1
8000973e:	10 0c       	add	r12,r8
80009740:	10 3c       	cp.w	r12,r8
80009742:	c0 63       	brcs	8000974e <__avr32_umod64+0x19a>
80009744:	0c 3c       	cp.w	r12,r6
80009746:	f7 b1 03 01 	sublo	r1,1
8000974a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000974e:	0c 1c       	sub	r12,r6
80009750:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009754:	f8 0b 0d 04 	divu	r4,r12,r11
80009758:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000975c:	08 96       	mov	r6,r4
8000975e:	e8 0e 02 4e 	mul	lr,r4,lr
80009762:	1c 3b       	cp.w	r11,lr
80009764:	c0 a2       	brcc	80009778 <__avr32_umod64+0x1c4>
80009766:	20 16       	sub	r6,1
80009768:	10 0b       	add	r11,r8
8000976a:	10 3b       	cp.w	r11,r8
8000976c:	c0 63       	brcs	80009778 <__avr32_umod64+0x1c4>
8000976e:	1c 3b       	cp.w	r11,lr
80009770:	f7 b6 03 01 	sublo	r6,1
80009774:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009778:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000977c:	1c 1b       	sub	r11,lr
8000977e:	e2 02 06 40 	mulu.d	r0,r1,r2
80009782:	00 9e       	mov	lr,r0
80009784:	02 9c       	mov	r12,r1
80009786:	16 3c       	cp.w	r12,r11
80009788:	e0 8b 00 08 	brhi	80009798 <__avr32_umod64+0x1e4>
8000978c:	5f 06       	sreq	r6
8000978e:	06 30       	cp.w	r0,r3
80009790:	5f ba       	srhi	r10
80009792:	ed ea 00 0a 	and	r10,r6,r10
80009796:	c0 60       	breq	800097a2 <__avr32_umod64+0x1ee>
80009798:	fc 02 01 04 	sub	r4,lr,r2
8000979c:	f8 08 01 4c 	sbc	r12,r12,r8
800097a0:	08 9e       	mov	lr,r4
800097a2:	e6 0e 01 0a 	sub	r10,r3,lr
800097a6:	f6 0c 01 4c 	sbc	r12,r11,r12
800097aa:	ee f1 ff f4 	ld.w	r1,r7[-12]
800097ae:	f8 09 0a 4b 	lsr	r11,r12,r9
800097b2:	f4 09 0a 4a 	lsr	r10,r10,r9
800097b6:	f8 01 09 4c 	lsl	r12,r12,r1
800097ba:	18 4a       	or	r10,r12
800097bc:	2f dd       	sub	sp,-12
800097be:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009800 <_evba>:
80009800:	c0 08       	rjmp	80009800 <_evba>
	...

80009804 <_handle_TLB_Multiple_Hit>:
80009804:	c0 08       	rjmp	80009804 <_handle_TLB_Multiple_Hit>
	...

80009808 <_handle_Bus_Error_Data_Fetch>:
80009808:	c0 08       	rjmp	80009808 <_handle_Bus_Error_Data_Fetch>
	...

8000980c <_handle_Bus_Error_Instruction_Fetch>:
8000980c:	c0 08       	rjmp	8000980c <_handle_Bus_Error_Instruction_Fetch>
	...

80009810 <_handle_NMI>:
80009810:	c0 08       	rjmp	80009810 <_handle_NMI>
	...

80009814 <_handle_Instruction_Address>:
80009814:	c0 08       	rjmp	80009814 <_handle_Instruction_Address>
	...

80009818 <_handle_ITLB_Protection>:
80009818:	c0 08       	rjmp	80009818 <_handle_ITLB_Protection>
	...

8000981c <_handle_Breakpoint>:
8000981c:	c0 08       	rjmp	8000981c <_handle_Breakpoint>
	...

80009820 <_handle_Illegal_Opcode>:
80009820:	c0 08       	rjmp	80009820 <_handle_Illegal_Opcode>
	...

80009824 <_handle_Unimplemented_Instruction>:
80009824:	c0 08       	rjmp	80009824 <_handle_Unimplemented_Instruction>
	...

80009828 <_handle_Privilege_Violation>:
80009828:	c0 08       	rjmp	80009828 <_handle_Privilege_Violation>
	...

8000982c <_handle_Floating_Point>:
8000982c:	c0 08       	rjmp	8000982c <_handle_Floating_Point>
	...

80009830 <_handle_Coprocessor_Absent>:
80009830:	c0 08       	rjmp	80009830 <_handle_Coprocessor_Absent>
	...

80009834 <_handle_Data_Address_Read>:
80009834:	c0 08       	rjmp	80009834 <_handle_Data_Address_Read>
	...

80009838 <_handle_Data_Address_Write>:
80009838:	c0 08       	rjmp	80009838 <_handle_Data_Address_Write>
	...

8000983c <_handle_DTLB_Protection_Read>:
8000983c:	c0 08       	rjmp	8000983c <_handle_DTLB_Protection_Read>
	...

80009840 <_handle_DTLB_Protection_Write>:
80009840:	c0 08       	rjmp	80009840 <_handle_DTLB_Protection_Write>
	...

80009844 <_handle_DTLB_Modified>:
80009844:	c0 08       	rjmp	80009844 <_handle_DTLB_Modified>
	...

80009850 <_handle_ITLB_Miss>:
80009850:	c0 08       	rjmp	80009850 <_handle_ITLB_Miss>
	...

80009860 <_handle_DTLB_Miss_Read>:
80009860:	c0 08       	rjmp	80009860 <_handle_DTLB_Miss_Read>
	...

80009870 <_handle_DTLB_Miss_Write>:
80009870:	c0 08       	rjmp	80009870 <_handle_DTLB_Miss_Write>
	...

80009900 <_handle_Supervisor_Call>:
80009900:	c0 08       	rjmp	80009900 <_handle_Supervisor_Call>
80009902:	d7 03       	nop

80009904 <_int0>:
80009904:	30 0c       	mov	r12,0
80009906:	fe b0 c8 31 	rcall	80002968 <_get_interrupt_handler>
8000990a:	58 0c       	cp.w	r12,0
8000990c:	f8 0f 17 10 	movne	pc,r12
80009910:	d6 03       	rete

80009912 <_int1>:
80009912:	30 1c       	mov	r12,1
80009914:	fe b0 c8 2a 	rcall	80002968 <_get_interrupt_handler>
80009918:	58 0c       	cp.w	r12,0
8000991a:	f8 0f 17 10 	movne	pc,r12
8000991e:	d6 03       	rete

80009920 <_int2>:
80009920:	30 2c       	mov	r12,2
80009922:	fe b0 c8 23 	rcall	80002968 <_get_interrupt_handler>
80009926:	58 0c       	cp.w	r12,0
80009928:	f8 0f 17 10 	movne	pc,r12
8000992c:	d6 03       	rete

8000992e <_int3>:
8000992e:	30 3c       	mov	r12,3
80009930:	fe b0 c8 1c 	rcall	80002968 <_get_interrupt_handler>
80009934:	58 0c       	cp.w	r12,0
80009936:	f8 0f 17 10 	movne	pc,r12
8000993a:	d6 03       	rete
8000993c:	d7 03       	nop
8000993e:	d7 03       	nop
80009940:	d7 03       	nop
80009942:	d7 03       	nop
80009944:	d7 03       	nop
80009946:	d7 03       	nop
80009948:	d7 03       	nop
8000994a:	d7 03       	nop
8000994c:	d7 03       	nop
8000994e:	d7 03       	nop
80009950:	d7 03       	nop
80009952:	d7 03       	nop
80009954:	d7 03       	nop
80009956:	d7 03       	nop
80009958:	d7 03       	nop
8000995a:	d7 03       	nop
8000995c:	d7 03       	nop
8000995e:	d7 03       	nop
80009960:	d7 03       	nop
80009962:	d7 03       	nop
80009964:	d7 03       	nop
80009966:	d7 03       	nop
80009968:	d7 03       	nop
8000996a:	d7 03       	nop
8000996c:	d7 03       	nop
8000996e:	d7 03       	nop
80009970:	d7 03       	nop
80009972:	d7 03       	nop
80009974:	d7 03       	nop
80009976:	d7 03       	nop
80009978:	d7 03       	nop
8000997a:	d7 03       	nop
8000997c:	d7 03       	nop
8000997e:	d7 03       	nop
80009980:	d7 03       	nop
80009982:	d7 03       	nop
80009984:	d7 03       	nop
80009986:	d7 03       	nop
80009988:	d7 03       	nop
8000998a:	d7 03       	nop
8000998c:	d7 03       	nop
8000998e:	d7 03       	nop
80009990:	d7 03       	nop
80009992:	d7 03       	nop
80009994:	d7 03       	nop
80009996:	d7 03       	nop
80009998:	d7 03       	nop
8000999a:	d7 03       	nop
8000999c:	d7 03       	nop
8000999e:	d7 03       	nop
800099a0:	d7 03       	nop
800099a2:	d7 03       	nop
800099a4:	d7 03       	nop
800099a6:	d7 03       	nop
800099a8:	d7 03       	nop
800099aa:	d7 03       	nop
800099ac:	d7 03       	nop
800099ae:	d7 03       	nop
800099b0:	d7 03       	nop
800099b2:	d7 03       	nop
800099b4:	d7 03       	nop
800099b6:	d7 03       	nop
800099b8:	d7 03       	nop
800099ba:	d7 03       	nop
800099bc:	d7 03       	nop
800099be:	d7 03       	nop
800099c0:	d7 03       	nop
800099c2:	d7 03       	nop
800099c4:	d7 03       	nop
800099c6:	d7 03       	nop
800099c8:	d7 03       	nop
800099ca:	d7 03       	nop
800099cc:	d7 03       	nop
800099ce:	d7 03       	nop
800099d0:	d7 03       	nop
800099d2:	d7 03       	nop
800099d4:	d7 03       	nop
800099d6:	d7 03       	nop
800099d8:	d7 03       	nop
800099da:	d7 03       	nop
800099dc:	d7 03       	nop
800099de:	d7 03       	nop
800099e0:	d7 03       	nop
800099e2:	d7 03       	nop
800099e4:	d7 03       	nop
800099e6:	d7 03       	nop
800099e8:	d7 03       	nop
800099ea:	d7 03       	nop
800099ec:	d7 03       	nop
800099ee:	d7 03       	nop
800099f0:	d7 03       	nop
800099f2:	d7 03       	nop
800099f4:	d7 03       	nop
800099f6:	d7 03       	nop
800099f8:	d7 03       	nop
800099fa:	d7 03       	nop
800099fc:	d7 03       	nop
800099fe:	d7 03       	nop
